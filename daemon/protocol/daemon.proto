syntax = "proto3";

// TODO(dbentley): integrate this into our go build
// For now, to compile into daemon.pb.go, you need to:
// install a protoc with libproto version >= 3.0.0 from https://github.com/google/protobuf
// install protoc-gen-go from https://github.com/golang/protobuf (you need this to be on your $PATH, not your GOPATH)
// in this directory (github.com/twitter/scoot/daemon/protocol), run:
// protoc -I . daemon.proto --go_out=plugins=grpc:.
// if the generated daemon.pb.go contains "const _ = grpc.SupportPackageIsVersion4" (around line 414)
// change it to "const _ = grpc.SupportPackageIsVersion3"


// Protocol for talking to a Local Scoot Daemon.

package protocol;

service ScootDaemon {
  rpc Echo (EchoRequest) returns (EchoReply) {}

  rpc CreateSnapshot(CreateSnapshotRequest) returns (CreateSnapshotReply) {}
  rpc CheckoutSnapshot(CheckoutSnapshotRequest) returns (CheckoutSnapshotReply) {}
  rpc Run(RunRequest) returns (RunReply) {}
  rpc Poll(PollRequest) returns (PollReply) {}
  rpc StopDaemon(EmptyStruct) returns (EmptyStruct) {}
}

// Echo (for testing only).
//
message EchoRequest {
  string ping = 1;
}

message EchoReply {
  string pong = 1;
}


// Create snapshot.
//
message CreateSnapshotRequest {
  // Absolute path on the local filesystem. Only directory paths are allowed at this time.
  string path = 1;
}

message CreateSnapshotReply {
  string error = 1;
  string snapshot_id = 2;
}


// Checkout snapshot.
//
message CheckoutSnapshotRequest {
  string snapshot_id = 1;

  // Absolute path to a directory on the local filesystem (need not exist yet).
  string dir = 2;
}

message CheckoutSnapshotReply {
  string error = 1;
}


// Run
//
message RunRequest {
  message Command {
    // TODO(jschiller): get consensus on design and either implement or delete.
    // message OutputPlan {
    //   // After the run is done, generate a snapshot containing only the specified src paths.
    //   // This copies the src files & dirs to the corresponding destination path=dir/base.
    //   // The sources and destinations are all relative paths within the snapshot.
    //   // An empty map will result in an empty snapshot (except for stdout/stderr).
    //   // Behavior is undefined for duplicate entries within a destination.
    //   // Sources may include the '*' wildcard. If they do, corresponding destinations are treated as parent dirs.
    //   //
    //   // Note: snapshots will always contain root STDOUT and STDERR text files.

    //   map<string, string> src_paths_to_dest_dirs = 3;
    // }

    repeated string argv = 1;
    map<string, string> env = 2;
    int64 timeout_ns = 3; //TODO: consistent special values for timeouts like PollRequest.timeout_ns?
    string snapshot_id = 4;
    // OutputPlan plan = 5;
  }

  Command cmd = 1;
}

message RunReply {
  string run_id = 1;
  string error = 2;
}


// Poll
//
message PollRequest {
  repeated string run_ids = 1;

  // <0 to block indefinitely waiting for at least one finished run.
  //  0 to return immediately with finished runs, if any.
  // >0 to wait at most timeout_ns for at least one finished run.
  int64 timeout_ns = 2;

  // Include an updated status for all the given runs.
  bool all = 3;
}

message PollReply {
  message Status {
    enum State {
      UNKNOWN = 0;
      PENDING = 1;
      PREPARING = 2;
      RUNNING = 3;
      COMPLETED = 4;
      FAILED = 5;
    }
    string run_id = 1;
    State state = 2;
    string snapshot_id = 3;
    int32 exit_code = 4;
    string error = 5;
  }
  repeated Status status = 1;
}

message EmptyStruct {
}
