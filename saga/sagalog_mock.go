// Code generated by MockGen. DO NOT EDIT.
// Source: sagalog.go

// Package saga is a generated GoMock package.
package saga

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSagaLog is a mock of SagaLog interface
type MockSagaLog struct {
	ctrl     *gomock.Controller
	recorder *MockSagaLogMockRecorder
}

// MockSagaLogMockRecorder is the mock recorder for MockSagaLog
type MockSagaLogMockRecorder struct {
	mock *MockSagaLog
}

// NewMockSagaLog creates a new mock instance
func NewMockSagaLog(ctrl *gomock.Controller) *MockSagaLog {
	mock := &MockSagaLog{ctrl: ctrl}
	mock.recorder = &MockSagaLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSagaLog) EXPECT() *MockSagaLogMockRecorder {
	return m.recorder
}

// StartSaga mocks base method
func (m *MockSagaLog) StartSaga(sagaId string, job []byte) error {
	ret := m.ctrl.Call(m, "StartSaga", sagaId, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartSaga indicates an expected call of StartSaga
func (mr *MockSagaLogMockRecorder) StartSaga(sagaId, job interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSaga", reflect.TypeOf((*MockSagaLog)(nil).StartSaga), sagaId, job)
}

// LogMessage mocks base method
func (m *MockSagaLog) LogMessage(message SagaMessage) error {
	ret := m.ctrl.Call(m, "LogMessage", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogMessage indicates an expected call of LogMessage
func (mr *MockSagaLogMockRecorder) LogMessage(message interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogMessage", reflect.TypeOf((*MockSagaLog)(nil).LogMessage), message)
}

// GetMessages mocks base method
func (m *MockSagaLog) GetMessages(sagaId string) ([]SagaMessage, error) {
	ret := m.ctrl.Call(m, "GetMessages", sagaId)
	ret0, _ := ret[0].([]SagaMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages
func (mr *MockSagaLogMockRecorder) GetMessages(sagaId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockSagaLog)(nil).GetMessages), sagaId)
}

// GetActiveSagas mocks base method
func (m *MockSagaLog) GetActiveSagas() ([]string, error) {
	ret := m.ctrl.Call(m, "GetActiveSagas")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveSagas indicates an expected call of GetActiveSagas
func (mr *MockSagaLogMockRecorder) GetActiveSagas() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveSagas", reflect.TypeOf((*MockSagaLog)(nil).GetActiveSagas))
}
