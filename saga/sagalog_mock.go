// Automatically generated by MockGen. DO NOT EDIT!
// Source: sagalog.go

package saga

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of SagaLog interface
type MockSagaLog struct {
	ctrl     *gomock.Controller
	recorder *_MockSagaLogRecorder
}

// Recorder for MockSagaLog (not exported)
type _MockSagaLogRecorder struct {
	mock *MockSagaLog
}

func NewMockSagaLog(ctrl *gomock.Controller) *MockSagaLog {
	mock := &MockSagaLog{ctrl: ctrl}
	mock.recorder = &_MockSagaLogRecorder{mock}
	return mock
}

func (_m *MockSagaLog) EXPECT() *_MockSagaLogRecorder {
	return _m.recorder
}

func (_m *MockSagaLog) StartSaga(sagaId string, job []byte) error {
	ret := _m.ctrl.Call(_m, "StartSaga", sagaId, job)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSagaLogRecorder) StartSaga(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartSaga", arg0, arg1)
}

func (_m *MockSagaLog) LogMessage(message SagaMessage) error {
	ret := _m.ctrl.Call(_m, "LogMessage", message)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSagaLogRecorder) LogMessage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LogMessage", arg0)
}

func (_m *MockSagaLog) GetMessages(sagaId string) ([]SagaMessage, error) {
	ret := _m.ctrl.Call(_m, "GetMessages", sagaId)
	ret0, _ := ret[0].([]SagaMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSagaLogRecorder) GetMessages(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMessages", arg0)
}

func (_m *MockSagaLog) GetActiveSagas() ([]string, error) {
	ret := _m.ctrl.Call(_m, "GetActiveSagas")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSagaLogRecorder) GetActiveSagas() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetActiveSagas")
}
