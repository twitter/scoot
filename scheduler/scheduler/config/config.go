// Code generated by go-bindata. DO NOT EDIT.
// sources:
// config/config.go (8.668kB)
// config/local.local (367B)
// config/local.memory (325B)

package config

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x5b\x8f\xdb\xc6\x15\x7e\x16\x7f\xc5\x44\x40\x52\x2a\x51\x28\x52\x37\x4a\x2a\xf6\x21\xb1\x93\xc2\x45\xec\x14\x49\x8a\x3e\x78\x0c\x63\x48\x0e\xb5\x03\x53\xa4\x4a\x52\xeb\x59\x2f\xf4\xdf\x8b\x6f\xce\x50\x22\x25\xed\xc5\x5b\xb7\x45\x17\x58\x49\x1c\xce\xb9\x7f\xe7\x1b\x72\x66\x34\x62\x2f\x8a\x44\xb2\xb5\xcc\x65\x29\x6a\x99\xb0\xe8\x96\xad\x8b\xef\x23\x95\x27\xa2\x16\x9e\x33\x1a\xb1\xaa\xd8\x95\xb1\xac\x56\xf8\x1d\x17\x79\xaa\xd6\x23\xfa\xf2\xd6\x45\x6b\x2c\x2b\x62\x91\x79\xe6\xf3\x6c\x74\x23\x37\x45\x79\x8b\xe1\x97\xbf\xb2\x37\xbf\xfe\xc1\x7e\x7a\xf9\xea\x8f\xaf\x1c\x67\x2b\xe2\x0f\x62\x2d\xed\x64\xc7\x51\x9b\x6d\x51\xd6\xcc\x75\x7a\xfd\xe8\xb6\x96\x55\xdf\xe9\xf5\xe3\x62\xb3\x2d\x65\x55\x8d\xd6\x9f\xd4\x16\x03\xe9\xa6\xc6\x97\x2a\xe8\x73\xa4\x8a\x5d\xad\x32\x5c\x14\x46\x60\x2b\xea\xeb\x51\xaa\x32\x89\x1f\x18\xa8\xea\x52\xe5\x6b\x73\xaf\x56\x1b\xd9\x77\x06\x8e\x93\xee\xf2\x98\xd9\x28\x7f\x93\x22\x71\xf1\x83\xbd\x7d\x07\xb3\x43\x96\x8b\x8d\x64\x24\x36\x60\x6e\x33\x2a\xcb\xb2\x28\x07\xec\xce\xe9\xad\x3f\x99\x2b\xb6\xba\x62\xf0\xca\x7b\x23\x3f\x42\x89\x2c\x5d\xe3\x36\xae\x7f\xdc\xa5\xa9\x2c\x8d\xda\xc1\xc0\xe9\xa9\xd4\x08\x7c\x75\xc5\x72\x95\x41\x45\xaf\x94\xf5\xae\xcc\x71\x39\x64\xe9\xa6\xf6\x7e\x82\xf6\xd4\xed\x43\x11\xfb\xfa\x9f\x2b\xf6\xf5\x4d\x9f\x3c\x31\xb6\x06\x4e\x6f\xef\x38\xbd\x1b\x51\xb2\x68\x97\x32\xb2\x43\x46\x9c\xde\x7b\x72\xe7\x8a\xa9\xc2\x7b\x51\x6c\x6f\xdd\x6f\xa2\x5d\x3a\x64\xeb\x4f\x03\xa7\x17\x67\x3f\x35\x9e\x7a\x2f\xb2\xa2\x92\xee\xc0\xf9\x52\xfe\x40\x0d\xe9\xbf\x47\x91\x2c\x4b\xf2\xdb\x0e\x46\xbb\xd4\xfb\x11\xae\xbb\x83\x21\x66\x38\x7b\xc7\xa9\x6f\xb7\x92\x89\xaa\x92\x35\x52\xbe\x8b\x6b\x68\x31\xf1\xd9\x7a\x38\x3d\x95\xa7\x05\x63\x45\xe5\xfd\xac\x32\xf9\x2a\x4f\x8b\x83\x9c\x2d\x61\x33\xde\xd2\x60\x6a\xc8\x98\x2d\xa3\xd3\xab\xd4\x27\x73\xad\xf2\x7a\x3e\x75\x7a\x1b\xc0\x9e\x1d\x94\xbe\x2e\x12\x69\x06\xff\x50\x1b\xc9\x00\x13\x0f\xbf\x60\xc7\x40\xc5\x4d\xd5\xa9\xad\x01\x7b\x23\x36\xd2\x1d\x58\x0b\xb0\x69\xa3\x4c\x95\x07\xeb\xce\xfe\x01\xd9\xdf\xd5\x27\xc8\x1a\x6f\xba\xa2\x70\xf4\x41\x51\xf8\xea\x0e\xda\x9e\x77\x15\x20\xb4\xc7\x14\x20\x38\x77\x70\x0c\xf4\x4c\x83\x8d\xfe\x7e\x25\xaf\xaa\x97\xaa\x74\x07\x2c\x2a\x8a\xac\x2d\x2d\xb2\xea\x91\xc8\x6f\x2b\x0a\x5c\x96\xa9\x88\xe5\xdd\xbe\x25\x6d\x21\x01\x94\xbf\x27\x52\x78\x61\x3e\xff\x52\xb0\x2b\x8b\x06\xb7\xcf\x75\x90\x72\xbd\x88\xb8\xf6\x17\x5c\xfb\xfe\xe5\xff\x34\xe5\xda\x0f\xba\xd7\x66\xec\x9e\xf9\xf4\xdf\x6f\xb8\xa1\x6b\xdd\x62\xf6\x12\x17\x34\xc8\x6e\x71\x89\xd3\xeb\x9d\x78\x3f\x74\x7a\x60\xb2\x2e\x79\xf6\x87\x4e\x6f\x70\x40\x58\x57\x00\xb6\xbe\x35\x4d\xd1\xb6\x65\xba\xe2\x40\x3d\x17\x5d\x7c\xac\xb5\x0f\x1d\x69\x7a\x6a\x75\x75\x5a\x9f\x3b\x20\x77\xc5\x2e\x38\xcb\x00\xcc\x15\xf3\x87\x0c\x00\x5b\xb5\xf1\xe7\x4e\xc7\xfe\xc0\x8c\x03\x36\x2b\x82\xd5\xdf\x73\xa5\xdd\x60\xb6\x98\x2c\xc2\xc5\x64\x39\x1d\x32\x7f\xb0\x77\x7a\x02\x36\xbf\x31\x91\xdd\x99\x70\x56\xcc\x46\x05\x87\x56\xe6\x73\x7f\xc8\xaa\x18\x5e\x80\xc4\x2f\x58\x53\xcc\xc7\xb3\x40\x31\x8f\xb9\x5e\x48\xae\xa7\x01\xd7\x53\xcc\x9f\x70\x3d\x09\xb8\x0e\x7c\xae\xa7\x73\xae\x25\x80\x12\x71\x3d\x8e\xb8\x9e\x8e\xb9\x8e\x31\x77\x46\xba\xe5\x98\xeb\xf9\x8c\x6b\x91\x72\x2d\x13\xae\xa7\x4b\xae\xc7\x31\xd7\x63\x49\xd7\x8b\x31\xd7\x32\xe4\x7a\xbe\xe4\x3a\x9c\x73\x1d\x8c\xb9\x9e\x4e\xb8\x9e\x87\x5c\x87\x21\xd7\xcb\x39\xd7\xcb\x25\xd7\x8b\x25\xd7\xb3\x05\xd7\x62\x4a\x3e\xcd\x12\xae\xc5\x98\x6b\x91\x70\xed\x0b\xae\xd3\x19\xd7\xcb\x05\xd7\x21\xf4\x23\xae\x94\xfc\x12\x13\xae\xc3\x80\x7c\x82\x0f\x62\x61\xff\x03\xae\xd3\x05\xd7\xc9\x9c\xeb\x04\xfe\xc1\xde\x84\xeb\x48\x72\x3d\x49\x69\xbe\x5c\x70\x3d\x8b\xc8\x3f\xd8\x47\xdc\x4b\x9f\xeb\x79\xca\xf5\x32\xe6\x7a\x82\x98\xe1\x07\xec\x87\x5c\xc7\x63\xae\x43\xf8\xef\x73\x9d\x04\x5c\xcf\x91\x0f\xf8\x81\x1c\xf9\x5c\x07\x21\xd7\x49\x4a\xb6\x90\x4f\xe8\x4c\xc7\x5c\x2f\xa7\x5c\x4f\x04\x7d\xc7\xb1\x8d\x7f\x46\xf1\xfb\xf0\x25\xe2\x7a\x16\x70\x1d\xa6\x5c\x07\x11\xd7\x51\xc4\x75\xea\x73\xbd\x10\x34\x77\x1c\x90\x6c\x30\x23\x7b\xa8\x0d\x6c\xc8\x88\xf2\x17\x08\xae\x83\x05\xd7\xf1\x9c\xea\xb3\x0c\xc9\x1f\x1f\xb1\x4b\xae\x23\xe4\x7f\xc1\xf5\x72\x4c\x76\x10\x97\xd1\x27\xb9\x4e\xa7\x34\x17\xf9\x6e\xf4\xa1\x36\x91\xd5\x17\xda\x9a\xc2\x2f\xcc\x8f\x7c\xfa\x1e\xdb\x5c\xa1\xfe\xc1\x92\x30\x04\xbf\xe0\x37\xe6\xc6\x82\xe6\x18\xec\xcc\xa8\x6e\x89\xa0\xb9\x0b\xf8\x32\xe3\x3a\x5a\x52\x5e\xc6\x73\xae\xfd\x19\xc5\x9f\x4a\xc2\xdc\x78\xc1\xf5\x1c\x79\x9b\x71\x9d\x2c\xa9\x46\x41\x40\x32\xc0\x09\x72\x91\xc6\x5c\xa7\x09\xd5\x04\xbf\xa3\x09\xd7\x81\xc5\xd8\x04\xf7\x02\xaa\x35\x70\x3b\x9f\x90\x9d\x28\x26\x7c\xce\x62\x8a\x33\x46\x1d\x7d\x1a\x8b\x43\xc2\xda\x1c\x18\x81\x6d\xd4\x39\xb2\xbd\x32\xa7\x3c\x02\x4b\xc8\xe1\x74\x41\x38\x00\x4e\x80\x29\xd4\x2a\x06\x56\x50\x73\x60\x29\x3e\x27\x5a\xe4\xc5\xf4\xc9\x82\xf2\x33\xef\x10\xf2\x09\xd1\x1e\x7b\xfa\xb9\x54\x7b\xd4\xd0\x26\xdb\xd6\x53\xe9\x25\xba\x3d\x0a\x3d\x9d\x70\xcf\x5c\xfd\xc2\x94\xdb\x71\xd9\x92\xee\x64\x1e\x7e\x26\xed\x86\xc1\x62\x36\x99\xfa\xcb\x2f\x4c\xbb\xaf\xcd\x93\xfc\xf3\x79\x37\x25\xdc\xcc\x81\x9f\x09\x61\x0e\xbc\xbb\x98\x52\xef\x84\x16\x5b\xe0\x8b\x18\xbd\x9f\x70\x3d\x59\xd8\xbe\x9d\x73\x2d\xc0\x1d\x13\xae\xa7\x82\xb8\x1b\x7c\x81\x6f\x19\x5b\x3e\x5a\xd0\x7c\xe0\x7f\x16\x72\x3d\x9b\x52\x8f\x83\x87\x60\x13\x7d\x64\x38\x59\x58\xae\x48\xa8\x3f\xc1\xc3\xf0\x01\xfd\x18\xc4\xc4\x7f\x4b\xe8\x0d\x48\x57\x3a\xa7\x7e\x1b\x8f\x89\x03\xc0\xb3\x86\xe7\xa7\x5c\xcf\x7c\xea\x21\xf0\x30\xfa\x63\x3a\xe5\x3a\x89\xb9\x5e\xa6\xd4\x9f\xa1\x4f\x7e\xa2\x47\xa1\x0b\x5c\x19\x0a\xd2\x03\xee\xf3\xd1\xaf\x09\xdd\xf3\x25\xf1\x90\x9f\xd0\x5a\x20\x05\xe5\xc3\x70\x37\x7a\xd9\x27\x1e\x35\xb9\x8b\xc8\x2f\xf0\x05\xf4\xa3\x77\xc1\x8b\xe0\x93\x49\x48\x5c\x01\x3e\x19\x83\xfb\x26\x24\x83\x35\x05\xe3\x86\x23\x27\xc4\x59\xe0\x01\xf0\xfe\x14\x39\x4c\xb8\x4e\xc6\x96\x97\xa7\xc4\xad\xc8\x3d\x78\x23\xb1\xb1\x82\x23\xe1\x5f\x62\xf3\x2d\x67\xb4\xde\xc1\x06\xf2\x06\x2e\x43\xcc\xc1\x94\x72\x80\xdf\x98\x1f\xcd\xc9\x3f\xc4\x0d\x1e\x48\x05\xe5\x1a\xf1\xc8\x25\xf9\x1a\x4e\x89\xb7\x50\xab\xd0\x72\x4b\x92\x70\x3d\x5b\x92\xbf\xe0\x71\xd4\x5a\x58\x5c\x84\x11\xc5\x8a\x38\xe6\x73\xe2\x3e\x63\xcb\xae\x8f\x86\xdb\x25\x61\x0e\x1c\x0c\x6e\x9f\x49\xf2\x01\x5c\x39\x99\x10\x0f\x4f\x24\xf9\x03\x5f\x91\x67\xd4\x11\x79\x07\xff\xc2\x67\xf0\x36\x38\x2e\x8c\x29\xcf\x69\x83\x35\x49\x5c\xbe\x98\xd0\x3a\x11\x23\x47\x29\xad\xc5\x58\x47\x0d\xb6\x22\x5a\x8b\xb1\x2e\x00\x7f\xa7\x3c\x09\x5e\x04\x3e\xa1\x7f\x19\xd0\xb3\xc6\xc3\x3c\x49\x4d\xf8\x6f\x11\x25\xa9\x38\x67\x4a\x7a\x53\xbf\x97\x2a\x49\xec\x33\xb9\xb2\xe3\xee\x7f\x84\x2c\x1b\xaf\x1b\xb6\x1c\xcf\xfe\x37\x6c\x39\x1a\xb1\x1f\xcc\x8b\x6c\x56\x88\xa4\x62\x22\x4f\x18\xcd\xa9\x58\x7d\xdd\xbc\xe4\xa6\x45\x69\xae\xd6\xea\x46\xe6\xe6\x85\xda\x6c\xb3\xbc\xaa\x0f\x73\x45\x4e\x69\x65\x2a\x6d\xc9\xc5\xc5\x2e\x4b\x58\x5e\xd4\x2c\x92\x2c\x2d\x76\x79\xc2\x8a\x92\xb6\x5a\x5a\x37\x60\x59\x26\x1e\x55\xce\x38\xe3\x3e\xb6\x9b\x11\x8b\x3c\x2f\x72\x15\x8b\x0c\x2f\xb4\x08\xdd\xee\x98\x78\xbf\xc9\x6d\x26\x62\xe9\xd2\x5b\x7f\x9f\xf3\xfe\x90\xf5\x47\xfd\x21\xfb\x3e\xa0\x42\xa6\x43\x56\x7c\x80\xc4\x7b\x5b\xa6\xb7\x5d\x65\xef\xfe\x8c\xfb\xa8\xb1\x38\x20\x23\x05\x08\x2e\xa0\xe0\xde\x1d\x08\x4a\xe9\xd7\x15\x8b\x45\xfe\x27\x64\x49\x98\x6d\x2a\x13\xc0\x85\x6d\x89\xde\xfe\x08\x29\xe1\xd9\xba\xa1\x40\xbd\xbd\xf3\xb8\x0d\xa4\xd1\x24\xd7\x6a\x1d\xd8\xba\xbe\xde\x55\x35\x4d\x52\x15\xcb\xd4\x07\x69\x2b\x1d\xed\x6a\xb6\x15\xb9\x8a\x2b\xf6\xf1\x5a\xe6\x76\xf4\xa3\x29\x49\xe3\x84\x2d\x67\x53\xe6\x4a\x6d\xb6\x99\x4a\x95\xac\x58\x25\x52\xc9\x54\xae\x6a\x25\x32\xf5\x49\xd4\xaa\xc8\x59\x91\xb2\x75\x56\x44\x22\x63\x37\xa2\x54\x22\xca\x64\x65\xcb\x79\xf0\xa1\x5b\x52\xaa\x28\x72\x78\x4c\xf2\x71\xda\xc5\x8e\x33\x1e\xbb\x7d\x03\xac\x95\x9d\xdc\x67\xdf\xd1\xc6\xd7\x77\xac\x3f\x58\x31\x5c\xca\xb2\xa4\x0c\xb9\x83\x41\x67\x1f\x47\xb4\xd1\x6e\x36\x5e\x1e\x42\xbc\x69\xe5\xff\x36\xec\xe1\xd5\x09\xf4\x5b\x1b\x48\xff\x77\xf8\x37\x49\x7e\x66\x0f\x28\x13\xf0\x93\x5a\xa0\x31\x73\x5f\x1b\x98\x49\x88\xac\xea\xd4\x39\x37\x23\x45\xab\x6e\x55\xbb\x16\x46\xc0\x05\x52\x8f\x7b\x65\x24\xb2\xba\x62\x1b\xf1\x41\xba\xcd\x9d\x21\xf3\x87\x2c\x93\xb9\xdb\x24\x14\xc0\x03\x74\x72\x5b\x9a\x52\xe4\x6b\x79\x48\xb7\x49\x1c\x69\xba\x62\x62\xbb\x95\x79\x62\x8a\x55\x35\x5e\xb7\x03\xc6\xb8\x0d\xe3\x20\xaf\x2a\x26\x58\x8d\x26\x1b\xb2\xeb\x22\x4b\xe0\x9c\x14\xf1\xb5\x05\x9f\xdd\x17\x2f\xca\x21\xdb\x40\x7d\xc2\xea\x82\xa9\xba\xb2\xf8\x35\x4f\xc7\x8d\x2a\x44\xb2\x7d\x4b\x61\xbc\x43\xec\xe7\xcb\xe4\x9d\x73\x61\x17\x68\xc5\x18\x63\x67\xdb\x45\x97\xde\x06\x56\xec\xec\x15\xe4\x6c\xa6\x5d\x0a\x57\xe7\x0b\xf0\xb0\x5d\xc2\x97\xaa\xec\x14\x30\x55\x59\x53\xc5\x48\x66\xc5\x47\x26\x58\x2c\xcb\x5a\xa8\x1c\x22\x89\x2a\x65\x5c\xe3\xc1\x5f\x6e\x22\x99\x24\x32\x61\x2a\x3f\xca\x9d\x9f\x19\xfc\x5c\x94\x4c\x6a\xb1\xd9\x66\x12\xdd\x7c\x5b\xec\x58\xb9\xcb\x5b\xb3\x58\x91\x33\x7c\x8f\x3c\xcf\x33\xac\x61\x06\xe3\x22\x87\x49\xe3\x12\xd4\xa4\x45\x96\x15\x1f\x51\x93\x6b\x25\x4b\x51\xc6\xd7\xb7\xe6\x18\x02\x7f\x46\xba\xb9\x60\x2c\x2d\x0a\xaf\xd6\xf5\x71\x40\x6d\xd6\xad\xdb\x8c\x09\x6f\x9b\xaf\xdb\x03\x51\x33\x50\x1f\x78\xfb\xa5\x2a\xdd\x3e\x14\xf7\x07\x5d\x0a\x6f\xe0\x79\xd7\xb7\x76\x40\x04\x6a\xb3\xee\xef\xdb\x19\x25\xd9\x11\xc6\xef\x95\x37\x6e\x40\xda\x98\x3f\x95\x6f\xb4\x0f\x4c\x4e\x8e\xe3\x79\x51\x4b\xad\xaa\xfa\x54\x6f\x43\x99\x5d\x2d\x98\xa5\xb2\xec\xdc\xb8\x09\x6d\xdf\xee\x4c\xcc\x3f\x7d\x3e\x68\x3a\xf1\xc8\x90\x79\x91\xc8\x86\xe5\xea\x52\x4a\xc3\x7d\xe8\x52\xd3\x64\x20\x31\xdf\x74\xe2\x73\x99\xb4\xb7\x15\xf5\xf5\x2f\xaa\xaa\xdb\x22\xbf\x6f\x33\x55\xbb\x5d\x95\x46\x08\x02\xa0\x84\xf7\x43\xb6\x3d\x52\xc2\x41\x85\xe1\x52\xe3\xf1\x15\xc3\x97\xf7\xe2\x5a\x65\x49\x29\xf3\xb7\xdb\x77\xb8\xa5\x52\x46\x77\x5b\xd4\xfb\x9c\xe7\x82\x1e\xb1\xec\xbe\x39\x08\x31\xb6\x7e\x46\x66\x9f\x70\xaa\xf2\x90\x5e\x50\xd6\xcd\xfd\xcc\xd8\x89\xa9\xa1\xc7\x18\xd7\x6f\x3a\x1c\xd9\x99\x47\xce\xdc\x1c\x59\xb2\xbc\x19\x1e\x85\x3a\x3c\x89\x3b\xed\xa3\x19\x5b\xf3\xd6\xd1\x8a\x09\xd2\x34\xdd\x45\x96\x73\x7a\x07\xab\x2d\x46\xfc\xb6\xc1\x4e\xb3\xab\xd0\xe8\xbd\x62\xdf\xd8\x9f\x77\x26\x4d\x17\x64\x8e\xbc\xd9\x5f\xb1\x87\x66\x35\xd3\x0e\xbc\x7a\x77\x42\xac\x17\xe5\xf6\x7b\xf3\x22\x74\x42\xb5\x77\x67\x5c\xfb\xb8\xf0\x81\x7d\xef\xce\xe9\xf7\x7e\x69\x7c\xec\x89\x9c\x7f\x93\x55\x5d\x94\x92\xe0\x51\xd2\x85\x79\x32\xa2\xf5\x68\x97\x27\xb2\xfd\x18\x75\x20\x66\x6a\xe9\xb6\xb4\x9b\xa8\xf2\xe4\x24\x93\x9e\xae\xee\x9c\x1e\x78\xe0\xa9\x8f\x8a\x16\x15\xf6\xbd\xac\xa7\x9a\x87\xa7\x83\xe8\xe1\x41\xeb\x29\xe2\x74\x4c\x59\x54\xde\xeb\x0f\x89\x2a\x7f\xc8\x32\xf7\x3d\x96\x90\xbf\x89\xfa\x9a\x1c\x6e\x0e\x6e\xbd\x86\x99\x06\x83\x61\xe7\x2d\xce\x0f\x67\xb3\x07\x4f\x54\xbb\xa6\xe8\x74\xd8\xfb\x47\xa9\x6a\x09\x1d\xa7\xf6\x8c\x89\x21\xa3\x8c\x20\x38\x8f\x8e\xd7\x3e\x2b\x98\x17\xd7\x78\x99\xac\xee\xd1\xdd\x68\xa5\x33\xb7\xd3\xeb\xa7\x18\xea\x9e\x8e\x9d\xc0\xa4\xfa\x1c\x9c\xb0\x52\xc6\xbb\xb2\x52\x37\x32\xbb\x80\x99\xea\x21\xd0\xc4\xb6\xa9\xbb\xd5\x3f\x94\xc9\xe9\x61\xdd\x57\x99\x7c\x20\x9e\xcb\xf8\x24\xf6\x19\x8d\xd8\x4b\x55\x3a\x0d\xb3\x1b\x6b\x47\x32\x8b\xdb\x3c\x46\x79\xbf\xe0\xf8\x01\x3c\x7f\x2d\x54\x6e\xd7\x1a\x23\x39\x78\xf8\x91\xdb\xe4\xd9\x32\x79\x37\xd7\x26\x45\x17\xca\x7a\x48\xcf\xf1\x81\xf6\xb9\x8b\xdf\xe1\xd8\xb5\xed\xbb\x65\xe9\xc3\xd2\x9d\xa8\x72\x3f\x7c\xc2\xd2\xe8\x79\x9e\xf9\x77\xf6\xce\xbf\x02\x00\x00\xff\xff\x28\x5a\x35\x6d\xdc\x21\x00\x00")

func configConfigGoBytes() ([]byte, error) {
	return bindataRead(
		_configConfigGo,
		"config/config.go",
	)
}

func configConfigGo() (*asset, error) {
	bytes, err := configConfigGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.go", size: 8668, mode: os.FileMode(0644), modTime: time.Unix(1584466750, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0x82, 0xdc, 0xb7, 0x6e, 0xed, 0x86, 0x37, 0x22, 0x31, 0xfe, 0x68, 0x56, 0x51, 0x70, 0xe7, 0xe0, 0x6e, 0x18, 0xcc, 0x34, 0xbc, 0x26, 0x78, 0x6, 0x43, 0x74, 0xdf, 0x37, 0xc9, 0x71, 0x14}}
	return a, nil
}

var _configLocalLocal = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x41\x4b\x03\x31\x10\x46\xef\xfb\x2b\x42\xce\x45\x8b\xe2\x65\xaf\xed\x49\x2c\x2e\xed\x82\xe7\x69\x76\x12\x43\x67\x77\x96\x99\x89\x58\xa4\xff\x5d\xa2\xad\x0a\xf5\x98\x79\x2f\x8f\xef\xa3\x71\xce\xaf\xa8\xa8\xa1\xf8\xd6\xd5\xa7\x73\xbe\x3f\xce\xe8\x5b\xe7\x89\x03\x90\x6f\x9c\x3b\x2d\xaa\xf7\xc2\x72\x40\xd1\x6b\x4f\xe6\xe0\x17\xdf\xa7\x8e\x89\xf2\x94\x3a\x94\xcc\x43\x65\x77\x0f\xcb\x51\x7f\x1b\xbb\xf0\x8a\x43\x21\x94\x15\x4f\x31\xa7\xeb\x96\x1a\x18\xc6\x42\x97\xe0\x06\xde\xb7\x68\x92\x51\x3b\x94\x1e\xf4\xe0\x5d\xeb\x96\x67\xb8\xc6\x7d\x49\x1b\x1e\xb0\x1e\x23\x90\xe2\x19\x6c\x31\xf0\x1b\xca\x23\xef\xf5\x79\xda\x19\x88\x95\xb9\x3a\x26\x05\x7f\xfe\x46\x28\x64\x35\xd9\xe7\x11\xb9\x58\x15\xfc\xfd\x72\xfc\xb3\x16\x12\x3c\xf1\x3f\x2b\x63\x26\xbc\x2c\x5c\x67\xc1\x60\x2c\xc7\x0a\x6e\x34\x30\xdb\x00\x06\xb7\xd5\x51\x48\x40\x9c\xbe\x8a\xcd\xa9\xf9\x0c\x00\x00\xff\xff\x1b\xaf\xe8\xca\x6f\x01\x00\x00")

func configLocalLocalBytes() ([]byte, error) {
	return bindataRead(
		_configLocalLocal,
		"config/local.local",
	)
}

func configLocalLocal() (*asset, error) {
	bytes, err := configLocalLocalBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/local.local", size: 367, mode: os.FileMode(0644), modTime: time.Unix(1571853175, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf2, 0x53, 0x14, 0x19, 0x4, 0x15, 0x65, 0xc, 0xf3, 0x94, 0xd0, 0x67, 0xde, 0x8b, 0x72, 0x2b, 0xb, 0xf0, 0xf6, 0x79, 0xd9, 0x54, 0x6d, 0xbb, 0xb9, 0x6f, 0x86, 0xab, 0x3b, 0xe0, 0x3d, 0x1c}}
	return a, nil
}

var _configLocalMemory = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xcd\x6a\xc3\x30\x10\x84\xef\x7e\x8a\x65\xcf\x3d\x38\xf4\xe6\xab\x53\x4a\x4b\x43\x4b\xec\x17\xd8\x38\x63\x57\x54\x96\xcc\x6a\x15\x12\x4a\xde\xbd\x88\xa4\x84\xfe\x1c\xf7\x9b\xe1\x63\xf6\xb3\x22\xe2\xd6\xe7\x64\x50\x6e\xa8\x9c\x44\xdc\x9f\x16\x70\x43\x3c\x63\x8e\x7a\xe2\xbb\x0b\x6d\x63\x0e\xc6\x0d\xad\xea\x8a\xe8\x5c\x20\x77\xc3\x3b\xf6\xd9\x43\xdb\x18\x46\x37\xfd\x35\x24\x13\xc3\x98\xfd\xb7\x63\x23\xc7\x2d\x4c\x1d\xd2\x1b\xb4\x97\xf4\xc1\xd4\x50\x7d\x0d\xd7\xd8\xe5\x69\x13\xf7\x28\x70\x14\x9f\x70\x0d\xb6\x18\xe2\x01\xfa\x1c\x77\xe9\x35\x74\x26\x6a\x79\xf9\xdd\x59\x63\x94\xec\xad\x38\x7b\x37\x23\x66\x2b\x0d\xbe\xaf\x67\xbe\xcd\x95\x49\x5e\xe2\x3f\x33\x7f\x3e\xfa\x70\x5c\x9c\x8a\xb9\x18\x3a\x0c\x7c\xdb\xf7\xd8\x3e\x05\x83\x1e\xc4\x5f\xf8\xaa\x88\xab\x73\xf5\x15\x00\x00\xff\xff\x6f\xcc\x0c\x91\x45\x01\x00\x00")

func configLocalMemoryBytes() ([]byte, error) {
	return bindataRead(
		_configLocalMemory,
		"config/local.memory",
	)
}

func configLocalMemory() (*asset, error) {
	bytes, err := configLocalMemoryBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/local.memory", size: 325, mode: os.FileMode(0644), modTime: time.Unix(1571853175, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x43, 0x52, 0xa2, 0x6c, 0x15, 0x85, 0xd1, 0x8e, 0xce, 0xf2, 0x5d, 0x7a, 0x65, 0x2d, 0x17, 0x82, 0x18, 0xe3, 0x65, 0xfb, 0x9a, 0xf1, 0x8, 0x8d, 0x51, 0xd3, 0x4, 0x1f, 0x96, 0xad, 0xf7, 0x2f}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.go":    configConfigGo,
	"config/local.local":  configLocalLocal,
	"config/local.memory": configLocalMemory,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"config.go":    {configConfigGo, map[string]*bintree{}},
		"local.local":  {configLocalLocal, map[string]*bintree{}},
		"local.memory": {configLocalMemory, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
