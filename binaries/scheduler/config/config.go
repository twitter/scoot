// Code generated by go-bindata.
// sources:
// config/config.go
// config/local.local
// config/local.memory
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func configConfigGoBytes() ([]byte, error) {
	return bindataRead(
		_configConfigGo,
		"config/config.go",
	)
}

func configConfigGo() (*asset, error) {
	bytes, err := configConfigGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1563507698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configLocalLocal = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x41\x4b\x03\x31\x10\x46\xef\xfb\x2b\x42\xce\x45\x8b\xe2\x65\xaf\xed\x49\x2c\x2e\xed\x82\xe7\x69\x76\x12\x43\x67\x77\x96\x99\x89\x58\xa4\xff\x5d\xa2\xad\x0a\xf5\x98\x79\x2f\x8f\xef\xa3\x71\xce\xaf\xa8\xa8\xa1\xf8\xd6\xd5\xa7\x73\xbe\x3f\xce\xe8\x5b\xe7\x89\x03\x90\x6f\x9c\x3b\x2d\xaa\xf7\xc2\x72\x40\xd1\x6b\x4f\xe6\xe0\x17\xdf\xa7\x8e\x89\xf2\x94\x3a\x94\xcc\x43\x65\x77\x0f\xcb\x51\x7f\x1b\xbb\xf0\x8a\x43\x21\x94\x15\x4f\x31\xa7\xeb\x96\x1a\x18\xc6\x42\x97\xe0\x06\xde\xb7\x68\x92\x51\x3b\x94\x1e\xf4\xe0\x5d\xeb\x96\x67\xb8\xc6\x7d\x49\x1b\x1e\xb0\x1e\x23\x90\xe2\x19\x6c\x31\xf0\x1b\xca\x23\xef\xf5\x79\xda\x19\x88\x95\xb9\x3a\x26\x05\x7f\xfe\x46\x28\x64\x35\xd9\xe7\x11\xb9\x58\x15\xfc\xfd\x72\xfc\xb3\x16\x12\x3c\xf1\x3f\x2b\x63\x26\xbc\x2c\x5c\x67\xc1\x60\x2c\xc7\x0a\x6e\x34\x30\xdb\x00\x06\xb7\xd5\x51\x48\x40\x9c\xbe\x8a\xcd\xa9\xf9\x0c\x00\x00\xff\xff\x1b\xaf\xe8\xca\x6f\x01\x00\x00")

func configLocalLocalBytes() ([]byte, error) {
	return bindataRead(
		_configLocalLocal,
		"config/local.local",
	)
}

func configLocalLocal() (*asset, error) {
	bytes, err := configLocalLocalBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/local.local", size: 367, mode: os.FileMode(420), modTime: time.Unix(1562391592, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configLocalMemory = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xcd\x6a\xc3\x30\x10\x84\xef\x7e\x8a\x65\xcf\x3d\x38\xf4\xe6\xab\x53\x4a\x4b\x43\x4b\xec\x17\xd8\x38\x63\x57\x54\x96\xcc\x6a\x15\x12\x4a\xde\xbd\x88\xa4\x84\xfe\x1c\xf7\x9b\xe1\x63\xf6\xb3\x22\xe2\xd6\xe7\x64\x50\x6e\xa8\x9c\x44\xdc\x9f\x16\x70\x43\x3c\x63\x8e\x7a\xe2\xbb\x0b\x6d\x63\x0e\xc6\x0d\xad\xea\x8a\xe8\x5c\x20\x77\xc3\x3b\xf6\xd9\x43\xdb\x18\x46\x37\xfd\x35\x24\x13\xc3\x98\xfd\xb7\x63\x23\xc7\x2d\x4c\x1d\xd2\x1b\xb4\x97\xf4\xc1\xd4\x50\x7d\x0d\xd7\xd8\xe5\x69\x13\xf7\x28\x70\x14\x9f\x70\x0d\xb6\x18\xe2\x01\xfa\x1c\x77\xe9\x35\x74\x26\x6a\x79\xf9\xdd\x59\x63\x94\xec\xad\x38\x7b\x37\x23\x66\x2b\x0d\xbe\xaf\x67\xbe\xcd\x95\x49\x5e\xe2\x3f\x33\x7f\x3e\xfa\x70\x5c\x9c\x8a\xb9\x18\x3a\x0c\x7c\xdb\xf7\xd8\x3e\x05\x83\x1e\xc4\x5f\xf8\xaa\x88\xab\x73\xf5\x15\x00\x00\xff\xff\x6f\xcc\x0c\x91\x45\x01\x00\x00")

func configLocalMemoryBytes() ([]byte, error) {
	return bindataRead(
		_configLocalMemory,
		"config/local.memory",
	)
}

func configLocalMemory() (*asset, error) {
	bytes, err := configLocalMemoryBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/local.memory", size: 325, mode: os.FileMode(420), modTime: time.Unix(1562391592, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.go":    configConfigGo,
	"config/local.local":  configLocalLocal,
	"config/local.memory": configLocalMemory,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"config.go":    {configConfigGo, map[string]*bintree{}},
		"local.local":  {configLocalLocal, map[string]*bintree{}},
		"local.memory": {configLocalMemory, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
