// Code generated by go-bindata. DO NOT EDIT.
// sources:
// config/config.go (6.372kB)
// config/local.local (3B)

package config

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x5f\x6f\xdb\x38\x12\x7f\x96\x3e\xc5\xac\x80\xf6\xa4\x5d\xad\xec\x34\xcd\x36\xe7\x43\x1e\x76\x93\xf6\xd0\xc3\xb6\x7b\xe8\xf6\x70\x0f\x75\x11\xd0\x12\x65\x13\x91\x49\x1d\x49\x27\x4e\x0c\x7f\xf7\xc3\x0c\x29\x59\x72\x14\x27\xcd\x2d\x0e\xd8\x00\x91\x45\x8a\xf3\xff\x37\xc3\x21\x47\x23\x38\x57\x05\x87\x39\x97\x5c\x33\xcb\x0b\x98\xdd\xc2\x5c\xfd\x38\x13\xb2\x60\x96\x65\xe1\x68\x04\x46\xad\x74\xce\xcd\x04\xdf\x73\x25\x4b\x31\x1f\xb9\x9f\x6c\xae\x3a\x73\x95\xca\x59\x95\xd1\x13\x67\x2f\x7e\x83\x8f\xbf\x7d\x86\xb7\x17\xef\x3f\x7f\x17\x86\x35\xcb\xaf\xd8\x9c\xfb\xb5\x61\x28\x96\xb5\xd2\x16\xe2\x30\x88\x66\xb7\x96\x9b\x28\x0c\xa2\x5c\x2d\x6b\xcd\x8d\x19\xcd\xef\x44\x8d\x13\xe5\xd2\xe2\x8f\x50\xee\x39\x12\x6a\x65\x45\x85\x03\x45\x04\x35\xb3\x8b\x51\x29\x2a\x8e\x2f\x38\x61\xac\x16\x72\x4e\xdf\xac\x58\xf2\x28\x4c\xc2\xb0\x5c\xc9\x1c\xbc\x39\x9f\x38\x2b\x62\x7c\x81\x2f\x5f\x51\x6c\x0a\x92\x2d\x39\x38\xb2\x04\xe2\x66\x96\x6b\xad\x74\x02\x9b\x30\x98\xdf\xd1\x08\x26\x67\x80\x5a\x65\x1f\xf9\x0d\x32\xe1\x3a\x26\xb5\x71\xfc\xcb\xaa\x2c\xb9\x26\xb6\x49\x12\x06\xa2\x24\x82\xef\xce\x40\x8a\x0a\x59\x04\x9a\xdb\x95\x96\x38\x4c\xa1\x5c\xda\xec\x2d\x72\x2f\xe3\x08\x19\xc1\x8b\xff\x4c\xe0\xc5\x75\xe4\x34\x21\x59\x49\x18\x6c\xc3\x30\xb8\x66\x1a\x66\xab\x12\x9c\x1c\x27\x24\x0c\x2e\x9d\x3a\x67\x20\x54\x76\xae\xea\xdb\xf8\xe5\x6c\x55\xa6\x30\xbf\x4b\xc2\x20\xaf\xde\x36\x9a\x66\xe7\x95\x32\x3c\x4e\xc2\x3f\x4a\x1f\x64\xe3\xf8\x3f\xc0\x88\x6b\xed\xf4\xf6\x93\xb3\x55\x99\xfd\x82\xaa\xc7\x49\x8a\x2b\xc2\x6d\x18\xda\xdb\x9a\x03\x33\x86\x5b\x74\xf9\x2a\xb7\xc8\x85\xec\xf3\xf1\x08\x03\x21\x4b\x05\xa0\x4c\xf6\x4e\x54\xfc\xbd\x2c\x55\x4b\xe7\x43\xd8\xcc\x77\x38\x50\x0c\x01\x7c\x18\xc3\xc0\x88\x3b\x1a\x0b\x69\x7f\x7a\x1d\x06\x4b\xc4\x37\xb4\x4c\x3f\xa8\x82\xd3\xe4\x67\xb1\xe4\x80\x30\xc9\xf0\x0d\xe5\x10\x54\xe2\x52\xec\xcb\x4a\xe0\x23\x5b\xf2\x38\xf1\x12\x50\xa6\xb7\xb2\x14\x19\x4a\x0f\xb7\x07\x68\x7f\x17\x77\x48\x4b\xda\xf4\x49\x51\xd1\x83\xa4\xa8\x6b\x9c\x74\x35\xef\x33\x40\xd3\x1e\x63\x80\xc6\xc5\xc9\xce\xd0\x7b\x1c\xbc\xf5\x0f\x33\x79\x6f\x2e\x84\x8e\x13\x98\x29\x55\x75\xa9\x59\x65\x1e\xb1\xfc\xd6\x38\xc3\xb9\x2e\x59\xce\x37\xdb\x0e\xb5\x87\x04\xa2\xfc\xd2\x15\x85\x73\x7a\xfe\x5d\xc1\x99\x47\x43\x1c\x4d\xd7\x47\xe5\x74\x7d\x3a\x9b\xae\xc7\xa7\xd3\xf5\x78\x3c\xfc\x5f\x96\xd3\xf5\xf8\xa8\x3f\xa6\xb9\x07\xd6\xbb\xff\xa8\xa9\x0d\x7d\xe9\x1e\xb3\x43\xb5\xa0\x41\x76\xa7\x96\x84\x41\xb0\xa7\x7d\x1a\x06\x58\xc9\xfa\x55\x32\x4a\xc3\x20\x69\x11\xd6\x27\x40\x59\xdf\x53\x52\x74\x65\x51\x56\xb4\xa5\x67\x50\xc5\xc7\x52\xbb\xcd\x48\xca\xa9\xc9\xd9\x7e\x7c\x36\x88\xdc\x09\x0c\x28\x0b\x08\xcc\x09\x8c\x53\x40\x80\x4d\xba\xf8\x8b\x5f\xbf\x1a\x27\x34\x8f\xb0\x99\x38\x58\xfd\x4b\x8a\x75\x7c\x74\x72\x7a\x7c\xfa\xe6\xf4\xf8\xaf\xc7\x29\x8c\x93\x6d\x18\x30\x94\xf9\x92\x2c\xdb\x90\x39\x13\xf0\x56\xa1\x42\x13\x7a\x6e\x5b\xaf\xb2\x74\x00\x12\xbf\xe2\x66\x42\x8f\x67\x81\x82\xb1\xe9\x9a\xf1\xe9\x9a\x9f\x4c\xd7\xe3\x57\xd3\xf5\xf8\xf5\x00\x48\x7e\x9a\xae\x67\xe3\xe9\x9a\x1d\x4d\xd7\x45\x31\x5d\x8f\x8f\x0f\x80\x64\xa7\xcf\x73\x61\xb2\xe3\xd0\x05\x4a\x67\xeb\x1c\x82\xca\x8e\xe8\xe9\x60\xb9\xa7\xea\x1f\x0c\x97\x9e\xca\x1e\x30\xc7\xdf\x08\x98\x37\xe3\xf1\xab\xd3\x93\xe3\xa3\xff\x11\x30\xa3\x11\xfc\x4c\x9b\x4a\xa5\x58\x61\x80\xc9\x02\xdc\x1a\x03\x76\xd1\x6c\x38\xa5\xd2\x34\x9a\x8b\x6b\x2e\x69\x73\xa3\xde\xe6\xbd\x6d\xd7\x32\xe9\x5c\x0a\xa2\xec\xd0\xe5\x6a\x55\x15\x20\x95\x85\x19\x87\x52\xad\x64\x01\x4a\xbb\xae\xa7\xf3\x01\x25\xf3\x22\x73\x41\x23\x65\xe2\xc7\x3a\x8b\x9c\x49\xa9\xa4\xc8\x59\x85\x9b\x0b\x9a\xee\xbb\x97\xec\x13\xaf\x2b\x96\xf3\xd8\xed\xc0\xd1\x74\x1a\xa5\x10\x8d\xa2\x14\x7e\x3c\x72\x51\x2c\x53\x50\x57\x48\x71\xe9\x63\xf4\xa5\xcf\xec\xeb\xdf\xf0\x3b\x06\x98\xb5\xa8\x28\x11\x01\x03\x10\x78\xb0\x1b\x70\x2e\x7d\x61\x20\x67\xf2\x2f\xe8\x25\x46\xbd\x21\x19\x30\xd0\x22\x60\x8f\xd0\x86\x26\xf3\x71\xc3\x00\x05\xdb\xf0\x71\x19\xe8\x46\x72\xae\xe7\x9a\xf8\xb8\x7e\x58\x19\xeb\x16\x09\x03\x95\xb8\xe2\x3e\xd2\xb3\x95\x85\x9a\x49\x91\x1b\xb8\x59\x70\xe9\x67\x6f\x28\x24\x8d\x12\x3e\x9c\x4d\x98\x8d\x58\xd6\x95\x28\x05\x37\x60\x58\xc9\x41\x48\x61\x05\xab\xc4\x1d\xb3\x42\x49\x50\x25\xcc\x2b\x35\x63\x15\x5c\x33\x2d\xd8\xac\xe2\xc6\x87\xb3\xd5\xa1\x1f\x52\x17\x51\xf4\xe1\xce\xc9\xbb\x65\x83\xe9\x46\x1a\xc7\x11\x01\x6b\xe2\x17\x47\xf0\x83\x6b\x42\x7f\x80\x28\x99\x00\x0e\xb9\xd6\xce\x43\x71\x92\xf4\x7a\x2a\xd6\x45\x3b\x35\x41\x87\x10\x4f\x79\xfc\xff\x86\x3d\x6a\xb5\x07\xfd\x4e\x33\xf7\xa7\xc3\x3f\x39\xf9\x99\x39\x20\xc8\xe0\x27\xa5\x40\x23\xe6\xa1\x34\xa0\x45\x68\x99\xe9\xc5\x59\xd2\x8c\xea\xc4\xcd\x74\x63\x41\x04\x31\x22\x75\xd7\xb7\x3a\x92\xc9\x19\x2c\xd9\x15\x8f\x9b\x2f\x29\xee\xf5\x15\x97\x71\xe3\x50\x04\x1e\x42\x47\xfa\xd0\x68\x26\xe7\xbc\x75\x37\x39\xce\x71\x3a\x03\x56\xd7\x5c\x16\x14\x2c\xd3\x68\xdd\x35\x18\xe7\xbd\x19\x2d\xbd\x30\xc0\xc0\x62\x92\xa5\xb0\x50\x55\x81\xca\x71\x96\x2f\x3c\xf8\xfc\x61\x54\xe9\x14\x96\xc8\xbe\x00\xab\x40\x58\xe3\xf1\x4b\x0d\x42\xc3\x0a\x2d\xa9\xbf\x38\x33\xbe\xa2\xed\xf7\xb7\xc8\x4d\x38\xd0\x91\x4d\x00\xe0\x5e\xe7\x36\xb4\xb9\x4d\xee\x6d\xa8\x69\x37\x2a\x17\x42\xf7\x62\x82\xc7\x51\x1f\x98\x19\xaf\xd4\x0d\x30\xc8\xb9\xb6\x4c\x48\x24\x29\x84\xe6\xb9\x55\xfa\x16\xf8\x72\xc6\x8b\x82\x17\x20\xe4\x8e\xee\xfe\xd9\xfb\x9d\xd2\xc0\xd7\x6c\x59\x57\x1c\x13\xf4\x56\xad\x40\xaf\x64\x67\x15\x28\x09\xf8\x3b\xca\xb2\x8c\x0a\x01\x4d\xe6\x4a\xa2\x48\x52\x09\xd9\x94\xaa\xaa\xd4\x0d\xba\x79\x21\xb8\x66\x3a\x5f\xdc\xd2\x71\x1e\xff\x88\xba\x19\x00\x94\x4a\x65\x76\x6d\x77\x13\x62\x39\xef\x7c\x06\x60\x59\x2d\xe7\xdd\x89\x59\x33\x61\xdb\x52\x8c\x07\x86\x08\x19\x47\x49\xbf\x2a\x37\x88\xdb\x44\x5e\x0e\xe6\xb6\x58\xce\xa3\x6d\xd7\xa3\x8e\x76\x84\xf3\x0f\xd2\x93\x1a\x48\x4d\xe2\xf7\xe9\x1b\xee\x09\xf9\x64\x37\x2f\x95\xe5\x6b\x61\xec\x3e\xdf\xa6\x0a\xf6\xb9\xe0\x2a\x51\x55\xf7\x85\x93\x69\xdb\x6e\xb2\xe1\xfa\xfd\x2d\xbf\x49\xae\x5d\xd1\x93\x78\x84\xf3\x85\xcb\x6a\xce\xa9\x9c\x61\xe2\x51\xde\x60\x5d\x1a\x53\x72\x3d\xb7\x38\x06\x35\xb3\x8b\x5f\x85\xb1\x5d\x92\xdf\xeb\x4a\xd8\xb8\xcf\x92\x88\x90\x00\xb3\xfc\x32\x85\x7a\x97\xe5\x2d\x0b\x2a\x8f\xa4\xf1\x19\xe0\x4f\x76\xbe\x10\x55\xa1\xb9\xfc\x52\x7f\xc5\x4f\xa2\x04\xf7\xb5\x53\x4d\x9f\xb3\xd5\x07\xae\x70\x6e\x9b\x7b\x06\x92\xf5\x0e\x3d\xfb\x84\x4b\x8b\x43\x7c\xb1\x0a\x5d\x3f\x5c\xec\x7a\x36\x35\x15\x2f\xc7\xf1\xc7\x5e\xd9\xeb\xad\x73\xca\x5c\xef\x0a\x9f\xbe\x4e\x77\x44\xbd\xd2\x87\x5f\xba\x37\x1f\x3e\xe6\x9d\x9b\x0b\x32\x92\x92\x6e\xb0\x70\x85\x41\x2b\xb5\x53\xe4\xbe\x6f\xb0\xd3\x9c\x95\x1a\xbe\x67\xf0\xd2\xbf\x6e\xc8\x4d\x03\x34\xbb\x52\x18\x4d\xe0\xd0\xaa\x66\x59\x53\x2a\x37\x7b\xb5\x72\x90\x6c\xbb\xa5\x43\x4d\xbf\x7a\x6e\xee\x95\xcf\x87\x69\xf1\xb1\x75\xc5\xf5\x13\x37\x56\x69\xee\xc2\xab\xdd\x80\x9a\x15\xb7\x45\xac\x64\xc1\xbb\x9d\x4d\x5b\x58\x5d\x4a\x76\xa9\xe3\x42\xe8\xbd\x8b\x3e\xd7\xf0\x6c\xc2\x00\xf3\xf8\xa9\xdd\x9b\x8f\xaa\x3f\x27\x05\xa2\xe9\x67\x5a\xd2\xb6\xf7\x79\x0a\xb9\xbb\xc5\x53\x26\xfb\x70\x55\x08\xfd\x73\x55\xc5\x97\xb8\x05\xfc\x93\xd9\x85\x53\xb8\xb9\xd7\xcc\x9a\xca\x92\x24\x69\xef\x60\x35\x7e\x73\x72\x72\xf0\xc2\xb1\x2f\xca\x5d\x9e\x66\xff\xd6\xc2\x72\xe4\xb1\x2f\x8f\x44\xa4\xe0\x3c\x82\xc6\x65\xee\xf6\xe9\x9b\x8c\x39\x5f\xe0\xf9\xce\x3c\xc0\xbb\xe1\xea\xae\xa4\xf6\xc7\x4f\x11\xd4\xbf\x3c\xda\x83\x89\xf9\x16\x9c\x80\xe6\xf9\x4a\x1b\x71\xcd\xab\x01\xcc\x98\x43\xa0\xc9\x7d\x52\xf6\xa3\xdf\x86\x29\x0c\x70\xdf\x16\x15\x3f\x60\xcf\x30\x3e\x5d\xf5\x18\x8d\xe0\x42\xe8\xb0\xa9\xcc\x24\x6d\x57\x8c\xf2\x6e\x1d\x72\x7e\x1f\x50\xbc\x05\xcf\x3f\x94\x90\x7e\xaf\x20\xca\xe4\x70\x17\x4c\x7e\xf6\x95\xb8\xef\x6b\x72\xd1\x40\x58\x5b\xf7\xec\x7a\xcc\xe7\x6e\x5e\xed\xad\x64\x57\x77\x5f\x65\xdb\xad\xb7\x10\x7a\x9b\x3e\x61\x6b\xcb\xb2\x8c\xfe\xc3\x6d\xf8\xdf\x00\x00\x00\xff\xff\x4f\x56\x7b\x7d\xe4\x18\x00\x00")

func configConfigGoBytes() ([]byte, error) {
	return bindataRead(
		_configConfigGo,
		"config/config.go",
	)
}

func configConfigGo() (*asset, error) {
	bytes, err := configConfigGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.go", size: 6372, mode: os.FileMode(0644), modTime: time.Unix(1584466750, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbb, 0x2f, 0x9a, 0x31, 0x53, 0x36, 0xaa, 0xc0, 0x42, 0xfe, 0x59, 0x47, 0x95, 0x70, 0x78, 0xfa, 0xaa, 0xca, 0x98, 0x47, 0x41, 0xb0, 0x3, 0xbe, 0x68, 0xeb, 0xcd, 0xca, 0x12, 0xf8, 0xd7, 0x39}}
	return a, nil
}

var _configLocalLocal = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xe5\x02\x04\x00\x00\xff\xff\x06\xb0\xa1\xdd\x03\x00\x00\x00")

func configLocalLocalBytes() ([]byte, error) {
	return bindataRead(
		_configLocalLocal,
		"config/local.local",
	)
}

func configLocalLocal() (*asset, error) {
	bytes, err := configLocalLocalBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/local.local", size: 3, mode: os.FileMode(0644), modTime: time.Unix(1570115455, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xca, 0x3d, 0x16, 0x3b, 0xab, 0x5, 0x53, 0x81, 0x82, 0x72, 0x26, 0x14, 0x5, 0x68, 0xf3, 0xbe, 0xf7, 0xea, 0xac, 0x18, 0x7c, 0xeb, 0xd7, 0x68, 0x78, 0xe0, 0xb6, 0x3e, 0x9e, 0x44, 0x23, 0x56}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.go":   configConfigGo,
	"config/local.local": configLocalLocal,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"config.go":   {configConfigGo, map[string]*bintree{}},
		"local.local": {configLocalLocal, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
