// Automatically generated by MockGen. DO NOT EDIT!
// Source: scheduler.go

package scheduler

import (
	gomock "github.com/golang/mock/gomock"
	saga "github.com/twitter/scoot/saga"
	sched "github.com/twitter/scoot/sched"
)

// Mock of Scheduler interface
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *_MockSchedulerRecorder
}

// Recorder for MockScheduler (not exported)
type _MockSchedulerRecorder struct {
	mock *MockScheduler
}

func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &_MockSchedulerRecorder{mock}
	return mock
}

func (_m *MockScheduler) EXPECT() *_MockSchedulerRecorder {
	return _m.recorder
}

func (_m *MockScheduler) ScheduleJob(jobDef sched.JobDefinition) (string, error) {
	ret := _m.ctrl.Call(_m, "ScheduleJob", jobDef)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSchedulerRecorder) ScheduleJob(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ScheduleJob", arg0)
}

func (_m *MockScheduler) KillJob(jobId string) error {
	ret := _m.ctrl.Call(_m, "KillJob", jobId)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSchedulerRecorder) KillJob(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KillJob", arg0)
}

func (_m *MockScheduler) GetSagaCoord() saga.SagaCoordinator {
	ret := _m.ctrl.Call(_m, "GetSagaCoord")
	ret0, _ := ret[0].(saga.SagaCoordinator)
	return ret0
}

func (_mr *_MockSchedulerRecorder) GetSagaCoord() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSagaCoord")
}

func (_m *MockScheduler) OfflineWorker(req sched.OfflineWorkerReq) error {
	ret := _m.ctrl.Call(_m, "OfflineWorker", req)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSchedulerRecorder) OfflineWorker(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OfflineWorker", arg0)
}

func (_m *MockScheduler) ReinstateWorker(req sched.ReinstateWorkerReq) error {
	ret := _m.ctrl.Call(_m, "ReinstateWorker", req)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSchedulerRecorder) ReinstateWorker(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReinstateWorker", arg0)
}
