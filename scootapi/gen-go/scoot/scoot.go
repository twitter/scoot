// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package scoot

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/twitter/scoot/bazel/execution/bazelapi/gen-go/bazel"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = bazel.GoUnusedProtection__

type JobType int64

const (
	JobType_UNKNOWN    JobType = 1
	JobType_IRON_TESTS JobType = 2
)

func (p JobType) String() string {
	switch p {
	case JobType_UNKNOWN:
		return "UNKNOWN"
	case JobType_IRON_TESTS:
		return "IRON_TESTS"
	}
	return "<UNSET>"
}

func JobTypeFromString(s string) (JobType, error) {
	switch s {
	case "UNKNOWN":
		return JobType_UNKNOWN, nil
	case "IRON_TESTS":
		return JobType_IRON_TESTS, nil
	}
	return JobType(0), fmt.Errorf("not a valid JobType string")
}

func JobTypePtr(v JobType) *JobType { return &v }

func (p JobType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *JobType) UnmarshalText(text []byte) error {
	q, err := JobTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *JobType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = JobType(v)
	return nil
}

func (p *JobType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type RunStatusState int64

const (
	RunStatusState_UNKNOWN    RunStatusState = 0
	RunStatusState_PENDING    RunStatusState = 1
	RunStatusState_RUNNING    RunStatusState = 2
	RunStatusState_COMPLETE   RunStatusState = 3
	RunStatusState_FAILED     RunStatusState = 4
	RunStatusState_ABORTED    RunStatusState = 5
	RunStatusState_TIMEDOUT   RunStatusState = 6
	RunStatusState_BADREQUEST RunStatusState = 7
)

func (p RunStatusState) String() string {
	switch p {
	case RunStatusState_UNKNOWN:
		return "UNKNOWN"
	case RunStatusState_PENDING:
		return "PENDING"
	case RunStatusState_RUNNING:
		return "RUNNING"
	case RunStatusState_COMPLETE:
		return "COMPLETE"
	case RunStatusState_FAILED:
		return "FAILED"
	case RunStatusState_ABORTED:
		return "ABORTED"
	case RunStatusState_TIMEDOUT:
		return "TIMEDOUT"
	case RunStatusState_BADREQUEST:
		return "BADREQUEST"
	}
	return "<UNSET>"
}

func RunStatusStateFromString(s string) (RunStatusState, error) {
	switch s {
	case "UNKNOWN":
		return RunStatusState_UNKNOWN, nil
	case "PENDING":
		return RunStatusState_PENDING, nil
	case "RUNNING":
		return RunStatusState_RUNNING, nil
	case "COMPLETE":
		return RunStatusState_COMPLETE, nil
	case "FAILED":
		return RunStatusState_FAILED, nil
	case "ABORTED":
		return RunStatusState_ABORTED, nil
	case "TIMEDOUT":
		return RunStatusState_TIMEDOUT, nil
	case "BADREQUEST":
		return RunStatusState_BADREQUEST, nil
	}
	return RunStatusState(0), fmt.Errorf("not a valid RunStatusState string")
}

func RunStatusStatePtr(v RunStatusState) *RunStatusState { return &v }

func (p RunStatusState) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *RunStatusState) UnmarshalText(text []byte) error {
	q, err := RunStatusStateFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *RunStatusState) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = RunStatusState(v)
	return nil
}

func (p *RunStatusState) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type Status int64

const (
	Status_NOT_STARTED  Status = 1
	Status_IN_PROGRESS  Status = 2
	Status_COMPLETED    Status = 3
	Status_ROLLING_BACK Status = 4
	Status_ROLLED_BACK  Status = 5
)

func (p Status) String() string {
	switch p {
	case Status_NOT_STARTED:
		return "NOT_STARTED"
	case Status_IN_PROGRESS:
		return "IN_PROGRESS"
	case Status_COMPLETED:
		return "COMPLETED"
	case Status_ROLLING_BACK:
		return "ROLLING_BACK"
	case Status_ROLLED_BACK:
		return "ROLLED_BACK"
	}
	return "<UNSET>"
}

func StatusFromString(s string) (Status, error) {
	switch s {
	case "NOT_STARTED":
		return Status_NOT_STARTED, nil
	case "IN_PROGRESS":
		return Status_IN_PROGRESS, nil
	case "COMPLETED":
		return Status_COMPLETED, nil
	case "ROLLING_BACK":
		return Status_ROLLING_BACK, nil
	case "ROLLED_BACK":
		return Status_ROLLED_BACK, nil
	}
	return Status(0), fmt.Errorf("not a valid Status string")
}

func StatusPtr(v Status) *Status { return &v }

func (p Status) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Status) UnmarshalText(text []byte) error {
	q, err := StatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *Status) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = Status(v)
	return nil
}

func (p *Status) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//  - Message
type InvalidRequest struct {
	Message *string `thrift:"message,1" db:"message" json:"message,omitempty"`
}

func NewInvalidRequest() *InvalidRequest {
	return &InvalidRequest{}
}

var InvalidRequest_Message_DEFAULT string

func (p *InvalidRequest) GetMessage() string {
	if !p.IsSetMessage() {
		return InvalidRequest_Message_DEFAULT
	}
	return *p.Message
}
func (p *InvalidRequest) IsSetMessage() bool {
	return p.Message != nil
}

func (p *InvalidRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InvalidRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *InvalidRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InvalidRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InvalidRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
		}
	}
	return err
}

func (p *InvalidRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvalidRequest(%+v)", *p)
}

func (p *InvalidRequest) Error() string {
	return p.String()
}

// Attributes:
//  - RetryAfterMs
type CanNotScheduleNow struct {
	RetryAfterMs *int64 `thrift:"retryAfterMs,1" db:"retryAfterMs" json:"retryAfterMs,omitempty"`
}

func NewCanNotScheduleNow() *CanNotScheduleNow {
	return &CanNotScheduleNow{}
}

var CanNotScheduleNow_RetryAfterMs_DEFAULT int64

func (p *CanNotScheduleNow) GetRetryAfterMs() int64 {
	if !p.IsSetRetryAfterMs() {
		return CanNotScheduleNow_RetryAfterMs_DEFAULT
	}
	return *p.RetryAfterMs
}
func (p *CanNotScheduleNow) IsSetRetryAfterMs() bool {
	return p.RetryAfterMs != nil
}

func (p *CanNotScheduleNow) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CanNotScheduleNow) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RetryAfterMs = &v
	}
	return nil
}

func (p *CanNotScheduleNow) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CanNotScheduleNow"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CanNotScheduleNow) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRetryAfterMs() {
		if err := oprot.WriteFieldBegin("retryAfterMs", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:retryAfterMs: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RetryAfterMs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.retryAfterMs (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:retryAfterMs: ", p), err)
		}
	}
	return err
}

func (p *CanNotScheduleNow) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CanNotScheduleNow(%+v)", *p)
}

func (p *CanNotScheduleNow) Error() string {
	return p.String()
}

// Attributes:
//  - RetryAfterMs
type ScootServerError struct {
	RetryAfterMs *int64 `thrift:"retryAfterMs,1" db:"retryAfterMs" json:"retryAfterMs,omitempty"`
}

func NewScootServerError() *ScootServerError {
	return &ScootServerError{}
}

var ScootServerError_RetryAfterMs_DEFAULT int64

func (p *ScootServerError) GetRetryAfterMs() int64 {
	if !p.IsSetRetryAfterMs() {
		return ScootServerError_RetryAfterMs_DEFAULT
	}
	return *p.RetryAfterMs
}
func (p *ScootServerError) IsSetRetryAfterMs() bool {
	return p.RetryAfterMs != nil
}

func (p *ScootServerError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ScootServerError) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RetryAfterMs = &v
	}
	return nil
}

func (p *ScootServerError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ScootServerError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ScootServerError) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRetryAfterMs() {
		if err := oprot.WriteFieldBegin("retryAfterMs", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:retryAfterMs: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RetryAfterMs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.retryAfterMs (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:retryAfterMs: ", p), err)
		}
	}
	return err
}

func (p *ScootServerError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScootServerError(%+v)", *p)
}

func (p *ScootServerError) Error() string {
	return p.String()
}

// Attributes:
//  - Status
//  - RunId
//  - OutUri
//  - ErrUri
//  - Error
//  - ExitCode
//  - SnapshotId
//  - JobId
//  - TaskId
//  - Tag
//  - BazelResult_
type RunStatus struct {
	Status       RunStatusState       `thrift:"status,1,required" db:"status" json:"status"`
	RunId        string               `thrift:"runId,2,required" db:"runId" json:"runId"`
	OutUri       *string              `thrift:"outUri,3" db:"outUri" json:"outUri,omitempty"`
	ErrUri       *string              `thrift:"errUri,4" db:"errUri" json:"errUri,omitempty"`
	Error        *string              `thrift:"error,5" db:"error" json:"error,omitempty"`
	ExitCode     *int32               `thrift:"exitCode,6" db:"exitCode" json:"exitCode,omitempty"`
	SnapshotId   *string              `thrift:"snapshotId,7" db:"snapshotId" json:"snapshotId,omitempty"`
	JobId        *string              `thrift:"jobId,8" db:"jobId" json:"jobId,omitempty"`
	TaskId       *string              `thrift:"taskId,9" db:"taskId" json:"taskId,omitempty"`
	Tag          *string              `thrift:"tag,10" db:"tag" json:"tag,omitempty"`
	BazelResult_ *bazel.ActionResult_ `thrift:"bazelResult,11" db:"bazelResult" json:"bazelResult,omitempty"`
}

func NewRunStatus() *RunStatus {
	return &RunStatus{}
}

func (p *RunStatus) GetStatus() RunStatusState {
	return p.Status
}

func (p *RunStatus) GetRunId() string {
	return p.RunId
}

var RunStatus_OutUri_DEFAULT string

func (p *RunStatus) GetOutUri() string {
	if !p.IsSetOutUri() {
		return RunStatus_OutUri_DEFAULT
	}
	return *p.OutUri
}

var RunStatus_ErrUri_DEFAULT string

func (p *RunStatus) GetErrUri() string {
	if !p.IsSetErrUri() {
		return RunStatus_ErrUri_DEFAULT
	}
	return *p.ErrUri
}

var RunStatus_Error_DEFAULT string

func (p *RunStatus) GetError() string {
	if !p.IsSetError() {
		return RunStatus_Error_DEFAULT
	}
	return *p.Error
}

var RunStatus_ExitCode_DEFAULT int32

func (p *RunStatus) GetExitCode() int32 {
	if !p.IsSetExitCode() {
		return RunStatus_ExitCode_DEFAULT
	}
	return *p.ExitCode
}

var RunStatus_SnapshotId_DEFAULT string

func (p *RunStatus) GetSnapshotId() string {
	if !p.IsSetSnapshotId() {
		return RunStatus_SnapshotId_DEFAULT
	}
	return *p.SnapshotId
}

var RunStatus_JobId_DEFAULT string

func (p *RunStatus) GetJobId() string {
	if !p.IsSetJobId() {
		return RunStatus_JobId_DEFAULT
	}
	return *p.JobId
}

var RunStatus_TaskId_DEFAULT string

func (p *RunStatus) GetTaskId() string {
	if !p.IsSetTaskId() {
		return RunStatus_TaskId_DEFAULT
	}
	return *p.TaskId
}

var RunStatus_Tag_DEFAULT string

func (p *RunStatus) GetTag() string {
	if !p.IsSetTag() {
		return RunStatus_Tag_DEFAULT
	}
	return *p.Tag
}

var RunStatus_BazelResult__DEFAULT *bazel.ActionResult_

func (p *RunStatus) GetBazelResult_() *bazel.ActionResult_ {
	if !p.IsSetBazelResult_() {
		return RunStatus_BazelResult__DEFAULT
	}
	return p.BazelResult_
}
func (p *RunStatus) IsSetOutUri() bool {
	return p.OutUri != nil
}

func (p *RunStatus) IsSetErrUri() bool {
	return p.ErrUri != nil
}

func (p *RunStatus) IsSetError() bool {
	return p.Error != nil
}

func (p *RunStatus) IsSetExitCode() bool {
	return p.ExitCode != nil
}

func (p *RunStatus) IsSetSnapshotId() bool {
	return p.SnapshotId != nil
}

func (p *RunStatus) IsSetJobId() bool {
	return p.JobId != nil
}

func (p *RunStatus) IsSetTaskId() bool {
	return p.TaskId != nil
}

func (p *RunStatus) IsSetTag() bool {
	return p.Tag != nil
}

func (p *RunStatus) IsSetBazelResult_() bool {
	return p.BazelResult_ != nil
}

func (p *RunStatus) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false
	var issetRunId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetRunId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetRunId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RunId is not set"))
	}
	return nil
}

func (p *RunStatus) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := RunStatusState(v)
		p.Status = temp
	}
	return nil
}

func (p *RunStatus) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RunId = v
	}
	return nil
}

func (p *RunStatus) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.OutUri = &v
	}
	return nil
}

func (p *RunStatus) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ErrUri = &v
	}
	return nil
}

func (p *RunStatus) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Error = &v
	}
	return nil
}

func (p *RunStatus) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ExitCode = &v
	}
	return nil
}

func (p *RunStatus) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.SnapshotId = &v
	}
	return nil
}

func (p *RunStatus) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.JobId = &v
	}
	return nil
}

func (p *RunStatus) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.TaskId = &v
	}
	return nil
}

func (p *RunStatus) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Tag = &v
	}
	return nil
}

func (p *RunStatus) ReadField11(iprot thrift.TProtocol) error {
	p.BazelResult_ = &bazel.ActionResult_{}
	if err := p.BazelResult_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BazelResult_), err)
	}
	return nil
}

func (p *RunStatus) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RunStatus"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RunStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *RunStatus) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("runId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:runId: ", p), err)
	}
	if err := oprot.WriteString(string(p.RunId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.runId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:runId: ", p), err)
	}
	return err
}

func (p *RunStatus) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutUri() {
		if err := oprot.WriteFieldBegin("outUri", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:outUri: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OutUri)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.outUri (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:outUri: ", p), err)
		}
	}
	return err
}

func (p *RunStatus) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrUri() {
		if err := oprot.WriteFieldBegin("errUri", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:errUri: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ErrUri)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.errUri (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:errUri: ", p), err)
		}
	}
	return err
}

func (p *RunStatus) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:error: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Error)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.error (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:error: ", p), err)
		}
	}
	return err
}

func (p *RunStatus) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetExitCode() {
		if err := oprot.WriteFieldBegin("exitCode", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:exitCode: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ExitCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.exitCode (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:exitCode: ", p), err)
		}
	}
	return err
}

func (p *RunStatus) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetSnapshotId() {
		if err := oprot.WriteFieldBegin("snapshotId", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:snapshotId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SnapshotId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.snapshotId (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:snapshotId: ", p), err)
		}
	}
	return err
}

func (p *RunStatus) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetJobId() {
		if err := oprot.WriteFieldBegin("jobId", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:jobId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.JobId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.jobId (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:jobId: ", p), err)
		}
	}
	return err
}

func (p *RunStatus) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaskId() {
		if err := oprot.WriteFieldBegin("taskId", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:taskId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TaskId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.taskId (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:taskId: ", p), err)
		}
	}
	return err
}

func (p *RunStatus) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTag() {
		if err := oprot.WriteFieldBegin("tag", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:tag: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Tag)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tag (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:tag: ", p), err)
		}
	}
	return err
}

func (p *RunStatus) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetBazelResult_() {
		if err := oprot.WriteFieldBegin("bazelResult", thrift.STRUCT, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:bazelResult: ", p), err)
		}
		if err := p.BazelResult_.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BazelResult_), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:bazelResult: ", p), err)
		}
	}
	return err
}

func (p *RunStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RunStatus(%+v)", *p)
}

// Attributes:
//  - Argv
//  - EnvVars
type Command struct {
	Argv    []string          `thrift:"argv,1" db:"argv" json:"argv"`
	EnvVars map[string]string `thrift:"envVars,2" db:"envVars" json:"envVars,omitempty"`
}

func NewCommand() *Command {
	return &Command{}
}

func (p *Command) GetArgv() []string {
	return p.Argv
}

var Command_EnvVars_DEFAULT map[string]string

func (p *Command) GetEnvVars() map[string]string {
	return p.EnvVars
}
func (p *Command) IsSetEnvVars() bool {
	return p.EnvVars != nil
}

func (p *Command) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Command) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Argv = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.Argv = append(p.Argv, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Command) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.EnvVars = tMap
	for i := 0; i < size; i++ {
		var _key1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key1 = v
		}
		var _val2 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val2 = v
		}
		p.EnvVars[_key1] = _val2
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Command) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Command"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Command) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("argv", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:argv: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Argv)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Argv {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:argv: ", p), err)
	}
	return err
}

func (p *Command) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnvVars() {
		if err := oprot.WriteFieldBegin("envVars", thrift.MAP, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:envVars: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.EnvVars)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.EnvVars {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:envVars: ", p), err)
		}
	}
	return err
}

func (p *Command) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Command(%+v)", *p)
}

// Attributes:
//  - Command
//  - SnapshotId
//  - TaskId
//  - TimeoutMs
type TaskDefinition struct {
	Command    *Command `thrift:"command,1,required" db:"command" json:"command"`
	SnapshotId *string  `thrift:"snapshotId,2" db:"snapshotId" json:"snapshotId,omitempty"`
	TaskId     *string  `thrift:"taskId,3" db:"taskId" json:"taskId,omitempty"`
	TimeoutMs  *int32   `thrift:"timeoutMs,4" db:"timeoutMs" json:"timeoutMs,omitempty"`
}

func NewTaskDefinition() *TaskDefinition {
	return &TaskDefinition{}
}

var TaskDefinition_Command_DEFAULT *Command

func (p *TaskDefinition) GetCommand() *Command {
	if !p.IsSetCommand() {
		return TaskDefinition_Command_DEFAULT
	}
	return p.Command
}

var TaskDefinition_SnapshotId_DEFAULT string

func (p *TaskDefinition) GetSnapshotId() string {
	if !p.IsSetSnapshotId() {
		return TaskDefinition_SnapshotId_DEFAULT
	}
	return *p.SnapshotId
}

var TaskDefinition_TaskId_DEFAULT string

func (p *TaskDefinition) GetTaskId() string {
	if !p.IsSetTaskId() {
		return TaskDefinition_TaskId_DEFAULT
	}
	return *p.TaskId
}

var TaskDefinition_TimeoutMs_DEFAULT int32

func (p *TaskDefinition) GetTimeoutMs() int32 {
	if !p.IsSetTimeoutMs() {
		return TaskDefinition_TimeoutMs_DEFAULT
	}
	return *p.TimeoutMs
}
func (p *TaskDefinition) IsSetCommand() bool {
	return p.Command != nil
}

func (p *TaskDefinition) IsSetSnapshotId() bool {
	return p.SnapshotId != nil
}

func (p *TaskDefinition) IsSetTaskId() bool {
	return p.TaskId != nil
}

func (p *TaskDefinition) IsSetTimeoutMs() bool {
	return p.TimeoutMs != nil
}

func (p *TaskDefinition) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetCommand bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetCommand = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetCommand {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Command is not set"))
	}
	return nil
}

func (p *TaskDefinition) ReadField1(iprot thrift.TProtocol) error {
	p.Command = &Command{}
	if err := p.Command.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Command), err)
	}
	return nil
}

func (p *TaskDefinition) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SnapshotId = &v
	}
	return nil
}

func (p *TaskDefinition) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TaskId = &v
	}
	return nil
}

func (p *TaskDefinition) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TimeoutMs = &v
	}
	return nil
}

func (p *TaskDefinition) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TaskDefinition"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TaskDefinition) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("command", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:command: ", p), err)
	}
	if err := p.Command.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Command), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:command: ", p), err)
	}
	return err
}

func (p *TaskDefinition) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSnapshotId() {
		if err := oprot.WriteFieldBegin("snapshotId", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:snapshotId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SnapshotId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.snapshotId (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:snapshotId: ", p), err)
		}
	}
	return err
}

func (p *TaskDefinition) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaskId() {
		if err := oprot.WriteFieldBegin("taskId", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:taskId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TaskId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.taskId (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:taskId: ", p), err)
		}
	}
	return err
}

func (p *TaskDefinition) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeoutMs() {
		if err := oprot.WriteFieldBegin("timeoutMs", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timeoutMs: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.TimeoutMs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timeoutMs (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timeoutMs: ", p), err)
		}
	}
	return err
}

func (p *TaskDefinition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TaskDefinition(%+v)", *p)
}

// Attributes:
//  - Tasks
//  - DEPRECATEDJobType
//  - DefaultTaskTimeoutMs
//  - Priority
//  - Tag
//  - Basis
//  - Requestor
//  - JobType
type JobDefinition struct {
	Tasks                []*TaskDefinition `thrift:"tasks,1,required" db:"tasks" json:"tasks"`
	DEPRECATEDJobType    *JobType          `thrift:"DEPRECATED_jobType,2" db:"DEPRECATED_jobType" json:"DEPRECATED_jobType,omitempty"`
	DefaultTaskTimeoutMs *int32            `thrift:"defaultTaskTimeoutMs,3" db:"defaultTaskTimeoutMs" json:"defaultTaskTimeoutMs,omitempty"`
	Priority             *int32            `thrift:"priority,4" db:"priority" json:"priority,omitempty"`
	Tag                  *string           `thrift:"tag,5" db:"tag" json:"tag,omitempty"`
	Basis                *string           `thrift:"basis,6" db:"basis" json:"basis,omitempty"`
	Requestor            *string           `thrift:"requestor,7" db:"requestor" json:"requestor,omitempty"`
	JobType              *string           `thrift:"jobType,8" db:"jobType" json:"jobType,omitempty"`
}

func NewJobDefinition() *JobDefinition {
	return &JobDefinition{}
}

func (p *JobDefinition) GetTasks() []*TaskDefinition {
	return p.Tasks
}

var JobDefinition_DEPRECATEDJobType_DEFAULT JobType

func (p *JobDefinition) GetDEPRECATEDJobType() JobType {
	if !p.IsSetDEPRECATEDJobType() {
		return JobDefinition_DEPRECATEDJobType_DEFAULT
	}
	return *p.DEPRECATEDJobType
}

var JobDefinition_DefaultTaskTimeoutMs_DEFAULT int32

func (p *JobDefinition) GetDefaultTaskTimeoutMs() int32 {
	if !p.IsSetDefaultTaskTimeoutMs() {
		return JobDefinition_DefaultTaskTimeoutMs_DEFAULT
	}
	return *p.DefaultTaskTimeoutMs
}

var JobDefinition_Priority_DEFAULT int32

func (p *JobDefinition) GetPriority() int32 {
	if !p.IsSetPriority() {
		return JobDefinition_Priority_DEFAULT
	}
	return *p.Priority
}

var JobDefinition_Tag_DEFAULT string

func (p *JobDefinition) GetTag() string {
	if !p.IsSetTag() {
		return JobDefinition_Tag_DEFAULT
	}
	return *p.Tag
}

var JobDefinition_Basis_DEFAULT string

func (p *JobDefinition) GetBasis() string {
	if !p.IsSetBasis() {
		return JobDefinition_Basis_DEFAULT
	}
	return *p.Basis
}

var JobDefinition_Requestor_DEFAULT string

func (p *JobDefinition) GetRequestor() string {
	if !p.IsSetRequestor() {
		return JobDefinition_Requestor_DEFAULT
	}
	return *p.Requestor
}

var JobDefinition_JobType_DEFAULT string

func (p *JobDefinition) GetJobType() string {
	if !p.IsSetJobType() {
		return JobDefinition_JobType_DEFAULT
	}
	return *p.JobType
}
func (p *JobDefinition) IsSetDEPRECATEDJobType() bool {
	return p.DEPRECATEDJobType != nil
}

func (p *JobDefinition) IsSetDefaultTaskTimeoutMs() bool {
	return p.DefaultTaskTimeoutMs != nil
}

func (p *JobDefinition) IsSetPriority() bool {
	return p.Priority != nil
}

func (p *JobDefinition) IsSetTag() bool {
	return p.Tag != nil
}

func (p *JobDefinition) IsSetBasis() bool {
	return p.Basis != nil
}

func (p *JobDefinition) IsSetRequestor() bool {
	return p.Requestor != nil
}

func (p *JobDefinition) IsSetJobType() bool {
	return p.JobType != nil
}

func (p *JobDefinition) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetTasks bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetTasks = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetTasks {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tasks is not set"))
	}
	return nil
}

func (p *JobDefinition) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TaskDefinition, 0, size)
	p.Tasks = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &TaskDefinition{}
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.Tasks = append(p.Tasks, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *JobDefinition) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := JobType(v)
		p.DEPRECATEDJobType = &temp
	}
	return nil
}

func (p *JobDefinition) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DefaultTaskTimeoutMs = &v
	}
	return nil
}

func (p *JobDefinition) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Priority = &v
	}
	return nil
}

func (p *JobDefinition) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Tag = &v
	}
	return nil
}

func (p *JobDefinition) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Basis = &v
	}
	return nil
}

func (p *JobDefinition) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Requestor = &v
	}
	return nil
}

func (p *JobDefinition) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.JobType = &v
	}
	return nil
}

func (p *JobDefinition) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("JobDefinition"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JobDefinition) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tasks", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tasks: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tasks)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Tasks {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tasks: ", p), err)
	}
	return err
}

func (p *JobDefinition) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDEPRECATEDJobType() {
		if err := oprot.WriteFieldBegin("DEPRECATED_jobType", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:DEPRECATED_jobType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.DEPRECATEDJobType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.DEPRECATED_jobType (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:DEPRECATED_jobType: ", p), err)
		}
	}
	return err
}

func (p *JobDefinition) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultTaskTimeoutMs() {
		if err := oprot.WriteFieldBegin("defaultTaskTimeoutMs", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:defaultTaskTimeoutMs: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.DefaultTaskTimeoutMs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.defaultTaskTimeoutMs (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:defaultTaskTimeoutMs: ", p), err)
		}
	}
	return err
}

func (p *JobDefinition) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPriority() {
		if err := oprot.WriteFieldBegin("priority", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:priority: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Priority)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.priority (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:priority: ", p), err)
		}
	}
	return err
}

func (p *JobDefinition) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTag() {
		if err := oprot.WriteFieldBegin("tag", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tag: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Tag)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tag (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tag: ", p), err)
		}
	}
	return err
}

func (p *JobDefinition) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetBasis() {
		if err := oprot.WriteFieldBegin("basis", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:basis: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Basis)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.basis (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:basis: ", p), err)
		}
	}
	return err
}

func (p *JobDefinition) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestor() {
		if err := oprot.WriteFieldBegin("requestor", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:requestor: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Requestor)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requestor (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:requestor: ", p), err)
		}
	}
	return err
}

func (p *JobDefinition) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetJobType() {
		if err := oprot.WriteFieldBegin("jobType", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:jobType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.JobType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.jobType (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:jobType: ", p), err)
		}
	}
	return err
}

func (p *JobDefinition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JobDefinition(%+v)", *p)
}

// Attributes:
//  - ID
type JobId struct {
	ID string `thrift:"id,1,required" db:"id" json:"id"`
}

func NewJobId() *JobId {
	return &JobId{}
}

func (p *JobId) GetID() string {
	return p.ID
}
func (p *JobId) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetID = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	return nil
}

func (p *JobId) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *JobId) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("JobId"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JobId) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *JobId) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JobId(%+v)", *p)
}

// Attributes:
//  - ID
//  - Status
//  - TaskStatus
//  - TaskData
type JobStatus struct {
	ID         string                `thrift:"id,1,required" db:"id" json:"id"`
	Status     Status                `thrift:"status,2,required" db:"status" json:"status"`
	TaskStatus map[string]Status     `thrift:"taskStatus,3" db:"taskStatus" json:"taskStatus,omitempty"`
	TaskData   map[string]*RunStatus `thrift:"taskData,4" db:"taskData" json:"taskData,omitempty"`
}

func NewJobStatus() *JobStatus {
	return &JobStatus{}
}

func (p *JobStatus) GetID() string {
	return p.ID
}

func (p *JobStatus) GetStatus() Status {
	return p.Status
}

var JobStatus_TaskStatus_DEFAULT map[string]Status

func (p *JobStatus) GetTaskStatus() map[string]Status {
	return p.TaskStatus
}

var JobStatus_TaskData_DEFAULT map[string]*RunStatus

func (p *JobStatus) GetTaskData() map[string]*RunStatus {
	return p.TaskData
}
func (p *JobStatus) IsSetTaskStatus() bool {
	return p.TaskStatus != nil
}

func (p *JobStatus) IsSetTaskData() bool {
	return p.TaskData != nil
}

func (p *JobStatus) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetID = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *JobStatus) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *JobStatus) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Status(v)
		p.Status = temp
	}
	return nil
}

func (p *JobStatus) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Status, size)
	p.TaskStatus = tMap
	for i := 0; i < size; i++ {
		var _key4 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key4 = v
		}
		var _val5 Status
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Status(v)
			_val5 = temp
		}
		p.TaskStatus[_key4] = _val5
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *JobStatus) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*RunStatus, size)
	p.TaskData = tMap
	for i := 0; i < size; i++ {
		var _key6 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key6 = v
		}
		_val7 := &RunStatus{}
		if err := _val7.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val7), err)
		}
		p.TaskData[_key6] = _val7
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *JobStatus) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("JobStatus"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JobStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *JobStatus) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err)
	}
	return err
}

func (p *JobStatus) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaskStatus() {
		if err := oprot.WriteFieldBegin("taskStatus", thrift.MAP, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:taskStatus: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.TaskStatus)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.TaskStatus {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:taskStatus: ", p), err)
		}
	}
	return err
}

func (p *JobStatus) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaskData() {
		if err := oprot.WriteFieldBegin("taskData", thrift.MAP, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:taskData: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.TaskData)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.TaskData {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:taskData: ", p), err)
		}
	}
	return err
}

func (p *JobStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JobStatus(%+v)", *p)
}

// Attributes:
//  - ID
//  - Requestor
type OfflineWorkerReq struct {
	ID        string `thrift:"id,1,required" db:"id" json:"id"`
	Requestor string `thrift:"requestor,2,required" db:"requestor" json:"requestor"`
}

func NewOfflineWorkerReq() *OfflineWorkerReq {
	return &OfflineWorkerReq{}
}

func (p *OfflineWorkerReq) GetID() string {
	return p.ID
}

func (p *OfflineWorkerReq) GetRequestor() string {
	return p.Requestor
}
func (p *OfflineWorkerReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetRequestor bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetID = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetRequestor = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetRequestor {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Requestor is not set"))
	}
	return nil
}

func (p *OfflineWorkerReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *OfflineWorkerReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Requestor = v
	}
	return nil
}

func (p *OfflineWorkerReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OfflineWorkerReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OfflineWorkerReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *OfflineWorkerReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestor", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestor: ", p), err)
	}
	if err := oprot.WriteString(string(p.Requestor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestor (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestor: ", p), err)
	}
	return err
}

func (p *OfflineWorkerReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OfflineWorkerReq(%+v)", *p)
}

// Attributes:
//  - ID
//  - Requestor
type ReinstateWorkerReq struct {
	ID        string `thrift:"id,1,required" db:"id" json:"id"`
	Requestor string `thrift:"requestor,2,required" db:"requestor" json:"requestor"`
}

func NewReinstateWorkerReq() *ReinstateWorkerReq {
	return &ReinstateWorkerReq{}
}

func (p *ReinstateWorkerReq) GetID() string {
	return p.ID
}

func (p *ReinstateWorkerReq) GetRequestor() string {
	return p.Requestor
}
func (p *ReinstateWorkerReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetRequestor bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetID = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetRequestor = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetRequestor {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Requestor is not set"))
	}
	return nil
}

func (p *ReinstateWorkerReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ReinstateWorkerReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Requestor = v
	}
	return nil
}

func (p *ReinstateWorkerReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReinstateWorkerReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReinstateWorkerReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *ReinstateWorkerReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestor", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestor: ", p), err)
	}
	if err := oprot.WriteString(string(p.Requestor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestor (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestor: ", p), err)
	}
	return err
}

func (p *ReinstateWorkerReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReinstateWorkerReq(%+v)", *p)
}

// Attributes:
//  - CurrentTasks
//  - MaxTasks
type SchedulerStatus struct {
	CurrentTasks int32 `thrift:"currentTasks,1,required" db:"currentTasks" json:"currentTasks"`
	MaxTasks     int32 `thrift:"maxTasks,2,required" db:"maxTasks" json:"maxTasks"`
}

func NewSchedulerStatus() *SchedulerStatus {
	return &SchedulerStatus{}
}

func (p *SchedulerStatus) GetCurrentTasks() int32 {
	return p.CurrentTasks
}

func (p *SchedulerStatus) GetMaxTasks() int32 {
	return p.MaxTasks
}
func (p *SchedulerStatus) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetCurrentTasks bool = false
	var issetMaxTasks bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetCurrentTasks = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetMaxTasks = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetCurrentTasks {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CurrentTasks is not set"))
	}
	if !issetMaxTasks {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MaxTasks is not set"))
	}
	return nil
}

func (p *SchedulerStatus) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.CurrentTasks = v
	}
	return nil
}

func (p *SchedulerStatus) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MaxTasks = v
	}
	return nil
}

func (p *SchedulerStatus) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SchedulerStatus"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SchedulerStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currentTasks", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:currentTasks: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CurrentTasks)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.currentTasks (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:currentTasks: ", p), err)
	}
	return err
}

func (p *SchedulerStatus) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxTasks", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:maxTasks: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MaxTasks)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxTasks (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:maxTasks: ", p), err)
	}
	return err
}

func (p *SchedulerStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SchedulerStatus(%+v)", *p)
}

type CloudScoot interface {
	// Parameters:
	//  - Job
	RunJob(ctx context.Context, job *JobDefinition) (r *JobId, err error)
	// Parameters:
	//  - JobId
	GetStatus(ctx context.Context, jobId string) (r *JobStatus, err error)
	// Parameters:
	//  - JobId
	KillJob(ctx context.Context, jobId string) (r *JobStatus, err error)
	// Parameters:
	//  - Req
	OfflineWorker(ctx context.Context, req *OfflineWorkerReq) (err error)
	// Parameters:
	//  - Req
	ReinstateWorker(ctx context.Context, req *ReinstateWorkerReq) (err error)
	GetSchedulerStatus(ctx context.Context) (r *SchedulerStatus, err error)
	// Parameters:
	//  - MaxTasks
	SetSchedulerStatus(ctx context.Context, maxTasks int32) (err error)
}

type CloudScootClient struct {
	c thrift.TClient
}

func NewCloudScootClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CloudScootClient {
	return &CloudScootClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewCloudScootClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CloudScootClient {
	return &CloudScootClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewCloudScootClient(c thrift.TClient) *CloudScootClient {
	return &CloudScootClient{
		c: c,
	}
}

func (p *CloudScootClient) Client_() thrift.TClient {
	return p.c
}

// Parameters:
//  - Job
func (p *CloudScootClient) RunJob(ctx context.Context, job *JobDefinition) (r *JobId, err error) {
	var _args8 CloudScootRunJobArgs
	_args8.Job = job
	var _result9 CloudScootRunJobResult
	if err = p.Client_().Call(ctx, "RunJob", &_args8, &_result9); err != nil {
		return
	}
	switch {
	case _result9.Ir != nil:
		return r, _result9.Ir
	case _result9.Cnsn != nil:
		return r, _result9.Cnsn
	}

	return _result9.GetSuccess(), nil
}

// Parameters:
//  - JobId
func (p *CloudScootClient) GetStatus(ctx context.Context, jobId string) (r *JobStatus, err error) {
	var _args10 CloudScootGetStatusArgs
	_args10.JobId = jobId
	var _result11 CloudScootGetStatusResult
	if err = p.Client_().Call(ctx, "GetStatus", &_args10, &_result11); err != nil {
		return
	}
	switch {
	case _result11.Ir != nil:
		return r, _result11.Ir
	case _result11.Err != nil:
		return r, _result11.Err
	}

	return _result11.GetSuccess(), nil
}

// Parameters:
//  - JobId
func (p *CloudScootClient) KillJob(ctx context.Context, jobId string) (r *JobStatus, err error) {
	var _args12 CloudScootKillJobArgs
	_args12.JobId = jobId
	var _result13 CloudScootKillJobResult
	if err = p.Client_().Call(ctx, "KillJob", &_args12, &_result13); err != nil {
		return
	}
	switch {
	case _result13.Ir != nil:
		return r, _result13.Ir
	case _result13.Err != nil:
		return r, _result13.Err
	}

	return _result13.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *CloudScootClient) OfflineWorker(ctx context.Context, req *OfflineWorkerReq) (err error) {
	var _args14 CloudScootOfflineWorkerArgs
	_args14.Req = req
	var _result15 CloudScootOfflineWorkerResult
	if err = p.Client_().Call(ctx, "OfflineWorker", &_args14, &_result15); err != nil {
		return
	}
	switch {
	case _result15.Ir != nil:
		return _result15.Ir
	case _result15.Err != nil:
		return _result15.Err
	}

	return nil
}

// Parameters:
//  - Req
func (p *CloudScootClient) ReinstateWorker(ctx context.Context, req *ReinstateWorkerReq) (err error) {
	var _args16 CloudScootReinstateWorkerArgs
	_args16.Req = req
	var _result17 CloudScootReinstateWorkerResult
	if err = p.Client_().Call(ctx, "ReinstateWorker", &_args16, &_result17); err != nil {
		return
	}
	switch {
	case _result17.Ir != nil:
		return _result17.Ir
	case _result17.Err != nil:
		return _result17.Err
	}

	return nil
}

func (p *CloudScootClient) GetSchedulerStatus(ctx context.Context) (r *SchedulerStatus, err error) {
	var _args18 CloudScootGetSchedulerStatusArgs
	var _result19 CloudScootGetSchedulerStatusResult
	if err = p.Client_().Call(ctx, "GetSchedulerStatus", &_args18, &_result19); err != nil {
		return
	}
	switch {
	case _result19.Err != nil:
		return r, _result19.Err
	}

	return _result19.GetSuccess(), nil
}

// Parameters:
//  - MaxTasks
func (p *CloudScootClient) SetSchedulerStatus(ctx context.Context, maxTasks int32) (err error) {
	var _args20 CloudScootSetSchedulerStatusArgs
	_args20.MaxTasks = maxTasks
	var _result21 CloudScootSetSchedulerStatusResult
	if err = p.Client_().Call(ctx, "SetSchedulerStatus", &_args20, &_result21); err != nil {
		return
	}
	switch {
	case _result21.Ir != nil:
		return _result21.Ir
	case _result21.Err != nil:
		return _result21.Err
	}

	return nil
}

type CloudScootProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      CloudScoot
}

func (p *CloudScootProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *CloudScootProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *CloudScootProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewCloudScootProcessor(handler CloudScoot) *CloudScootProcessor {

	self22 := &CloudScootProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self22.processorMap["RunJob"] = &cloudScootProcessorRunJob{handler: handler}
	self22.processorMap["GetStatus"] = &cloudScootProcessorGetStatus{handler: handler}
	self22.processorMap["KillJob"] = &cloudScootProcessorKillJob{handler: handler}
	self22.processorMap["OfflineWorker"] = &cloudScootProcessorOfflineWorker{handler: handler}
	self22.processorMap["ReinstateWorker"] = &cloudScootProcessorReinstateWorker{handler: handler}
	self22.processorMap["GetSchedulerStatus"] = &cloudScootProcessorGetSchedulerStatus{handler: handler}
	self22.processorMap["SetSchedulerStatus"] = &cloudScootProcessorSetSchedulerStatus{handler: handler}
	return self22
}

func (p *CloudScootProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x23 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x23.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x23

}

type cloudScootProcessorRunJob struct {
	handler CloudScoot
}

func (p *cloudScootProcessorRunJob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CloudScootRunJobArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RunJob", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CloudScootRunJobResult{}
	var retval *JobId
	var err2 error
	if retval, err2 = p.handler.RunJob(ctx, args.Job); err2 != nil {
		switch v := err2.(type) {
		case *InvalidRequest:
			result.Ir = v
		case *CanNotScheduleNow:
			result.Cnsn = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RunJob: "+err2.Error())
			oprot.WriteMessageBegin("RunJob", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RunJob", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cloudScootProcessorGetStatus struct {
	handler CloudScoot
}

func (p *cloudScootProcessorGetStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CloudScootGetStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CloudScootGetStatusResult{}
	var retval *JobStatus
	var err2 error
	if retval, err2 = p.handler.GetStatus(ctx, args.JobId); err2 != nil {
		switch v := err2.(type) {
		case *InvalidRequest:
			result.Ir = v
		case *ScootServerError:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetStatus: "+err2.Error())
			oprot.WriteMessageBegin("GetStatus", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cloudScootProcessorKillJob struct {
	handler CloudScoot
}

func (p *cloudScootProcessorKillJob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CloudScootKillJobArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("KillJob", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CloudScootKillJobResult{}
	var retval *JobStatus
	var err2 error
	if retval, err2 = p.handler.KillJob(ctx, args.JobId); err2 != nil {
		switch v := err2.(type) {
		case *InvalidRequest:
			result.Ir = v
		case *ScootServerError:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing KillJob: "+err2.Error())
			oprot.WriteMessageBegin("KillJob", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("KillJob", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cloudScootProcessorOfflineWorker struct {
	handler CloudScoot
}

func (p *cloudScootProcessorOfflineWorker) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CloudScootOfflineWorkerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("OfflineWorker", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CloudScootOfflineWorkerResult{}
	var err2 error
	if err2 = p.handler.OfflineWorker(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *InvalidRequest:
			result.Ir = v
		case *ScootServerError:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OfflineWorker: "+err2.Error())
			oprot.WriteMessageBegin("OfflineWorker", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("OfflineWorker", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cloudScootProcessorReinstateWorker struct {
	handler CloudScoot
}

func (p *cloudScootProcessorReinstateWorker) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CloudScootReinstateWorkerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ReinstateWorker", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CloudScootReinstateWorkerResult{}
	var err2 error
	if err2 = p.handler.ReinstateWorker(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *InvalidRequest:
			result.Ir = v
		case *ScootServerError:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReinstateWorker: "+err2.Error())
			oprot.WriteMessageBegin("ReinstateWorker", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("ReinstateWorker", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cloudScootProcessorGetSchedulerStatus struct {
	handler CloudScoot
}

func (p *cloudScootProcessorGetSchedulerStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CloudScootGetSchedulerStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSchedulerStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CloudScootGetSchedulerStatusResult{}
	var retval *SchedulerStatus
	var err2 error
	if retval, err2 = p.handler.GetSchedulerStatus(ctx); err2 != nil {
		switch v := err2.(type) {
		case *ScootServerError:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSchedulerStatus: "+err2.Error())
			oprot.WriteMessageBegin("GetSchedulerStatus", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetSchedulerStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type cloudScootProcessorSetSchedulerStatus struct {
	handler CloudScoot
}

func (p *cloudScootProcessorSetSchedulerStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CloudScootSetSchedulerStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SetSchedulerStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CloudScootSetSchedulerStatusResult{}
	var err2 error
	if err2 = p.handler.SetSchedulerStatus(ctx, args.MaxTasks); err2 != nil {
		switch v := err2.(type) {
		case *InvalidRequest:
			result.Ir = v
		case *ScootServerError:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetSchedulerStatus: "+err2.Error())
			oprot.WriteMessageBegin("SetSchedulerStatus", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("SetSchedulerStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Job
type CloudScootRunJobArgs struct {
	Job *JobDefinition `thrift:"job,1" db:"job" json:"job"`
}

func NewCloudScootRunJobArgs() *CloudScootRunJobArgs {
	return &CloudScootRunJobArgs{}
}

var CloudScootRunJobArgs_Job_DEFAULT *JobDefinition

func (p *CloudScootRunJobArgs) GetJob() *JobDefinition {
	if !p.IsSetJob() {
		return CloudScootRunJobArgs_Job_DEFAULT
	}
	return p.Job
}
func (p *CloudScootRunJobArgs) IsSetJob() bool {
	return p.Job != nil
}

func (p *CloudScootRunJobArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CloudScootRunJobArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Job = &JobDefinition{}
	if err := p.Job.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Job), err)
	}
	return nil
}

func (p *CloudScootRunJobArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RunJob_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CloudScootRunJobArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("job", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:job: ", p), err)
	}
	if err := p.Job.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Job), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:job: ", p), err)
	}
	return err
}

func (p *CloudScootRunJobArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloudScootRunJobArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ir
//  - Cnsn
type CloudScootRunJobResult struct {
	Success *JobId             `thrift:"success,0" db:"success" json:"success,omitempty"`
	Ir      *InvalidRequest    `thrift:"ir,1" db:"ir" json:"ir,omitempty"`
	Cnsn    *CanNotScheduleNow `thrift:"cnsn,2" db:"cnsn" json:"cnsn,omitempty"`
}

func NewCloudScootRunJobResult() *CloudScootRunJobResult {
	return &CloudScootRunJobResult{}
}

var CloudScootRunJobResult_Success_DEFAULT *JobId

func (p *CloudScootRunJobResult) GetSuccess() *JobId {
	if !p.IsSetSuccess() {
		return CloudScootRunJobResult_Success_DEFAULT
	}
	return p.Success
}

var CloudScootRunJobResult_Ir_DEFAULT *InvalidRequest

func (p *CloudScootRunJobResult) GetIr() *InvalidRequest {
	if !p.IsSetIr() {
		return CloudScootRunJobResult_Ir_DEFAULT
	}
	return p.Ir
}

var CloudScootRunJobResult_Cnsn_DEFAULT *CanNotScheduleNow

func (p *CloudScootRunJobResult) GetCnsn() *CanNotScheduleNow {
	if !p.IsSetCnsn() {
		return CloudScootRunJobResult_Cnsn_DEFAULT
	}
	return p.Cnsn
}
func (p *CloudScootRunJobResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CloudScootRunJobResult) IsSetIr() bool {
	return p.Ir != nil
}

func (p *CloudScootRunJobResult) IsSetCnsn() bool {
	return p.Cnsn != nil
}

func (p *CloudScootRunJobResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CloudScootRunJobResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &JobId{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *CloudScootRunJobResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ir = &InvalidRequest{}
	if err := p.Ir.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ir), err)
	}
	return nil
}

func (p *CloudScootRunJobResult) ReadField2(iprot thrift.TProtocol) error {
	p.Cnsn = &CanNotScheduleNow{}
	if err := p.Cnsn.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Cnsn), err)
	}
	return nil
}

func (p *CloudScootRunJobResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RunJob_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CloudScootRunJobResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *CloudScootRunJobResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIr() {
		if err := oprot.WriteFieldBegin("ir", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ir: ", p), err)
		}
		if err := p.Ir.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ir), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ir: ", p), err)
		}
	}
	return err
}

func (p *CloudScootRunJobResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCnsn() {
		if err := oprot.WriteFieldBegin("cnsn", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cnsn: ", p), err)
		}
		if err := p.Cnsn.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Cnsn), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cnsn: ", p), err)
		}
	}
	return err
}

func (p *CloudScootRunJobResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloudScootRunJobResult(%+v)", *p)
}

// Attributes:
//  - JobId
type CloudScootGetStatusArgs struct {
	JobId string `thrift:"jobId,1" db:"jobId" json:"jobId"`
}

func NewCloudScootGetStatusArgs() *CloudScootGetStatusArgs {
	return &CloudScootGetStatusArgs{}
}

func (p *CloudScootGetStatusArgs) GetJobId() string {
	return p.JobId
}
func (p *CloudScootGetStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CloudScootGetStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.JobId = v
	}
	return nil
}

func (p *CloudScootGetStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetStatus_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CloudScootGetStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("jobId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:jobId: ", p), err)
	}
	if err := oprot.WriteString(string(p.JobId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.jobId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:jobId: ", p), err)
	}
	return err
}

func (p *CloudScootGetStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloudScootGetStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ir
//  - Err
type CloudScootGetStatusResult struct {
	Success *JobStatus        `thrift:"success,0" db:"success" json:"success,omitempty"`
	Ir      *InvalidRequest   `thrift:"ir,1" db:"ir" json:"ir,omitempty"`
	Err     *ScootServerError `thrift:"err,2" db:"err" json:"err,omitempty"`
}

func NewCloudScootGetStatusResult() *CloudScootGetStatusResult {
	return &CloudScootGetStatusResult{}
}

var CloudScootGetStatusResult_Success_DEFAULT *JobStatus

func (p *CloudScootGetStatusResult) GetSuccess() *JobStatus {
	if !p.IsSetSuccess() {
		return CloudScootGetStatusResult_Success_DEFAULT
	}
	return p.Success
}

var CloudScootGetStatusResult_Ir_DEFAULT *InvalidRequest

func (p *CloudScootGetStatusResult) GetIr() *InvalidRequest {
	if !p.IsSetIr() {
		return CloudScootGetStatusResult_Ir_DEFAULT
	}
	return p.Ir
}

var CloudScootGetStatusResult_Err_DEFAULT *ScootServerError

func (p *CloudScootGetStatusResult) GetErr() *ScootServerError {
	if !p.IsSetErr() {
		return CloudScootGetStatusResult_Err_DEFAULT
	}
	return p.Err
}
func (p *CloudScootGetStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CloudScootGetStatusResult) IsSetIr() bool {
	return p.Ir != nil
}

func (p *CloudScootGetStatusResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *CloudScootGetStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CloudScootGetStatusResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &JobStatus{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *CloudScootGetStatusResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ir = &InvalidRequest{}
	if err := p.Ir.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ir), err)
	}
	return nil
}

func (p *CloudScootGetStatusResult) ReadField2(iprot thrift.TProtocol) error {
	p.Err = &ScootServerError{}
	if err := p.Err.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
	}
	return nil
}

func (p *CloudScootGetStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetStatus_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CloudScootGetStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *CloudScootGetStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIr() {
		if err := oprot.WriteFieldBegin("ir", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ir: ", p), err)
		}
		if err := p.Ir.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ir), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ir: ", p), err)
		}
	}
	return err
}

func (p *CloudScootGetStatusResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:err: ", p), err)
		}
		if err := p.Err.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:err: ", p), err)
		}
	}
	return err
}

func (p *CloudScootGetStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloudScootGetStatusResult(%+v)", *p)
}

// Attributes:
//  - JobId
type CloudScootKillJobArgs struct {
	JobId string `thrift:"jobId,1" db:"jobId" json:"jobId"`
}

func NewCloudScootKillJobArgs() *CloudScootKillJobArgs {
	return &CloudScootKillJobArgs{}
}

func (p *CloudScootKillJobArgs) GetJobId() string {
	return p.JobId
}
func (p *CloudScootKillJobArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CloudScootKillJobArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.JobId = v
	}
	return nil
}

func (p *CloudScootKillJobArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("KillJob_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CloudScootKillJobArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("jobId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:jobId: ", p), err)
	}
	if err := oprot.WriteString(string(p.JobId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.jobId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:jobId: ", p), err)
	}
	return err
}

func (p *CloudScootKillJobArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloudScootKillJobArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ir
//  - Err
type CloudScootKillJobResult struct {
	Success *JobStatus        `thrift:"success,0" db:"success" json:"success,omitempty"`
	Ir      *InvalidRequest   `thrift:"ir,1" db:"ir" json:"ir,omitempty"`
	Err     *ScootServerError `thrift:"err,2" db:"err" json:"err,omitempty"`
}

func NewCloudScootKillJobResult() *CloudScootKillJobResult {
	return &CloudScootKillJobResult{}
}

var CloudScootKillJobResult_Success_DEFAULT *JobStatus

func (p *CloudScootKillJobResult) GetSuccess() *JobStatus {
	if !p.IsSetSuccess() {
		return CloudScootKillJobResult_Success_DEFAULT
	}
	return p.Success
}

var CloudScootKillJobResult_Ir_DEFAULT *InvalidRequest

func (p *CloudScootKillJobResult) GetIr() *InvalidRequest {
	if !p.IsSetIr() {
		return CloudScootKillJobResult_Ir_DEFAULT
	}
	return p.Ir
}

var CloudScootKillJobResult_Err_DEFAULT *ScootServerError

func (p *CloudScootKillJobResult) GetErr() *ScootServerError {
	if !p.IsSetErr() {
		return CloudScootKillJobResult_Err_DEFAULT
	}
	return p.Err
}
func (p *CloudScootKillJobResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CloudScootKillJobResult) IsSetIr() bool {
	return p.Ir != nil
}

func (p *CloudScootKillJobResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *CloudScootKillJobResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CloudScootKillJobResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &JobStatus{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *CloudScootKillJobResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ir = &InvalidRequest{}
	if err := p.Ir.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ir), err)
	}
	return nil
}

func (p *CloudScootKillJobResult) ReadField2(iprot thrift.TProtocol) error {
	p.Err = &ScootServerError{}
	if err := p.Err.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
	}
	return nil
}

func (p *CloudScootKillJobResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("KillJob_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CloudScootKillJobResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *CloudScootKillJobResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIr() {
		if err := oprot.WriteFieldBegin("ir", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ir: ", p), err)
		}
		if err := p.Ir.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ir), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ir: ", p), err)
		}
	}
	return err
}

func (p *CloudScootKillJobResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:err: ", p), err)
		}
		if err := p.Err.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:err: ", p), err)
		}
	}
	return err
}

func (p *CloudScootKillJobResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloudScootKillJobResult(%+v)", *p)
}

// Attributes:
//  - Req
type CloudScootOfflineWorkerArgs struct {
	Req *OfflineWorkerReq `thrift:"req,1" db:"req" json:"req"`
}

func NewCloudScootOfflineWorkerArgs() *CloudScootOfflineWorkerArgs {
	return &CloudScootOfflineWorkerArgs{}
}

var CloudScootOfflineWorkerArgs_Req_DEFAULT *OfflineWorkerReq

func (p *CloudScootOfflineWorkerArgs) GetReq() *OfflineWorkerReq {
	if !p.IsSetReq() {
		return CloudScootOfflineWorkerArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CloudScootOfflineWorkerArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CloudScootOfflineWorkerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CloudScootOfflineWorkerArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &OfflineWorkerReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *CloudScootOfflineWorkerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OfflineWorker_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CloudScootOfflineWorkerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *CloudScootOfflineWorkerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloudScootOfflineWorkerArgs(%+v)", *p)
}

// Attributes:
//  - Ir
//  - Err
type CloudScootOfflineWorkerResult struct {
	Ir  *InvalidRequest   `thrift:"ir,1" db:"ir" json:"ir,omitempty"`
	Err *ScootServerError `thrift:"err,2" db:"err" json:"err,omitempty"`
}

func NewCloudScootOfflineWorkerResult() *CloudScootOfflineWorkerResult {
	return &CloudScootOfflineWorkerResult{}
}

var CloudScootOfflineWorkerResult_Ir_DEFAULT *InvalidRequest

func (p *CloudScootOfflineWorkerResult) GetIr() *InvalidRequest {
	if !p.IsSetIr() {
		return CloudScootOfflineWorkerResult_Ir_DEFAULT
	}
	return p.Ir
}

var CloudScootOfflineWorkerResult_Err_DEFAULT *ScootServerError

func (p *CloudScootOfflineWorkerResult) GetErr() *ScootServerError {
	if !p.IsSetErr() {
		return CloudScootOfflineWorkerResult_Err_DEFAULT
	}
	return p.Err
}
func (p *CloudScootOfflineWorkerResult) IsSetIr() bool {
	return p.Ir != nil
}

func (p *CloudScootOfflineWorkerResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *CloudScootOfflineWorkerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CloudScootOfflineWorkerResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ir = &InvalidRequest{}
	if err := p.Ir.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ir), err)
	}
	return nil
}

func (p *CloudScootOfflineWorkerResult) ReadField2(iprot thrift.TProtocol) error {
	p.Err = &ScootServerError{}
	if err := p.Err.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
	}
	return nil
}

func (p *CloudScootOfflineWorkerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OfflineWorker_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CloudScootOfflineWorkerResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIr() {
		if err := oprot.WriteFieldBegin("ir", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ir: ", p), err)
		}
		if err := p.Ir.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ir), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ir: ", p), err)
		}
	}
	return err
}

func (p *CloudScootOfflineWorkerResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:err: ", p), err)
		}
		if err := p.Err.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:err: ", p), err)
		}
	}
	return err
}

func (p *CloudScootOfflineWorkerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloudScootOfflineWorkerResult(%+v)", *p)
}

// Attributes:
//  - Req
type CloudScootReinstateWorkerArgs struct {
	Req *ReinstateWorkerReq `thrift:"req,1" db:"req" json:"req"`
}

func NewCloudScootReinstateWorkerArgs() *CloudScootReinstateWorkerArgs {
	return &CloudScootReinstateWorkerArgs{}
}

var CloudScootReinstateWorkerArgs_Req_DEFAULT *ReinstateWorkerReq

func (p *CloudScootReinstateWorkerArgs) GetReq() *ReinstateWorkerReq {
	if !p.IsSetReq() {
		return CloudScootReinstateWorkerArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CloudScootReinstateWorkerArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CloudScootReinstateWorkerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CloudScootReinstateWorkerArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &ReinstateWorkerReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *CloudScootReinstateWorkerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReinstateWorker_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CloudScootReinstateWorkerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *CloudScootReinstateWorkerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloudScootReinstateWorkerArgs(%+v)", *p)
}

// Attributes:
//  - Ir
//  - Err
type CloudScootReinstateWorkerResult struct {
	Ir  *InvalidRequest   `thrift:"ir,1" db:"ir" json:"ir,omitempty"`
	Err *ScootServerError `thrift:"err,2" db:"err" json:"err,omitempty"`
}

func NewCloudScootReinstateWorkerResult() *CloudScootReinstateWorkerResult {
	return &CloudScootReinstateWorkerResult{}
}

var CloudScootReinstateWorkerResult_Ir_DEFAULT *InvalidRequest

func (p *CloudScootReinstateWorkerResult) GetIr() *InvalidRequest {
	if !p.IsSetIr() {
		return CloudScootReinstateWorkerResult_Ir_DEFAULT
	}
	return p.Ir
}

var CloudScootReinstateWorkerResult_Err_DEFAULT *ScootServerError

func (p *CloudScootReinstateWorkerResult) GetErr() *ScootServerError {
	if !p.IsSetErr() {
		return CloudScootReinstateWorkerResult_Err_DEFAULT
	}
	return p.Err
}
func (p *CloudScootReinstateWorkerResult) IsSetIr() bool {
	return p.Ir != nil
}

func (p *CloudScootReinstateWorkerResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *CloudScootReinstateWorkerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CloudScootReinstateWorkerResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ir = &InvalidRequest{}
	if err := p.Ir.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ir), err)
	}
	return nil
}

func (p *CloudScootReinstateWorkerResult) ReadField2(iprot thrift.TProtocol) error {
	p.Err = &ScootServerError{}
	if err := p.Err.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
	}
	return nil
}

func (p *CloudScootReinstateWorkerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReinstateWorker_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CloudScootReinstateWorkerResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIr() {
		if err := oprot.WriteFieldBegin("ir", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ir: ", p), err)
		}
		if err := p.Ir.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ir), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ir: ", p), err)
		}
	}
	return err
}

func (p *CloudScootReinstateWorkerResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:err: ", p), err)
		}
		if err := p.Err.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:err: ", p), err)
		}
	}
	return err
}

func (p *CloudScootReinstateWorkerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloudScootReinstateWorkerResult(%+v)", *p)
}

type CloudScootGetSchedulerStatusArgs struct {
}

func NewCloudScootGetSchedulerStatusArgs() *CloudScootGetSchedulerStatusArgs {
	return &CloudScootGetSchedulerStatusArgs{}
}

func (p *CloudScootGetSchedulerStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CloudScootGetSchedulerStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSchedulerStatus_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CloudScootGetSchedulerStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloudScootGetSchedulerStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Err
type CloudScootGetSchedulerStatusResult struct {
	Success *SchedulerStatus  `thrift:"success,0" db:"success" json:"success,omitempty"`
	Err     *ScootServerError `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewCloudScootGetSchedulerStatusResult() *CloudScootGetSchedulerStatusResult {
	return &CloudScootGetSchedulerStatusResult{}
}

var CloudScootGetSchedulerStatusResult_Success_DEFAULT *SchedulerStatus

func (p *CloudScootGetSchedulerStatusResult) GetSuccess() *SchedulerStatus {
	if !p.IsSetSuccess() {
		return CloudScootGetSchedulerStatusResult_Success_DEFAULT
	}
	return p.Success
}

var CloudScootGetSchedulerStatusResult_Err_DEFAULT *ScootServerError

func (p *CloudScootGetSchedulerStatusResult) GetErr() *ScootServerError {
	if !p.IsSetErr() {
		return CloudScootGetSchedulerStatusResult_Err_DEFAULT
	}
	return p.Err
}
func (p *CloudScootGetSchedulerStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CloudScootGetSchedulerStatusResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *CloudScootGetSchedulerStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CloudScootGetSchedulerStatusResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &SchedulerStatus{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *CloudScootGetSchedulerStatusResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = &ScootServerError{}
	if err := p.Err.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
	}
	return nil
}

func (p *CloudScootGetSchedulerStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetSchedulerStatus_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CloudScootGetSchedulerStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *CloudScootGetSchedulerStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err)
		}
		if err := p.Err.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err)
		}
	}
	return err
}

func (p *CloudScootGetSchedulerStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloudScootGetSchedulerStatusResult(%+v)", *p)
}

// Attributes:
//  - MaxTasks
type CloudScootSetSchedulerStatusArgs struct {
	MaxTasks int32 `thrift:"maxTasks,1" db:"maxTasks" json:"maxTasks"`
}

func NewCloudScootSetSchedulerStatusArgs() *CloudScootSetSchedulerStatusArgs {
	return &CloudScootSetSchedulerStatusArgs{}
}

func (p *CloudScootSetSchedulerStatusArgs) GetMaxTasks() int32 {
	return p.MaxTasks
}
func (p *CloudScootSetSchedulerStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CloudScootSetSchedulerStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MaxTasks = v
	}
	return nil
}

func (p *CloudScootSetSchedulerStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetSchedulerStatus_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CloudScootSetSchedulerStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxTasks", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:maxTasks: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MaxTasks)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxTasks (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:maxTasks: ", p), err)
	}
	return err
}

func (p *CloudScootSetSchedulerStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloudScootSetSchedulerStatusArgs(%+v)", *p)
}

// Attributes:
//  - Ir
//  - Err
type CloudScootSetSchedulerStatusResult struct {
	Ir  *InvalidRequest   `thrift:"ir,1" db:"ir" json:"ir,omitempty"`
	Err *ScootServerError `thrift:"err,2" db:"err" json:"err,omitempty"`
}

func NewCloudScootSetSchedulerStatusResult() *CloudScootSetSchedulerStatusResult {
	return &CloudScootSetSchedulerStatusResult{}
}

var CloudScootSetSchedulerStatusResult_Ir_DEFAULT *InvalidRequest

func (p *CloudScootSetSchedulerStatusResult) GetIr() *InvalidRequest {
	if !p.IsSetIr() {
		return CloudScootSetSchedulerStatusResult_Ir_DEFAULT
	}
	return p.Ir
}

var CloudScootSetSchedulerStatusResult_Err_DEFAULT *ScootServerError

func (p *CloudScootSetSchedulerStatusResult) GetErr() *ScootServerError {
	if !p.IsSetErr() {
		return CloudScootSetSchedulerStatusResult_Err_DEFAULT
	}
	return p.Err
}
func (p *CloudScootSetSchedulerStatusResult) IsSetIr() bool {
	return p.Ir != nil
}

func (p *CloudScootSetSchedulerStatusResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *CloudScootSetSchedulerStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CloudScootSetSchedulerStatusResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ir = &InvalidRequest{}
	if err := p.Ir.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ir), err)
	}
	return nil
}

func (p *CloudScootSetSchedulerStatusResult) ReadField2(iprot thrift.TProtocol) error {
	p.Err = &ScootServerError{}
	if err := p.Err.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
	}
	return nil
}

func (p *CloudScootSetSchedulerStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetSchedulerStatus_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CloudScootSetSchedulerStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIr() {
		if err := oprot.WriteFieldBegin("ir", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ir: ", p), err)
		}
		if err := p.Ir.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ir), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ir: ", p), err)
		}
	}
	return err
}

func (p *CloudScootSetSchedulerStatusResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:err: ", p), err)
		}
		if err := p.Err.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:err: ", p), err)
		}
	}
	return err
}

func (p *CloudScootSetSchedulerStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloudScootSetSchedulerStatusResult(%+v)", *p)
}
