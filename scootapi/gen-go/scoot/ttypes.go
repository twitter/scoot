// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package scoot

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/twitter/scoot/bazel/execution/bazelapi/gen-go/bazel"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = bazel.GoUnusedProtection__
var GoUnusedProtection__ int

type JobType int64

const (
	JobType_UNKNOWN    JobType = 1
	JobType_IRON_TESTS JobType = 2
)

func (p JobType) String() string {
	switch p {
	case JobType_UNKNOWN:
		return "UNKNOWN"
	case JobType_IRON_TESTS:
		return "IRON_TESTS"
	}
	return "<UNSET>"
}

func JobTypeFromString(s string) (JobType, error) {
	switch s {
	case "UNKNOWN":
		return JobType_UNKNOWN, nil
	case "IRON_TESTS":
		return JobType_IRON_TESTS, nil
	}
	return JobType(0), fmt.Errorf("not a valid JobType string")
}

func JobTypePtr(v JobType) *JobType { return &v }

func (p JobType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *JobType) UnmarshalText(text []byte) error {
	q, err := JobTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type RunStatusState int64

const (
	RunStatusState_UNKNOWN    RunStatusState = 0
	RunStatusState_PENDING    RunStatusState = 1
	RunStatusState_RUNNING    RunStatusState = 2
	RunStatusState_COMPLETE   RunStatusState = 3
	RunStatusState_FAILED     RunStatusState = 4
	RunStatusState_ABORTED    RunStatusState = 5
	RunStatusState_TIMEDOUT   RunStatusState = 6
	RunStatusState_BADREQUEST RunStatusState = 7
)

func (p RunStatusState) String() string {
	switch p {
	case RunStatusState_UNKNOWN:
		return "UNKNOWN"
	case RunStatusState_PENDING:
		return "PENDING"
	case RunStatusState_RUNNING:
		return "RUNNING"
	case RunStatusState_COMPLETE:
		return "COMPLETE"
	case RunStatusState_FAILED:
		return "FAILED"
	case RunStatusState_ABORTED:
		return "ABORTED"
	case RunStatusState_TIMEDOUT:
		return "TIMEDOUT"
	case RunStatusState_BADREQUEST:
		return "BADREQUEST"
	}
	return "<UNSET>"
}

func RunStatusStateFromString(s string) (RunStatusState, error) {
	switch s {
	case "UNKNOWN":
		return RunStatusState_UNKNOWN, nil
	case "PENDING":
		return RunStatusState_PENDING, nil
	case "RUNNING":
		return RunStatusState_RUNNING, nil
	case "COMPLETE":
		return RunStatusState_COMPLETE, nil
	case "FAILED":
		return RunStatusState_FAILED, nil
	case "ABORTED":
		return RunStatusState_ABORTED, nil
	case "TIMEDOUT":
		return RunStatusState_TIMEDOUT, nil
	case "BADREQUEST":
		return RunStatusState_BADREQUEST, nil
	}
	return RunStatusState(0), fmt.Errorf("not a valid RunStatusState string")
}

func RunStatusStatePtr(v RunStatusState) *RunStatusState { return &v }

func (p RunStatusState) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *RunStatusState) UnmarshalText(text []byte) error {
	q, err := RunStatusStateFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type Status int64

const (
	Status_NOT_STARTED  Status = 1
	Status_IN_PROGRESS  Status = 2
	Status_COMPLETED    Status = 3
	Status_ROLLING_BACK Status = 4
	Status_ROLLED_BACK  Status = 5
)

func (p Status) String() string {
	switch p {
	case Status_NOT_STARTED:
		return "NOT_STARTED"
	case Status_IN_PROGRESS:
		return "IN_PROGRESS"
	case Status_COMPLETED:
		return "COMPLETED"
	case Status_ROLLING_BACK:
		return "ROLLING_BACK"
	case Status_ROLLED_BACK:
		return "ROLLED_BACK"
	}
	return "<UNSET>"
}

func StatusFromString(s string) (Status, error) {
	switch s {
	case "NOT_STARTED":
		return Status_NOT_STARTED, nil
	case "IN_PROGRESS":
		return Status_IN_PROGRESS, nil
	case "COMPLETED":
		return Status_COMPLETED, nil
	case "ROLLING_BACK":
		return Status_ROLLING_BACK, nil
	case "ROLLED_BACK":
		return Status_ROLLED_BACK, nil
	}
	return Status(0), fmt.Errorf("not a valid Status string")
}

func StatusPtr(v Status) *Status { return &v }

func (p Status) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Status) UnmarshalText(text []byte) error {
	q, err := StatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// Attributes:
//  - Message
type InvalidRequest struct {
	Message *string `thrift:"message,1" json:"message,omitempty"`
}

func NewInvalidRequest() *InvalidRequest {
	return &InvalidRequest{}
}

var InvalidRequest_Message_DEFAULT string

func (p *InvalidRequest) GetMessage() string {
	if !p.IsSetMessage() {
		return InvalidRequest_Message_DEFAULT
	}
	return *p.Message
}
func (p *InvalidRequest) IsSetMessage() bool {
	return p.Message != nil
}

func (p *InvalidRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InvalidRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *InvalidRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InvalidRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InvalidRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
		}
	}
	return err
}

func (p *InvalidRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvalidRequest(%+v)", *p)
}

func (p *InvalidRequest) Error() string {
	return p.String()
}

// Attributes:
//  - RetryAfterMs
type CanNotScheduleNow struct {
	RetryAfterMs *int64 `thrift:"retryAfterMs,1" json:"retryAfterMs,omitempty"`
}

func NewCanNotScheduleNow() *CanNotScheduleNow {
	return &CanNotScheduleNow{}
}

var CanNotScheduleNow_RetryAfterMs_DEFAULT int64

func (p *CanNotScheduleNow) GetRetryAfterMs() int64 {
	if !p.IsSetRetryAfterMs() {
		return CanNotScheduleNow_RetryAfterMs_DEFAULT
	}
	return *p.RetryAfterMs
}
func (p *CanNotScheduleNow) IsSetRetryAfterMs() bool {
	return p.RetryAfterMs != nil
}

func (p *CanNotScheduleNow) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CanNotScheduleNow) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RetryAfterMs = &v
	}
	return nil
}

func (p *CanNotScheduleNow) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CanNotScheduleNow"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CanNotScheduleNow) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRetryAfterMs() {
		if err := oprot.WriteFieldBegin("retryAfterMs", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:retryAfterMs: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RetryAfterMs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.retryAfterMs (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:retryAfterMs: ", p), err)
		}
	}
	return err
}

func (p *CanNotScheduleNow) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CanNotScheduleNow(%+v)", *p)
}

func (p *CanNotScheduleNow) Error() string {
	return p.String()
}

// Attributes:
//  - RetryAfterMs
type ScootServerError struct {
	RetryAfterMs *int64 `thrift:"retryAfterMs,1" json:"retryAfterMs,omitempty"`
}

func NewScootServerError() *ScootServerError {
	return &ScootServerError{}
}

var ScootServerError_RetryAfterMs_DEFAULT int64

func (p *ScootServerError) GetRetryAfterMs() int64 {
	if !p.IsSetRetryAfterMs() {
		return ScootServerError_RetryAfterMs_DEFAULT
	}
	return *p.RetryAfterMs
}
func (p *ScootServerError) IsSetRetryAfterMs() bool {
	return p.RetryAfterMs != nil
}

func (p *ScootServerError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ScootServerError) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RetryAfterMs = &v
	}
	return nil
}

func (p *ScootServerError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ScootServerError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ScootServerError) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRetryAfterMs() {
		if err := oprot.WriteFieldBegin("retryAfterMs", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:retryAfterMs: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RetryAfterMs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.retryAfterMs (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:retryAfterMs: ", p), err)
		}
	}
	return err
}

func (p *ScootServerError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScootServerError(%+v)", *p)
}

func (p *ScootServerError) Error() string {
	return p.String()
}

// Attributes:
//  - Status
//  - RunId
//  - OutUri
//  - ErrUri
//  - Error
//  - ExitCode
//  - SnapshotId
//  - JobId
//  - TaskId
//  - Tag
//  - BazelResult_
type RunStatus struct {
	Status       RunStatusState       `thrift:"status,1,required" json:"status"`
	RunId        string               `thrift:"runId,2,required" json:"runId"`
	OutUri       *string              `thrift:"outUri,3" json:"outUri,omitempty"`
	ErrUri       *string              `thrift:"errUri,4" json:"errUri,omitempty"`
	Error        *string              `thrift:"error,5" json:"error,omitempty"`
	ExitCode     *int32               `thrift:"exitCode,6" json:"exitCode,omitempty"`
	SnapshotId   *string              `thrift:"snapshotId,7" json:"snapshotId,omitempty"`
	JobId        *string              `thrift:"jobId,8" json:"jobId,omitempty"`
	TaskId       *string              `thrift:"taskId,9" json:"taskId,omitempty"`
	Tag          *string              `thrift:"tag,10" json:"tag,omitempty"`
	BazelResult_ *bazel.ActionResult_ `thrift:"bazelResult,11" json:"bazelResult,omitempty"`
}

func NewRunStatus() *RunStatus {
	return &RunStatus{}
}

func (p *RunStatus) GetStatus() RunStatusState {
	return p.Status
}

func (p *RunStatus) GetRunId() string {
	return p.RunId
}

var RunStatus_OutUri_DEFAULT string

func (p *RunStatus) GetOutUri() string {
	if !p.IsSetOutUri() {
		return RunStatus_OutUri_DEFAULT
	}
	return *p.OutUri
}

var RunStatus_ErrUri_DEFAULT string

func (p *RunStatus) GetErrUri() string {
	if !p.IsSetErrUri() {
		return RunStatus_ErrUri_DEFAULT
	}
	return *p.ErrUri
}

var RunStatus_Error_DEFAULT string

func (p *RunStatus) GetError() string {
	if !p.IsSetError() {
		return RunStatus_Error_DEFAULT
	}
	return *p.Error
}

var RunStatus_ExitCode_DEFAULT int32

func (p *RunStatus) GetExitCode() int32 {
	if !p.IsSetExitCode() {
		return RunStatus_ExitCode_DEFAULT
	}
	return *p.ExitCode
}

var RunStatus_SnapshotId_DEFAULT string

func (p *RunStatus) GetSnapshotId() string {
	if !p.IsSetSnapshotId() {
		return RunStatus_SnapshotId_DEFAULT
	}
	return *p.SnapshotId
}

var RunStatus_JobId_DEFAULT string

func (p *RunStatus) GetJobId() string {
	if !p.IsSetJobId() {
		return RunStatus_JobId_DEFAULT
	}
	return *p.JobId
}

var RunStatus_TaskId_DEFAULT string

func (p *RunStatus) GetTaskId() string {
	if !p.IsSetTaskId() {
		return RunStatus_TaskId_DEFAULT
	}
	return *p.TaskId
}

var RunStatus_Tag_DEFAULT string

func (p *RunStatus) GetTag() string {
	if !p.IsSetTag() {
		return RunStatus_Tag_DEFAULT
	}
	return *p.Tag
}

var RunStatus_BazelResult__DEFAULT *bazel.ActionResult_

func (p *RunStatus) GetBazelResult_() *bazel.ActionResult_ {
	if !p.IsSetBazelResult_() {
		return RunStatus_BazelResult__DEFAULT
	}
	return p.BazelResult_
}
func (p *RunStatus) IsSetOutUri() bool {
	return p.OutUri != nil
}

func (p *RunStatus) IsSetErrUri() bool {
	return p.ErrUri != nil
}

func (p *RunStatus) IsSetError() bool {
	return p.Error != nil
}

func (p *RunStatus) IsSetExitCode() bool {
	return p.ExitCode != nil
}

func (p *RunStatus) IsSetSnapshotId() bool {
	return p.SnapshotId != nil
}

func (p *RunStatus) IsSetJobId() bool {
	return p.JobId != nil
}

func (p *RunStatus) IsSetTaskId() bool {
	return p.TaskId != nil
}

func (p *RunStatus) IsSetTag() bool {
	return p.Tag != nil
}

func (p *RunStatus) IsSetBazelResult_() bool {
	return p.BazelResult_ != nil
}

func (p *RunStatus) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false
	var issetRunId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRunId = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetRunId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RunId is not set"))
	}
	return nil
}

func (p *RunStatus) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := RunStatusState(v)
		p.Status = temp
	}
	return nil
}

func (p *RunStatus) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RunId = v
	}
	return nil
}

func (p *RunStatus) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.OutUri = &v
	}
	return nil
}

func (p *RunStatus) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ErrUri = &v
	}
	return nil
}

func (p *RunStatus) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Error = &v
	}
	return nil
}

func (p *RunStatus) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ExitCode = &v
	}
	return nil
}

func (p *RunStatus) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.SnapshotId = &v
	}
	return nil
}

func (p *RunStatus) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.JobId = &v
	}
	return nil
}

func (p *RunStatus) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.TaskId = &v
	}
	return nil
}

func (p *RunStatus) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Tag = &v
	}
	return nil
}

func (p *RunStatus) readField11(iprot thrift.TProtocol) error {
	p.BazelResult_ = &bazel.ActionResult_{}
	if err := p.BazelResult_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BazelResult_), err)
	}
	return nil
}

func (p *RunStatus) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RunStatus"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RunStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *RunStatus) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("runId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:runId: ", p), err)
	}
	if err := oprot.WriteString(string(p.RunId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.runId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:runId: ", p), err)
	}
	return err
}

func (p *RunStatus) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutUri() {
		if err := oprot.WriteFieldBegin("outUri", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:outUri: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OutUri)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.outUri (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:outUri: ", p), err)
		}
	}
	return err
}

func (p *RunStatus) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrUri() {
		if err := oprot.WriteFieldBegin("errUri", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:errUri: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ErrUri)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.errUri (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:errUri: ", p), err)
		}
	}
	return err
}

func (p *RunStatus) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("error", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:error: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Error)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.error (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:error: ", p), err)
		}
	}
	return err
}

func (p *RunStatus) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetExitCode() {
		if err := oprot.WriteFieldBegin("exitCode", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:exitCode: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ExitCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.exitCode (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:exitCode: ", p), err)
		}
	}
	return err
}

func (p *RunStatus) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetSnapshotId() {
		if err := oprot.WriteFieldBegin("snapshotId", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:snapshotId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SnapshotId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.snapshotId (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:snapshotId: ", p), err)
		}
	}
	return err
}

func (p *RunStatus) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetJobId() {
		if err := oprot.WriteFieldBegin("jobId", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:jobId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.JobId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.jobId (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:jobId: ", p), err)
		}
	}
	return err
}

func (p *RunStatus) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaskId() {
		if err := oprot.WriteFieldBegin("taskId", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:taskId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TaskId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.taskId (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:taskId: ", p), err)
		}
	}
	return err
}

func (p *RunStatus) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTag() {
		if err := oprot.WriteFieldBegin("tag", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:tag: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Tag)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tag (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:tag: ", p), err)
		}
	}
	return err
}

func (p *RunStatus) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetBazelResult_() {
		if err := oprot.WriteFieldBegin("bazelResult", thrift.STRUCT, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:bazelResult: ", p), err)
		}
		if err := p.BazelResult_.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BazelResult_), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:bazelResult: ", p), err)
		}
	}
	return err
}

func (p *RunStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RunStatus(%+v)", *p)
}

// Attributes:
//  - Argv
//  - EnvVars
type Command struct {
	Argv    []string          `thrift:"argv,1" json:"argv"`
	EnvVars map[string]string `thrift:"envVars,2" json:"envVars,omitempty"`
}

func NewCommand() *Command {
	return &Command{}
}

func (p *Command) GetArgv() []string {
	return p.Argv
}

var Command_EnvVars_DEFAULT map[string]string

func (p *Command) GetEnvVars() map[string]string {
	return p.EnvVars
}
func (p *Command) IsSetEnvVars() bool {
	return p.EnvVars != nil
}

func (p *Command) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Command) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Argv = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.Argv = append(p.Argv, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Command) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.EnvVars = tMap
	for i := 0; i < size; i++ {
		var _key1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key1 = v
		}
		var _val2 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val2 = v
		}
		p.EnvVars[_key1] = _val2
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Command) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Command"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Command) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("argv", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:argv: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Argv)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Argv {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:argv: ", p), err)
	}
	return err
}

func (p *Command) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnvVars() {
		if err := oprot.WriteFieldBegin("envVars", thrift.MAP, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:envVars: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.EnvVars)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.EnvVars {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:envVars: ", p), err)
		}
	}
	return err
}

func (p *Command) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Command(%+v)", *p)
}

// Attributes:
//  - Command
//  - SnapshotId
//  - TaskId
//  - TimeoutMs
type TaskDefinition struct {
	Command    *Command `thrift:"command,1,required" json:"command"`
	SnapshotId *string  `thrift:"snapshotId,2" json:"snapshotId,omitempty"`
	TaskId     *string  `thrift:"taskId,3" json:"taskId,omitempty"`
	TimeoutMs  *int32   `thrift:"timeoutMs,4" json:"timeoutMs,omitempty"`
}

func NewTaskDefinition() *TaskDefinition {
	return &TaskDefinition{}
}

var TaskDefinition_Command_DEFAULT *Command

func (p *TaskDefinition) GetCommand() *Command {
	if !p.IsSetCommand() {
		return TaskDefinition_Command_DEFAULT
	}
	return p.Command
}

var TaskDefinition_SnapshotId_DEFAULT string

func (p *TaskDefinition) GetSnapshotId() string {
	if !p.IsSetSnapshotId() {
		return TaskDefinition_SnapshotId_DEFAULT
	}
	return *p.SnapshotId
}

var TaskDefinition_TaskId_DEFAULT string

func (p *TaskDefinition) GetTaskId() string {
	if !p.IsSetTaskId() {
		return TaskDefinition_TaskId_DEFAULT
	}
	return *p.TaskId
}

var TaskDefinition_TimeoutMs_DEFAULT int32

func (p *TaskDefinition) GetTimeoutMs() int32 {
	if !p.IsSetTimeoutMs() {
		return TaskDefinition_TimeoutMs_DEFAULT
	}
	return *p.TimeoutMs
}
func (p *TaskDefinition) IsSetCommand() bool {
	return p.Command != nil
}

func (p *TaskDefinition) IsSetSnapshotId() bool {
	return p.SnapshotId != nil
}

func (p *TaskDefinition) IsSetTaskId() bool {
	return p.TaskId != nil
}

func (p *TaskDefinition) IsSetTimeoutMs() bool {
	return p.TimeoutMs != nil
}

func (p *TaskDefinition) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetCommand bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetCommand = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetCommand {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Command is not set"))
	}
	return nil
}

func (p *TaskDefinition) readField1(iprot thrift.TProtocol) error {
	p.Command = &Command{}
	if err := p.Command.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Command), err)
	}
	return nil
}

func (p *TaskDefinition) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SnapshotId = &v
	}
	return nil
}

func (p *TaskDefinition) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TaskId = &v
	}
	return nil
}

func (p *TaskDefinition) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TimeoutMs = &v
	}
	return nil
}

func (p *TaskDefinition) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TaskDefinition"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TaskDefinition) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("command", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:command: ", p), err)
	}
	if err := p.Command.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Command), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:command: ", p), err)
	}
	return err
}

func (p *TaskDefinition) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSnapshotId() {
		if err := oprot.WriteFieldBegin("snapshotId", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:snapshotId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SnapshotId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.snapshotId (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:snapshotId: ", p), err)
		}
	}
	return err
}

func (p *TaskDefinition) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaskId() {
		if err := oprot.WriteFieldBegin("taskId", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:taskId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TaskId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.taskId (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:taskId: ", p), err)
		}
	}
	return err
}

func (p *TaskDefinition) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeoutMs() {
		if err := oprot.WriteFieldBegin("timeoutMs", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timeoutMs: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.TimeoutMs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timeoutMs (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timeoutMs: ", p), err)
		}
	}
	return err
}

func (p *TaskDefinition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TaskDefinition(%+v)", *p)
}

// Attributes:
//  - Tasks
//  - DEPRECATEDJobType
//  - DefaultTaskTimeoutMs
//  - Priority
//  - Tag
//  - Basis
//  - Requestor
//  - JobType
type JobDefinition struct {
	Tasks                []*TaskDefinition `thrift:"tasks,1,required" json:"tasks"`
	DEPRECATEDJobType    *JobType          `thrift:"DEPRECATED_jobType,2" json:"DEPRECATED_jobType,omitempty"`
	DefaultTaskTimeoutMs *int32            `thrift:"defaultTaskTimeoutMs,3" json:"defaultTaskTimeoutMs,omitempty"`
	Priority             *int32            `thrift:"priority,4" json:"priority,omitempty"`
	Tag                  *string           `thrift:"tag,5" json:"tag,omitempty"`
	Basis                *string           `thrift:"basis,6" json:"basis,omitempty"`
	Requestor            *string           `thrift:"requestor,7" json:"requestor,omitempty"`
	JobType              *string           `thrift:"jobType,8" json:"jobType,omitempty"`
}

func NewJobDefinition() *JobDefinition {
	return &JobDefinition{}
}

func (p *JobDefinition) GetTasks() []*TaskDefinition {
	return p.Tasks
}

var JobDefinition_DEPRECATEDJobType_DEFAULT JobType

func (p *JobDefinition) GetDEPRECATEDJobType() JobType {
	if !p.IsSetDEPRECATEDJobType() {
		return JobDefinition_DEPRECATEDJobType_DEFAULT
	}
	return *p.DEPRECATEDJobType
}

var JobDefinition_DefaultTaskTimeoutMs_DEFAULT int32

func (p *JobDefinition) GetDefaultTaskTimeoutMs() int32 {
	if !p.IsSetDefaultTaskTimeoutMs() {
		return JobDefinition_DefaultTaskTimeoutMs_DEFAULT
	}
	return *p.DefaultTaskTimeoutMs
}

var JobDefinition_Priority_DEFAULT int32

func (p *JobDefinition) GetPriority() int32 {
	if !p.IsSetPriority() {
		return JobDefinition_Priority_DEFAULT
	}
	return *p.Priority
}

var JobDefinition_Tag_DEFAULT string

func (p *JobDefinition) GetTag() string {
	if !p.IsSetTag() {
		return JobDefinition_Tag_DEFAULT
	}
	return *p.Tag
}

var JobDefinition_Basis_DEFAULT string

func (p *JobDefinition) GetBasis() string {
	if !p.IsSetBasis() {
		return JobDefinition_Basis_DEFAULT
	}
	return *p.Basis
}

var JobDefinition_Requestor_DEFAULT string

func (p *JobDefinition) GetRequestor() string {
	if !p.IsSetRequestor() {
		return JobDefinition_Requestor_DEFAULT
	}
	return *p.Requestor
}

var JobDefinition_JobType_DEFAULT string

func (p *JobDefinition) GetJobType() string {
	if !p.IsSetJobType() {
		return JobDefinition_JobType_DEFAULT
	}
	return *p.JobType
}
func (p *JobDefinition) IsSetDEPRECATEDJobType() bool {
	return p.DEPRECATEDJobType != nil
}

func (p *JobDefinition) IsSetDefaultTaskTimeoutMs() bool {
	return p.DefaultTaskTimeoutMs != nil
}

func (p *JobDefinition) IsSetPriority() bool {
	return p.Priority != nil
}

func (p *JobDefinition) IsSetTag() bool {
	return p.Tag != nil
}

func (p *JobDefinition) IsSetBasis() bool {
	return p.Basis != nil
}

func (p *JobDefinition) IsSetRequestor() bool {
	return p.Requestor != nil
}

func (p *JobDefinition) IsSetJobType() bool {
	return p.JobType != nil
}

func (p *JobDefinition) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetTasks bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetTasks = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetTasks {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tasks is not set"))
	}
	return nil
}

func (p *JobDefinition) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TaskDefinition, 0, size)
	p.Tasks = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &TaskDefinition{}
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.Tasks = append(p.Tasks, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *JobDefinition) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := JobType(v)
		p.DEPRECATEDJobType = &temp
	}
	return nil
}

func (p *JobDefinition) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DefaultTaskTimeoutMs = &v
	}
	return nil
}

func (p *JobDefinition) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Priority = &v
	}
	return nil
}

func (p *JobDefinition) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Tag = &v
	}
	return nil
}

func (p *JobDefinition) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Basis = &v
	}
	return nil
}

func (p *JobDefinition) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Requestor = &v
	}
	return nil
}

func (p *JobDefinition) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.JobType = &v
	}
	return nil
}

func (p *JobDefinition) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("JobDefinition"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JobDefinition) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tasks", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tasks: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tasks)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Tasks {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tasks: ", p), err)
	}
	return err
}

func (p *JobDefinition) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDEPRECATEDJobType() {
		if err := oprot.WriteFieldBegin("DEPRECATED_jobType", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:DEPRECATED_jobType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.DEPRECATEDJobType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.DEPRECATED_jobType (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:DEPRECATED_jobType: ", p), err)
		}
	}
	return err
}

func (p *JobDefinition) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultTaskTimeoutMs() {
		if err := oprot.WriteFieldBegin("defaultTaskTimeoutMs", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:defaultTaskTimeoutMs: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.DefaultTaskTimeoutMs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.defaultTaskTimeoutMs (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:defaultTaskTimeoutMs: ", p), err)
		}
	}
	return err
}

func (p *JobDefinition) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPriority() {
		if err := oprot.WriteFieldBegin("priority", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:priority: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Priority)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.priority (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:priority: ", p), err)
		}
	}
	return err
}

func (p *JobDefinition) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTag() {
		if err := oprot.WriteFieldBegin("tag", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tag: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Tag)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tag (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tag: ", p), err)
		}
	}
	return err
}

func (p *JobDefinition) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetBasis() {
		if err := oprot.WriteFieldBegin("basis", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:basis: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Basis)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.basis (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:basis: ", p), err)
		}
	}
	return err
}

func (p *JobDefinition) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestor() {
		if err := oprot.WriteFieldBegin("requestor", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:requestor: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Requestor)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requestor (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:requestor: ", p), err)
		}
	}
	return err
}

func (p *JobDefinition) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetJobType() {
		if err := oprot.WriteFieldBegin("jobType", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:jobType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.JobType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.jobType (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:jobType: ", p), err)
		}
	}
	return err
}

func (p *JobDefinition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JobDefinition(%+v)", *p)
}

// Attributes:
//  - ID
type JobId struct {
	ID string `thrift:"id,1,required" json:"id"`
}

func NewJobId() *JobId {
	return &JobId{}
}

func (p *JobId) GetID() string {
	return p.ID
}
func (p *JobId) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	return nil
}

func (p *JobId) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *JobId) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("JobId"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JobId) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *JobId) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JobId(%+v)", *p)
}

// Attributes:
//  - ID
//  - Status
//  - TaskStatus
//  - TaskData
type JobStatus struct {
	ID         string                `thrift:"id,1,required" json:"id"`
	Status     Status                `thrift:"status,2,required" json:"status"`
	TaskStatus map[string]Status     `thrift:"taskStatus,3" json:"taskStatus,omitempty"`
	TaskData   map[string]*RunStatus `thrift:"taskData,4" json:"taskData,omitempty"`
}

func NewJobStatus() *JobStatus {
	return &JobStatus{}
}

func (p *JobStatus) GetID() string {
	return p.ID
}

func (p *JobStatus) GetStatus() Status {
	return p.Status
}

var JobStatus_TaskStatus_DEFAULT map[string]Status

func (p *JobStatus) GetTaskStatus() map[string]Status {
	return p.TaskStatus
}

var JobStatus_TaskData_DEFAULT map[string]*RunStatus

func (p *JobStatus) GetTaskData() map[string]*RunStatus {
	return p.TaskData
}
func (p *JobStatus) IsSetTaskStatus() bool {
	return p.TaskStatus != nil
}

func (p *JobStatus) IsSetTaskData() bool {
	return p.TaskData != nil
}

func (p *JobStatus) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *JobStatus) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *JobStatus) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Status(v)
		p.Status = temp
	}
	return nil
}

func (p *JobStatus) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Status, size)
	p.TaskStatus = tMap
	for i := 0; i < size; i++ {
		var _key4 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key4 = v
		}
		var _val5 Status
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Status(v)
			_val5 = temp
		}
		p.TaskStatus[_key4] = _val5
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *JobStatus) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*RunStatus, size)
	p.TaskData = tMap
	for i := 0; i < size; i++ {
		var _key6 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key6 = v
		}
		_val7 := &RunStatus{}
		if err := _val7.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val7), err)
		}
		p.TaskData[_key6] = _val7
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *JobStatus) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("JobStatus"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JobStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *JobStatus) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err)
	}
	return err
}

func (p *JobStatus) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaskStatus() {
		if err := oprot.WriteFieldBegin("taskStatus", thrift.MAP, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:taskStatus: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.TaskStatus)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.TaskStatus {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:taskStatus: ", p), err)
		}
	}
	return err
}

func (p *JobStatus) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaskData() {
		if err := oprot.WriteFieldBegin("taskData", thrift.MAP, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:taskData: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.TaskData)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.TaskData {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:taskData: ", p), err)
		}
	}
	return err
}

func (p *JobStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JobStatus(%+v)", *p)
}
