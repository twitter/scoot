/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-01-10")
public class RunStatus implements org.apache.thrift.TBase<RunStatus, RunStatus._Fields>, java.io.Serializable, Cloneable, Comparable<RunStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RunStatus");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField RUN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("runId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OUT_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("outUri", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ERR_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("errUri", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EXIT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("exitCode", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SNAPSHOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshotId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("tag", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField BAZEL_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("bazelResult", org.apache.thrift.protocol.TType.STRUCT, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RunStatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RunStatusTupleSchemeFactory());
  }

  /**
   * 
   * @see RunStatusState
   */
  public RunStatusState status; // required
  public String runId; // required
  public String outUri; // optional
  public String errUri; // optional
  public String error; // optional
  public int exitCode; // optional
  public String snapshotId; // optional
  public String jobId; // optional
  public String taskId; // optional
  public String tag; // optional
  public ActionResult bazelResult; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see RunStatusState
     */
    STATUS((short)1, "status"),
    RUN_ID((short)2, "runId"),
    OUT_URI((short)3, "outUri"),
    ERR_URI((short)4, "errUri"),
    ERROR((short)5, "error"),
    EXIT_CODE((short)6, "exitCode"),
    SNAPSHOT_ID((short)7, "snapshotId"),
    JOB_ID((short)8, "jobId"),
    TASK_ID((short)9, "taskId"),
    TAG((short)10, "tag"),
    BAZEL_RESULT((short)11, "bazelResult");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // RUN_ID
          return RUN_ID;
        case 3: // OUT_URI
          return OUT_URI;
        case 4: // ERR_URI
          return ERR_URI;
        case 5: // ERROR
          return ERROR;
        case 6: // EXIT_CODE
          return EXIT_CODE;
        case 7: // SNAPSHOT_ID
          return SNAPSHOT_ID;
        case 8: // JOB_ID
          return JOB_ID;
        case 9: // TASK_ID
          return TASK_ID;
        case 10: // TAG
          return TAG;
        case 11: // BAZEL_RESULT
          return BAZEL_RESULT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXITCODE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.OUT_URI,_Fields.ERR_URI,_Fields.ERROR,_Fields.EXIT_CODE,_Fields.SNAPSHOT_ID,_Fields.JOB_ID,_Fields.TASK_ID,_Fields.TAG,_Fields.BAZEL_RESULT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RunStatusState.class)));
    tmpMap.put(_Fields.RUN_ID, new org.apache.thrift.meta_data.FieldMetaData("runId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUT_URI, new org.apache.thrift.meta_data.FieldMetaData("outUri", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERR_URI, new org.apache.thrift.meta_data.FieldMetaData("errUri", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXIT_CODE, new org.apache.thrift.meta_data.FieldMetaData("exitCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SNAPSHOT_ID, new org.apache.thrift.meta_data.FieldMetaData("snapshotId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAG, new org.apache.thrift.meta_data.FieldMetaData("tag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BAZEL_RESULT, new org.apache.thrift.meta_data.FieldMetaData("bazelResult", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ActionResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RunStatus.class, metaDataMap);
  }

  public RunStatus() {
  }

  public RunStatus(
    RunStatusState status,
    String runId)
  {
    this();
    this.status = status;
    this.runId = runId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RunStatus(RunStatus other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetRunId()) {
      this.runId = other.runId;
    }
    if (other.isSetOutUri()) {
      this.outUri = other.outUri;
    }
    if (other.isSetErrUri()) {
      this.errUri = other.errUri;
    }
    if (other.isSetError()) {
      this.error = other.error;
    }
    this.exitCode = other.exitCode;
    if (other.isSetSnapshotId()) {
      this.snapshotId = other.snapshotId;
    }
    if (other.isSetJobId()) {
      this.jobId = other.jobId;
    }
    if (other.isSetTaskId()) {
      this.taskId = other.taskId;
    }
    if (other.isSetTag()) {
      this.tag = other.tag;
    }
    if (other.isSetBazelResult()) {
      this.bazelResult = new ActionResult(other.bazelResult);
    }
  }

  public RunStatus deepCopy() {
    return new RunStatus(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.runId = null;
    this.outUri = null;
    this.errUri = null;
    this.error = null;
    setExitCodeIsSet(false);
    this.exitCode = 0;
    this.snapshotId = null;
    this.jobId = null;
    this.taskId = null;
    this.tag = null;
    this.bazelResult = null;
  }

  /**
   * 
   * @see RunStatusState
   */
  public RunStatusState getStatus() {
    return this.status;
  }

  /**
   * 
   * @see RunStatusState
   */
  public RunStatus setStatus(RunStatusState status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getRunId() {
    return this.runId;
  }

  public RunStatus setRunId(String runId) {
    this.runId = runId;
    return this;
  }

  public void unsetRunId() {
    this.runId = null;
  }

  /** Returns true if field runId is set (has been assigned a value) and false otherwise */
  public boolean isSetRunId() {
    return this.runId != null;
  }

  public void setRunIdIsSet(boolean value) {
    if (!value) {
      this.runId = null;
    }
  }

  public String getOutUri() {
    return this.outUri;
  }

  public RunStatus setOutUri(String outUri) {
    this.outUri = outUri;
    return this;
  }

  public void unsetOutUri() {
    this.outUri = null;
  }

  /** Returns true if field outUri is set (has been assigned a value) and false otherwise */
  public boolean isSetOutUri() {
    return this.outUri != null;
  }

  public void setOutUriIsSet(boolean value) {
    if (!value) {
      this.outUri = null;
    }
  }

  public String getErrUri() {
    return this.errUri;
  }

  public RunStatus setErrUri(String errUri) {
    this.errUri = errUri;
    return this;
  }

  public void unsetErrUri() {
    this.errUri = null;
  }

  /** Returns true if field errUri is set (has been assigned a value) and false otherwise */
  public boolean isSetErrUri() {
    return this.errUri != null;
  }

  public void setErrUriIsSet(boolean value) {
    if (!value) {
      this.errUri = null;
    }
  }

  public String getError() {
    return this.error;
  }

  public RunStatus setError(String error) {
    this.error = error;
    return this;
  }

  public void unsetError() {
    this.error = null;
  }

  /** Returns true if field error is set (has been assigned a value) and false otherwise */
  public boolean isSetError() {
    return this.error != null;
  }

  public void setErrorIsSet(boolean value) {
    if (!value) {
      this.error = null;
    }
  }

  public int getExitCode() {
    return this.exitCode;
  }

  public RunStatus setExitCode(int exitCode) {
    this.exitCode = exitCode;
    setExitCodeIsSet(true);
    return this;
  }

  public void unsetExitCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXITCODE_ISSET_ID);
  }

  /** Returns true if field exitCode is set (has been assigned a value) and false otherwise */
  public boolean isSetExitCode() {
    return EncodingUtils.testBit(__isset_bitfield, __EXITCODE_ISSET_ID);
  }

  public void setExitCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXITCODE_ISSET_ID, value);
  }

  public String getSnapshotId() {
    return this.snapshotId;
  }

  public RunStatus setSnapshotId(String snapshotId) {
    this.snapshotId = snapshotId;
    return this;
  }

  public void unsetSnapshotId() {
    this.snapshotId = null;
  }

  /** Returns true if field snapshotId is set (has been assigned a value) and false otherwise */
  public boolean isSetSnapshotId() {
    return this.snapshotId != null;
  }

  public void setSnapshotIdIsSet(boolean value) {
    if (!value) {
      this.snapshotId = null;
    }
  }

  public String getJobId() {
    return this.jobId;
  }

  public RunStatus setJobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  public void unsetJobId() {
    this.jobId = null;
  }

  /** Returns true if field jobId is set (has been assigned a value) and false otherwise */
  public boolean isSetJobId() {
    return this.jobId != null;
  }

  public void setJobIdIsSet(boolean value) {
    if (!value) {
      this.jobId = null;
    }
  }

  public String getTaskId() {
    return this.taskId;
  }

  public RunStatus setTaskId(String taskId) {
    this.taskId = taskId;
    return this;
  }

  public void unsetTaskId() {
    this.taskId = null;
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return this.taskId != null;
  }

  public void setTaskIdIsSet(boolean value) {
    if (!value) {
      this.taskId = null;
    }
  }

  public String getTag() {
    return this.tag;
  }

  public RunStatus setTag(String tag) {
    this.tag = tag;
    return this;
  }

  public void unsetTag() {
    this.tag = null;
  }

  /** Returns true if field tag is set (has been assigned a value) and false otherwise */
  public boolean isSetTag() {
    return this.tag != null;
  }

  public void setTagIsSet(boolean value) {
    if (!value) {
      this.tag = null;
    }
  }

  public ActionResult getBazelResult() {
    return this.bazelResult;
  }

  public RunStatus setBazelResult(ActionResult bazelResult) {
    this.bazelResult = bazelResult;
    return this;
  }

  public void unsetBazelResult() {
    this.bazelResult = null;
  }

  /** Returns true if field bazelResult is set (has been assigned a value) and false otherwise */
  public boolean isSetBazelResult() {
    return this.bazelResult != null;
  }

  public void setBazelResultIsSet(boolean value) {
    if (!value) {
      this.bazelResult = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((RunStatusState)value);
      }
      break;

    case RUN_ID:
      if (value == null) {
        unsetRunId();
      } else {
        setRunId((String)value);
      }
      break;

    case OUT_URI:
      if (value == null) {
        unsetOutUri();
      } else {
        setOutUri((String)value);
      }
      break;

    case ERR_URI:
      if (value == null) {
        unsetErrUri();
      } else {
        setErrUri((String)value);
      }
      break;

    case ERROR:
      if (value == null) {
        unsetError();
      } else {
        setError((String)value);
      }
      break;

    case EXIT_CODE:
      if (value == null) {
        unsetExitCode();
      } else {
        setExitCode((Integer)value);
      }
      break;

    case SNAPSHOT_ID:
      if (value == null) {
        unsetSnapshotId();
      } else {
        setSnapshotId((String)value);
      }
      break;

    case JOB_ID:
      if (value == null) {
        unsetJobId();
      } else {
        setJobId((String)value);
      }
      break;

    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((String)value);
      }
      break;

    case TAG:
      if (value == null) {
        unsetTag();
      } else {
        setTag((String)value);
      }
      break;

    case BAZEL_RESULT:
      if (value == null) {
        unsetBazelResult();
      } else {
        setBazelResult((ActionResult)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case RUN_ID:
      return getRunId();

    case OUT_URI:
      return getOutUri();

    case ERR_URI:
      return getErrUri();

    case ERROR:
      return getError();

    case EXIT_CODE:
      return getExitCode();

    case SNAPSHOT_ID:
      return getSnapshotId();

    case JOB_ID:
      return getJobId();

    case TASK_ID:
      return getTaskId();

    case TAG:
      return getTag();

    case BAZEL_RESULT:
      return getBazelResult();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case RUN_ID:
      return isSetRunId();
    case OUT_URI:
      return isSetOutUri();
    case ERR_URI:
      return isSetErrUri();
    case ERROR:
      return isSetError();
    case EXIT_CODE:
      return isSetExitCode();
    case SNAPSHOT_ID:
      return isSetSnapshotId();
    case JOB_ID:
      return isSetJobId();
    case TASK_ID:
      return isSetTaskId();
    case TAG:
      return isSetTag();
    case BAZEL_RESULT:
      return isSetBazelResult();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RunStatus)
      return this.equals((RunStatus)that);
    return false;
  }

  public boolean equals(RunStatus that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_runId = true && this.isSetRunId();
    boolean that_present_runId = true && that.isSetRunId();
    if (this_present_runId || that_present_runId) {
      if (!(this_present_runId && that_present_runId))
        return false;
      if (!this.runId.equals(that.runId))
        return false;
    }

    boolean this_present_outUri = true && this.isSetOutUri();
    boolean that_present_outUri = true && that.isSetOutUri();
    if (this_present_outUri || that_present_outUri) {
      if (!(this_present_outUri && that_present_outUri))
        return false;
      if (!this.outUri.equals(that.outUri))
        return false;
    }

    boolean this_present_errUri = true && this.isSetErrUri();
    boolean that_present_errUri = true && that.isSetErrUri();
    if (this_present_errUri || that_present_errUri) {
      if (!(this_present_errUri && that_present_errUri))
        return false;
      if (!this.errUri.equals(that.errUri))
        return false;
    }

    boolean this_present_error = true && this.isSetError();
    boolean that_present_error = true && that.isSetError();
    if (this_present_error || that_present_error) {
      if (!(this_present_error && that_present_error))
        return false;
      if (!this.error.equals(that.error))
        return false;
    }

    boolean this_present_exitCode = true && this.isSetExitCode();
    boolean that_present_exitCode = true && that.isSetExitCode();
    if (this_present_exitCode || that_present_exitCode) {
      if (!(this_present_exitCode && that_present_exitCode))
        return false;
      if (this.exitCode != that.exitCode)
        return false;
    }

    boolean this_present_snapshotId = true && this.isSetSnapshotId();
    boolean that_present_snapshotId = true && that.isSetSnapshotId();
    if (this_present_snapshotId || that_present_snapshotId) {
      if (!(this_present_snapshotId && that_present_snapshotId))
        return false;
      if (!this.snapshotId.equals(that.snapshotId))
        return false;
    }

    boolean this_present_jobId = true && this.isSetJobId();
    boolean that_present_jobId = true && that.isSetJobId();
    if (this_present_jobId || that_present_jobId) {
      if (!(this_present_jobId && that_present_jobId))
        return false;
      if (!this.jobId.equals(that.jobId))
        return false;
    }

    boolean this_present_taskId = true && this.isSetTaskId();
    boolean that_present_taskId = true && that.isSetTaskId();
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (!this.taskId.equals(that.taskId))
        return false;
    }

    boolean this_present_tag = true && this.isSetTag();
    boolean that_present_tag = true && that.isSetTag();
    if (this_present_tag || that_present_tag) {
      if (!(this_present_tag && that_present_tag))
        return false;
      if (!this.tag.equals(that.tag))
        return false;
    }

    boolean this_present_bazelResult = true && this.isSetBazelResult();
    boolean that_present_bazelResult = true && that.isSetBazelResult();
    if (this_present_bazelResult || that_present_bazelResult) {
      if (!(this_present_bazelResult && that_present_bazelResult))
        return false;
      if (!this.bazelResult.equals(that.bazelResult))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_runId = true && (isSetRunId());
    list.add(present_runId);
    if (present_runId)
      list.add(runId);

    boolean present_outUri = true && (isSetOutUri());
    list.add(present_outUri);
    if (present_outUri)
      list.add(outUri);

    boolean present_errUri = true && (isSetErrUri());
    list.add(present_errUri);
    if (present_errUri)
      list.add(errUri);

    boolean present_error = true && (isSetError());
    list.add(present_error);
    if (present_error)
      list.add(error);

    boolean present_exitCode = true && (isSetExitCode());
    list.add(present_exitCode);
    if (present_exitCode)
      list.add(exitCode);

    boolean present_snapshotId = true && (isSetSnapshotId());
    list.add(present_snapshotId);
    if (present_snapshotId)
      list.add(snapshotId);

    boolean present_jobId = true && (isSetJobId());
    list.add(present_jobId);
    if (present_jobId)
      list.add(jobId);

    boolean present_taskId = true && (isSetTaskId());
    list.add(present_taskId);
    if (present_taskId)
      list.add(taskId);

    boolean present_tag = true && (isSetTag());
    list.add(present_tag);
    if (present_tag)
      list.add(tag);

    boolean present_bazelResult = true && (isSetBazelResult());
    list.add(present_bazelResult);
    if (present_bazelResult)
      list.add(bazelResult);

    return list.hashCode();
  }

  @Override
  public int compareTo(RunStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRunId()).compareTo(other.isSetRunId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runId, other.runId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutUri()).compareTo(other.isSetOutUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outUri, other.outUri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrUri()).compareTo(other.isSetErrUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errUri, other.errUri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetError()).compareTo(other.isSetError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExitCode()).compareTo(other.isSetExitCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExitCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exitCode, other.exitCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSnapshotId()).compareTo(other.isSetSnapshotId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnapshotId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapshotId, other.snapshotId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobId()).compareTo(other.isSetJobId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobId, other.jobId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTag()).compareTo(other.isSetTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag, other.tag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBazelResult()).compareTo(other.isSetBazelResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBazelResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bazelResult, other.bazelResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RunStatus(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("runId:");
    if (this.runId == null) {
      sb.append("null");
    } else {
      sb.append(this.runId);
    }
    first = false;
    if (isSetOutUri()) {
      if (!first) sb.append(", ");
      sb.append("outUri:");
      if (this.outUri == null) {
        sb.append("null");
      } else {
        sb.append(this.outUri);
      }
      first = false;
    }
    if (isSetErrUri()) {
      if (!first) sb.append(", ");
      sb.append("errUri:");
      if (this.errUri == null) {
        sb.append("null");
      } else {
        sb.append(this.errUri);
      }
      first = false;
    }
    if (isSetError()) {
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
    }
    if (isSetExitCode()) {
      if (!first) sb.append(", ");
      sb.append("exitCode:");
      sb.append(this.exitCode);
      first = false;
    }
    if (isSetSnapshotId()) {
      if (!first) sb.append(", ");
      sb.append("snapshotId:");
      if (this.snapshotId == null) {
        sb.append("null");
      } else {
        sb.append(this.snapshotId);
      }
      first = false;
    }
    if (isSetJobId()) {
      if (!first) sb.append(", ");
      sb.append("jobId:");
      if (this.jobId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobId);
      }
      first = false;
    }
    if (isSetTaskId()) {
      if (!first) sb.append(", ");
      sb.append("taskId:");
      if (this.taskId == null) {
        sb.append("null");
      } else {
        sb.append(this.taskId);
      }
      first = false;
    }
    if (isSetTag()) {
      if (!first) sb.append(", ");
      sb.append("tag:");
      if (this.tag == null) {
        sb.append("null");
      } else {
        sb.append(this.tag);
      }
      first = false;
    }
    if (isSetBazelResult()) {
      if (!first) sb.append(", ");
      sb.append("bazelResult:");
      if (this.bazelResult == null) {
        sb.append("null");
      } else {
        sb.append(this.bazelResult);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
    if (runId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'runId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (bazelResult != null) {
      bazelResult.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RunStatusStandardSchemeFactory implements SchemeFactory {
    public RunStatusStandardScheme getScheme() {
      return new RunStatusStandardScheme();
    }
  }

  private static class RunStatusStandardScheme extends StandardScheme<RunStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RunStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = RunStatusState.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RUN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.runId = iprot.readString();
              struct.setRunIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OUT_URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outUri = iprot.readString();
              struct.setOutUriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ERR_URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errUri = iprot.readString();
              struct.setErrUriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.error = iprot.readString();
              struct.setErrorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXIT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exitCode = iprot.readI32();
              struct.setExitCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SNAPSHOT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.snapshotId = iprot.readString();
              struct.setSnapshotIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobId = iprot.readString();
              struct.setJobIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskId = iprot.readString();
              struct.setTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tag = iprot.readString();
              struct.setTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BAZEL_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.bazelResult = new ActionResult();
              struct.bazelResult.read(iprot);
              struct.setBazelResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RunStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.runId != null) {
        oprot.writeFieldBegin(RUN_ID_FIELD_DESC);
        oprot.writeString(struct.runId);
        oprot.writeFieldEnd();
      }
      if (struct.outUri != null) {
        if (struct.isSetOutUri()) {
          oprot.writeFieldBegin(OUT_URI_FIELD_DESC);
          oprot.writeString(struct.outUri);
          oprot.writeFieldEnd();
        }
      }
      if (struct.errUri != null) {
        if (struct.isSetErrUri()) {
          oprot.writeFieldBegin(ERR_URI_FIELD_DESC);
          oprot.writeString(struct.errUri);
          oprot.writeFieldEnd();
        }
      }
      if (struct.error != null) {
        if (struct.isSetError()) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          oprot.writeString(struct.error);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExitCode()) {
        oprot.writeFieldBegin(EXIT_CODE_FIELD_DESC);
        oprot.writeI32(struct.exitCode);
        oprot.writeFieldEnd();
      }
      if (struct.snapshotId != null) {
        if (struct.isSetSnapshotId()) {
          oprot.writeFieldBegin(SNAPSHOT_ID_FIELD_DESC);
          oprot.writeString(struct.snapshotId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.jobId != null) {
        if (struct.isSetJobId()) {
          oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
          oprot.writeString(struct.jobId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.taskId != null) {
        if (struct.isSetTaskId()) {
          oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
          oprot.writeString(struct.taskId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tag != null) {
        if (struct.isSetTag()) {
          oprot.writeFieldBegin(TAG_FIELD_DESC);
          oprot.writeString(struct.tag);
          oprot.writeFieldEnd();
        }
      }
      if (struct.bazelResult != null) {
        if (struct.isSetBazelResult()) {
          oprot.writeFieldBegin(BAZEL_RESULT_FIELD_DESC);
          struct.bazelResult.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RunStatusTupleSchemeFactory implements SchemeFactory {
    public RunStatusTupleScheme getScheme() {
      return new RunStatusTupleScheme();
    }
  }

  private static class RunStatusTupleScheme extends TupleScheme<RunStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RunStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.status.getValue());
      oprot.writeString(struct.runId);
      BitSet optionals = new BitSet();
      if (struct.isSetOutUri()) {
        optionals.set(0);
      }
      if (struct.isSetErrUri()) {
        optionals.set(1);
      }
      if (struct.isSetError()) {
        optionals.set(2);
      }
      if (struct.isSetExitCode()) {
        optionals.set(3);
      }
      if (struct.isSetSnapshotId()) {
        optionals.set(4);
      }
      if (struct.isSetJobId()) {
        optionals.set(5);
      }
      if (struct.isSetTaskId()) {
        optionals.set(6);
      }
      if (struct.isSetTag()) {
        optionals.set(7);
      }
      if (struct.isSetBazelResult()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetOutUri()) {
        oprot.writeString(struct.outUri);
      }
      if (struct.isSetErrUri()) {
        oprot.writeString(struct.errUri);
      }
      if (struct.isSetError()) {
        oprot.writeString(struct.error);
      }
      if (struct.isSetExitCode()) {
        oprot.writeI32(struct.exitCode);
      }
      if (struct.isSetSnapshotId()) {
        oprot.writeString(struct.snapshotId);
      }
      if (struct.isSetJobId()) {
        oprot.writeString(struct.jobId);
      }
      if (struct.isSetTaskId()) {
        oprot.writeString(struct.taskId);
      }
      if (struct.isSetTag()) {
        oprot.writeString(struct.tag);
      }
      if (struct.isSetBazelResult()) {
        struct.bazelResult.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RunStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.status = RunStatusState.findByValue(iprot.readI32());
      struct.setStatusIsSet(true);
      struct.runId = iprot.readString();
      struct.setRunIdIsSet(true);
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.outUri = iprot.readString();
        struct.setOutUriIsSet(true);
      }
      if (incoming.get(1)) {
        struct.errUri = iprot.readString();
        struct.setErrUriIsSet(true);
      }
      if (incoming.get(2)) {
        struct.error = iprot.readString();
        struct.setErrorIsSet(true);
      }
      if (incoming.get(3)) {
        struct.exitCode = iprot.readI32();
        struct.setExitCodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.snapshotId = iprot.readString();
        struct.setSnapshotIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.jobId = iprot.readString();
        struct.setJobIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.taskId = iprot.readString();
        struct.setTaskIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.tag = iprot.readString();
        struct.setTagIsSet(true);
      }
      if (incoming.get(8)) {
        struct.bazelResult = new ActionResult();
        struct.bazelResult.read(iprot);
        struct.setBazelResultIsSet(true);
      }
    }
  }

}

