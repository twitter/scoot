/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-12-07")
public class CloudScoot {

  public interface Iface {

    public JobId RunJob(JobDefinition job) throws InvalidRequest, CanNotScheduleNow, org.apache.thrift.TException;

    public JobStatus GetStatus(String jobId) throws InvalidRequest, ScootServerError, org.apache.thrift.TException;

    public JobStatus KillJob(String jobId) throws InvalidRequest, ScootServerError, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void RunJob(JobDefinition job, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetStatus(String jobId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void KillJob(String jobId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public JobId RunJob(JobDefinition job) throws InvalidRequest, CanNotScheduleNow, org.apache.thrift.TException
    {
      send_RunJob(job);
      return recv_RunJob();
    }

    public void send_RunJob(JobDefinition job) throws org.apache.thrift.TException
    {
      RunJob_args args = new RunJob_args();
      args.setJob(job);
      sendBase("RunJob", args);
    }

    public JobId recv_RunJob() throws InvalidRequest, CanNotScheduleNow, org.apache.thrift.TException
    {
      RunJob_result result = new RunJob_result();
      receiveBase(result, "RunJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ir != null) {
        throw result.ir;
      }
      if (result.cnsn != null) {
        throw result.cnsn;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RunJob failed: unknown result");
    }

    public JobStatus GetStatus(String jobId) throws InvalidRequest, ScootServerError, org.apache.thrift.TException
    {
      send_GetStatus(jobId);
      return recv_GetStatus();
    }

    public void send_GetStatus(String jobId) throws org.apache.thrift.TException
    {
      GetStatus_args args = new GetStatus_args();
      args.setJobId(jobId);
      sendBase("GetStatus", args);
    }

    public JobStatus recv_GetStatus() throws InvalidRequest, ScootServerError, org.apache.thrift.TException
    {
      GetStatus_result result = new GetStatus_result();
      receiveBase(result, "GetStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ir != null) {
        throw result.ir;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetStatus failed: unknown result");
    }

    public JobStatus KillJob(String jobId) throws InvalidRequest, ScootServerError, org.apache.thrift.TException
    {
      send_KillJob(jobId);
      return recv_KillJob();
    }

    public void send_KillJob(String jobId) throws org.apache.thrift.TException
    {
      KillJob_args args = new KillJob_args();
      args.setJobId(jobId);
      sendBase("KillJob", args);
    }

    public JobStatus recv_KillJob() throws InvalidRequest, ScootServerError, org.apache.thrift.TException
    {
      KillJob_result result = new KillJob_result();
      receiveBase(result, "KillJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ir != null) {
        throw result.ir;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "KillJob failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void RunJob(JobDefinition job, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RunJob_call method_call = new RunJob_call(job, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RunJob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private JobDefinition job;
      public RunJob_call(JobDefinition job, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.job = job;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RunJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RunJob_args args = new RunJob_args();
        args.setJob(job);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public JobId getResult() throws InvalidRequest, CanNotScheduleNow, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RunJob();
      }
    }

    public void GetStatus(String jobId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetStatus_call method_call = new GetStatus_call(jobId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jobId;
      public GetStatus_call(String jobId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobId = jobId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetStatus_args args = new GetStatus_args();
        args.setJobId(jobId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public JobStatus getResult() throws InvalidRequest, ScootServerError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetStatus();
      }
    }

    public void KillJob(String jobId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      KillJob_call method_call = new KillJob_call(jobId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class KillJob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jobId;
      public KillJob_call(String jobId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobId = jobId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("KillJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        KillJob_args args = new KillJob_args();
        args.setJobId(jobId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public JobStatus getResult() throws InvalidRequest, ScootServerError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_KillJob();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("RunJob", new RunJob());
      processMap.put("GetStatus", new GetStatus());
      processMap.put("KillJob", new KillJob());
      return processMap;
    }

    public static class RunJob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RunJob_args> {
      public RunJob() {
        super("RunJob");
      }

      public RunJob_args getEmptyArgsInstance() {
        return new RunJob_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public RunJob_result getResult(I iface, RunJob_args args) throws org.apache.thrift.TException {
        RunJob_result result = new RunJob_result();
        try {
          result.success = iface.RunJob(args.job);
        } catch (InvalidRequest ir) {
          result.ir = ir;
        } catch (CanNotScheduleNow cnsn) {
          result.cnsn = cnsn;
        }
        return result;
      }
    }

    public static class GetStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetStatus_args> {
      public GetStatus() {
        super("GetStatus");
      }

      public GetStatus_args getEmptyArgsInstance() {
        return new GetStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetStatus_result getResult(I iface, GetStatus_args args) throws org.apache.thrift.TException {
        GetStatus_result result = new GetStatus_result();
        try {
          result.success = iface.GetStatus(args.jobId);
        } catch (InvalidRequest ir) {
          result.ir = ir;
        } catch (ScootServerError err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class KillJob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, KillJob_args> {
      public KillJob() {
        super("KillJob");
      }

      public KillJob_args getEmptyArgsInstance() {
        return new KillJob_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public KillJob_result getResult(I iface, KillJob_args args) throws org.apache.thrift.TException {
        KillJob_result result = new KillJob_result();
        try {
          result.success = iface.KillJob(args.jobId);
        } catch (InvalidRequest ir) {
          result.ir = ir;
        } catch (ScootServerError err) {
          result.err = err;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("RunJob", new RunJob());
      processMap.put("GetStatus", new GetStatus());
      processMap.put("KillJob", new KillJob());
      return processMap;
    }

    public static class RunJob<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RunJob_args, JobId> {
      public RunJob() {
        super("RunJob");
      }

      public RunJob_args getEmptyArgsInstance() {
        return new RunJob_args();
      }

      public AsyncMethodCallback<JobId> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<JobId>() { 
          public void onComplete(JobId o) {
            RunJob_result result = new RunJob_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            RunJob_result result = new RunJob_result();
            if (e instanceof InvalidRequest) {
                        result.ir = (InvalidRequest) e;
                        result.setIrIsSet(true);
                        msg = result;
            }
            else             if (e instanceof CanNotScheduleNow) {
                        result.cnsn = (CanNotScheduleNow) e;
                        result.setCnsnIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, RunJob_args args, org.apache.thrift.async.AsyncMethodCallback<JobId> resultHandler) throws TException {
        iface.RunJob(args.job,resultHandler);
      }
    }

    public static class GetStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetStatus_args, JobStatus> {
      public GetStatus() {
        super("GetStatus");
      }

      public GetStatus_args getEmptyArgsInstance() {
        return new GetStatus_args();
      }

      public AsyncMethodCallback<JobStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<JobStatus>() { 
          public void onComplete(JobStatus o) {
            GetStatus_result result = new GetStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetStatus_result result = new GetStatus_result();
            if (e instanceof InvalidRequest) {
                        result.ir = (InvalidRequest) e;
                        result.setIrIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ScootServerError) {
                        result.err = (ScootServerError) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetStatus_args args, org.apache.thrift.async.AsyncMethodCallback<JobStatus> resultHandler) throws TException {
        iface.GetStatus(args.jobId,resultHandler);
      }
    }

    public static class KillJob<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, KillJob_args, JobStatus> {
      public KillJob() {
        super("KillJob");
      }

      public KillJob_args getEmptyArgsInstance() {
        return new KillJob_args();
      }

      public AsyncMethodCallback<JobStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<JobStatus>() { 
          public void onComplete(JobStatus o) {
            KillJob_result result = new KillJob_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            KillJob_result result = new KillJob_result();
            if (e instanceof InvalidRequest) {
                        result.ir = (InvalidRequest) e;
                        result.setIrIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ScootServerError) {
                        result.err = (ScootServerError) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, KillJob_args args, org.apache.thrift.async.AsyncMethodCallback<JobStatus> resultHandler) throws TException {
        iface.KillJob(args.jobId,resultHandler);
      }
    }

  }

  public static class RunJob_args implements org.apache.thrift.TBase<RunJob_args, RunJob_args._Fields>, java.io.Serializable, Cloneable, Comparable<RunJob_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RunJob_args");

    private static final org.apache.thrift.protocol.TField JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("job", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RunJob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RunJob_argsTupleSchemeFactory());
    }

    public JobDefinition job; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB((short)1, "job");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB
            return JOB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB, new org.apache.thrift.meta_data.FieldMetaData("job", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobDefinition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RunJob_args.class, metaDataMap);
    }

    public RunJob_args() {
    }

    public RunJob_args(
      JobDefinition job)
    {
      this();
      this.job = job;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RunJob_args(RunJob_args other) {
      if (other.isSetJob()) {
        this.job = new JobDefinition(other.job);
      }
    }

    public RunJob_args deepCopy() {
      return new RunJob_args(this);
    }

    @Override
    public void clear() {
      this.job = null;
    }

    public JobDefinition getJob() {
      return this.job;
    }

    public RunJob_args setJob(JobDefinition job) {
      this.job = job;
      return this;
    }

    public void unsetJob() {
      this.job = null;
    }

    /** Returns true if field job is set (has been assigned a value) and false otherwise */
    public boolean isSetJob() {
      return this.job != null;
    }

    public void setJobIsSet(boolean value) {
      if (!value) {
        this.job = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB:
        if (value == null) {
          unsetJob();
        } else {
          setJob((JobDefinition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB:
        return getJob();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB:
        return isSetJob();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RunJob_args)
        return this.equals((RunJob_args)that);
      return false;
    }

    public boolean equals(RunJob_args that) {
      if (that == null)
        return false;

      boolean this_present_job = true && this.isSetJob();
      boolean that_present_job = true && that.isSetJob();
      if (this_present_job || that_present_job) {
        if (!(this_present_job && that_present_job))
          return false;
        if (!this.job.equals(that.job))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_job = true && (isSetJob());
      list.add(present_job);
      if (present_job)
        list.add(job);

      return list.hashCode();
    }

    @Override
    public int compareTo(RunJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJob()).compareTo(other.isSetJob());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJob()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job, other.job);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RunJob_args(");
      boolean first = true;

      sb.append("job:");
      if (this.job == null) {
        sb.append("null");
      } else {
        sb.append(this.job);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (job != null) {
        job.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RunJob_argsStandardSchemeFactory implements SchemeFactory {
      public RunJob_argsStandardScheme getScheme() {
        return new RunJob_argsStandardScheme();
      }
    }

    private static class RunJob_argsStandardScheme extends StandardScheme<RunJob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RunJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.job = new JobDefinition();
                struct.job.read(iprot);
                struct.setJobIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RunJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.job != null) {
          oprot.writeFieldBegin(JOB_FIELD_DESC);
          struct.job.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RunJob_argsTupleSchemeFactory implements SchemeFactory {
      public RunJob_argsTupleScheme getScheme() {
        return new RunJob_argsTupleScheme();
      }
    }

    private static class RunJob_argsTupleScheme extends TupleScheme<RunJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RunJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJob()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetJob()) {
          struct.job.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RunJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.job = new JobDefinition();
          struct.job.read(iprot);
          struct.setJobIsSet(true);
        }
      }
    }

  }

  public static class RunJob_result implements org.apache.thrift.TBase<RunJob_result, RunJob_result._Fields>, java.io.Serializable, Cloneable, Comparable<RunJob_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RunJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IR_FIELD_DESC = new org.apache.thrift.protocol.TField("ir", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CNSN_FIELD_DESC = new org.apache.thrift.protocol.TField("cnsn", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RunJob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RunJob_resultTupleSchemeFactory());
    }

    public JobId success; // required
    public InvalidRequest ir; // required
    public CanNotScheduleNow cnsn; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IR((short)1, "ir"),
      CNSN((short)2, "cnsn");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IR
            return IR;
          case 2: // CNSN
            return CNSN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobId.class)));
      tmpMap.put(_Fields.IR, new org.apache.thrift.meta_data.FieldMetaData("ir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.CNSN, new org.apache.thrift.meta_data.FieldMetaData("cnsn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RunJob_result.class, metaDataMap);
    }

    public RunJob_result() {
    }

    public RunJob_result(
      JobId success,
      InvalidRequest ir,
      CanNotScheduleNow cnsn)
    {
      this();
      this.success = success;
      this.ir = ir;
      this.cnsn = cnsn;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RunJob_result(RunJob_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobId(other.success);
      }
      if (other.isSetIr()) {
        this.ir = new InvalidRequest(other.ir);
      }
      if (other.isSetCnsn()) {
        this.cnsn = new CanNotScheduleNow(other.cnsn);
      }
    }

    public RunJob_result deepCopy() {
      return new RunJob_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ir = null;
      this.cnsn = null;
    }

    public JobId getSuccess() {
      return this.success;
    }

    public RunJob_result setSuccess(JobId success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidRequest getIr() {
      return this.ir;
    }

    public RunJob_result setIr(InvalidRequest ir) {
      this.ir = ir;
      return this;
    }

    public void unsetIr() {
      this.ir = null;
    }

    /** Returns true if field ir is set (has been assigned a value) and false otherwise */
    public boolean isSetIr() {
      return this.ir != null;
    }

    public void setIrIsSet(boolean value) {
      if (!value) {
        this.ir = null;
      }
    }

    public CanNotScheduleNow getCnsn() {
      return this.cnsn;
    }

    public RunJob_result setCnsn(CanNotScheduleNow cnsn) {
      this.cnsn = cnsn;
      return this;
    }

    public void unsetCnsn() {
      this.cnsn = null;
    }

    /** Returns true if field cnsn is set (has been assigned a value) and false otherwise */
    public boolean isSetCnsn() {
      return this.cnsn != null;
    }

    public void setCnsnIsSet(boolean value) {
      if (!value) {
        this.cnsn = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobId)value);
        }
        break;

      case IR:
        if (value == null) {
          unsetIr();
        } else {
          setIr((InvalidRequest)value);
        }
        break;

      case CNSN:
        if (value == null) {
          unsetCnsn();
        } else {
          setCnsn((CanNotScheduleNow)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IR:
        return getIr();

      case CNSN:
        return getCnsn();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IR:
        return isSetIr();
      case CNSN:
        return isSetCnsn();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RunJob_result)
        return this.equals((RunJob_result)that);
      return false;
    }

    public boolean equals(RunJob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ir = true && this.isSetIr();
      boolean that_present_ir = true && that.isSetIr();
      if (this_present_ir || that_present_ir) {
        if (!(this_present_ir && that_present_ir))
          return false;
        if (!this.ir.equals(that.ir))
          return false;
      }

      boolean this_present_cnsn = true && this.isSetCnsn();
      boolean that_present_cnsn = true && that.isSetCnsn();
      if (this_present_cnsn || that_present_cnsn) {
        if (!(this_present_cnsn && that_present_cnsn))
          return false;
        if (!this.cnsn.equals(that.cnsn))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ir = true && (isSetIr());
      list.add(present_ir);
      if (present_ir)
        list.add(ir);

      boolean present_cnsn = true && (isSetCnsn());
      list.add(present_cnsn);
      if (present_cnsn)
        list.add(cnsn);

      return list.hashCode();
    }

    @Override
    public int compareTo(RunJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIr()).compareTo(other.isSetIr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ir, other.ir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCnsn()).compareTo(other.isSetCnsn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCnsn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnsn, other.cnsn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RunJob_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ir:");
      if (this.ir == null) {
        sb.append("null");
      } else {
        sb.append(this.ir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cnsn:");
      if (this.cnsn == null) {
        sb.append("null");
      } else {
        sb.append(this.cnsn);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RunJob_resultStandardSchemeFactory implements SchemeFactory {
      public RunJob_resultStandardScheme getScheme() {
        return new RunJob_resultStandardScheme();
      }
    }

    private static class RunJob_resultStandardScheme extends StandardScheme<RunJob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RunJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobId();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ir = new InvalidRequest();
                struct.ir.read(iprot);
                struct.setIrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CNSN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cnsn = new CanNotScheduleNow();
                struct.cnsn.read(iprot);
                struct.setCnsnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RunJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ir != null) {
          oprot.writeFieldBegin(IR_FIELD_DESC);
          struct.ir.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.cnsn != null) {
          oprot.writeFieldBegin(CNSN_FIELD_DESC);
          struct.cnsn.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RunJob_resultTupleSchemeFactory implements SchemeFactory {
      public RunJob_resultTupleScheme getScheme() {
        return new RunJob_resultTupleScheme();
      }
    }

    private static class RunJob_resultTupleScheme extends TupleScheme<RunJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RunJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIr()) {
          optionals.set(1);
        }
        if (struct.isSetCnsn()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIr()) {
          struct.ir.write(oprot);
        }
        if (struct.isSetCnsn()) {
          struct.cnsn.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RunJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new JobId();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ir = new InvalidRequest();
          struct.ir.read(iprot);
          struct.setIrIsSet(true);
        }
        if (incoming.get(2)) {
          struct.cnsn = new CanNotScheduleNow();
          struct.cnsn.read(iprot);
          struct.setCnsnIsSet(true);
        }
      }
    }

  }

  public static class GetStatus_args implements org.apache.thrift.TBase<GetStatus_args, GetStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetStatus_args");

    private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetStatus_argsTupleSchemeFactory());
    }

    public String jobId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_ID((short)1, "jobId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_ID
            return JOB_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetStatus_args.class, metaDataMap);
    }

    public GetStatus_args() {
    }

    public GetStatus_args(
      String jobId)
    {
      this();
      this.jobId = jobId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetStatus_args(GetStatus_args other) {
      if (other.isSetJobId()) {
        this.jobId = other.jobId;
      }
    }

    public GetStatus_args deepCopy() {
      return new GetStatus_args(this);
    }

    @Override
    public void clear() {
      this.jobId = null;
    }

    public String getJobId() {
      return this.jobId;
    }

    public GetStatus_args setJobId(String jobId) {
      this.jobId = jobId;
      return this;
    }

    public void unsetJobId() {
      this.jobId = null;
    }

    /** Returns true if field jobId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobId() {
      return this.jobId != null;
    }

    public void setJobIdIsSet(boolean value) {
      if (!value) {
        this.jobId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_ID:
        if (value == null) {
          unsetJobId();
        } else {
          setJobId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_ID:
        return getJobId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_ID:
        return isSetJobId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetStatus_args)
        return this.equals((GetStatus_args)that);
      return false;
    }

    public boolean equals(GetStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_jobId = true && this.isSetJobId();
      boolean that_present_jobId = true && that.isSetJobId();
      if (this_present_jobId || that_present_jobId) {
        if (!(this_present_jobId && that_present_jobId))
          return false;
        if (!this.jobId.equals(that.jobId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobId = true && (isSetJobId());
      list.add(present_jobId);
      if (present_jobId)
        list.add(jobId);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobId()).compareTo(other.isSetJobId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobId, other.jobId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetStatus_args(");
      boolean first = true;

      sb.append("jobId:");
      if (this.jobId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetStatus_argsStandardSchemeFactory implements SchemeFactory {
      public GetStatus_argsStandardScheme getScheme() {
        return new GetStatus_argsStandardScheme();
      }
    }

    private static class GetStatus_argsStandardScheme extends StandardScheme<GetStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobId = iprot.readString();
                struct.setJobIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobId != null) {
          oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
          oprot.writeString(struct.jobId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetStatus_argsTupleSchemeFactory implements SchemeFactory {
      public GetStatus_argsTupleScheme getScheme() {
        return new GetStatus_argsTupleScheme();
      }
    }

    private static class GetStatus_argsTupleScheme extends TupleScheme<GetStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJobId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetJobId()) {
          oprot.writeString(struct.jobId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.jobId = iprot.readString();
          struct.setJobIdIsSet(true);
        }
      }
    }

  }

  public static class GetStatus_result implements org.apache.thrift.TBase<GetStatus_result, GetStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IR_FIELD_DESC = new org.apache.thrift.protocol.TField("ir", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetStatus_resultTupleSchemeFactory());
    }

    public JobStatus success; // required
    public InvalidRequest ir; // required
    public ScootServerError err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IR((short)1, "ir"),
      ERR((short)2, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IR
            return IR;
          case 2: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobStatus.class)));
      tmpMap.put(_Fields.IR, new org.apache.thrift.meta_data.FieldMetaData("ir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetStatus_result.class, metaDataMap);
    }

    public GetStatus_result() {
    }

    public GetStatus_result(
      JobStatus success,
      InvalidRequest ir,
      ScootServerError err)
    {
      this();
      this.success = success;
      this.ir = ir;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetStatus_result(GetStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobStatus(other.success);
      }
      if (other.isSetIr()) {
        this.ir = new InvalidRequest(other.ir);
      }
      if (other.isSetErr()) {
        this.err = new ScootServerError(other.err);
      }
    }

    public GetStatus_result deepCopy() {
      return new GetStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ir = null;
      this.err = null;
    }

    public JobStatus getSuccess() {
      return this.success;
    }

    public GetStatus_result setSuccess(JobStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidRequest getIr() {
      return this.ir;
    }

    public GetStatus_result setIr(InvalidRequest ir) {
      this.ir = ir;
      return this;
    }

    public void unsetIr() {
      this.ir = null;
    }

    /** Returns true if field ir is set (has been assigned a value) and false otherwise */
    public boolean isSetIr() {
      return this.ir != null;
    }

    public void setIrIsSet(boolean value) {
      if (!value) {
        this.ir = null;
      }
    }

    public ScootServerError getErr() {
      return this.err;
    }

    public GetStatus_result setErr(ScootServerError err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobStatus)value);
        }
        break;

      case IR:
        if (value == null) {
          unsetIr();
        } else {
          setIr((InvalidRequest)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((ScootServerError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IR:
        return getIr();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IR:
        return isSetIr();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetStatus_result)
        return this.equals((GetStatus_result)that);
      return false;
    }

    public boolean equals(GetStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ir = true && this.isSetIr();
      boolean that_present_ir = true && that.isSetIr();
      if (this_present_ir || that_present_ir) {
        if (!(this_present_ir && that_present_ir))
          return false;
        if (!this.ir.equals(that.ir))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ir = true && (isSetIr());
      list.add(present_ir);
      if (present_ir)
        list.add(ir);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIr()).compareTo(other.isSetIr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ir, other.ir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ir:");
      if (this.ir == null) {
        sb.append("null");
      } else {
        sb.append(this.ir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetStatus_resultStandardSchemeFactory implements SchemeFactory {
      public GetStatus_resultStandardScheme getScheme() {
        return new GetStatus_resultStandardScheme();
      }
    }

    private static class GetStatus_resultStandardScheme extends StandardScheme<GetStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobStatus();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ir = new InvalidRequest();
                struct.ir.read(iprot);
                struct.setIrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new ScootServerError();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ir != null) {
          oprot.writeFieldBegin(IR_FIELD_DESC);
          struct.ir.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetStatus_resultTupleSchemeFactory implements SchemeFactory {
      public GetStatus_resultTupleScheme getScheme() {
        return new GetStatus_resultTupleScheme();
      }
    }

    private static class GetStatus_resultTupleScheme extends TupleScheme<GetStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIr()) {
          optionals.set(1);
        }
        if (struct.isSetErr()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIr()) {
          struct.ir.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new JobStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ir = new InvalidRequest();
          struct.ir.read(iprot);
          struct.setIrIsSet(true);
        }
        if (incoming.get(2)) {
          struct.err = new ScootServerError();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class KillJob_args implements org.apache.thrift.TBase<KillJob_args, KillJob_args._Fields>, java.io.Serializable, Cloneable, Comparable<KillJob_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KillJob_args");

    private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new KillJob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new KillJob_argsTupleSchemeFactory());
    }

    public String jobId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_ID((short)1, "jobId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_ID
            return JOB_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KillJob_args.class, metaDataMap);
    }

    public KillJob_args() {
    }

    public KillJob_args(
      String jobId)
    {
      this();
      this.jobId = jobId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public KillJob_args(KillJob_args other) {
      if (other.isSetJobId()) {
        this.jobId = other.jobId;
      }
    }

    public KillJob_args deepCopy() {
      return new KillJob_args(this);
    }

    @Override
    public void clear() {
      this.jobId = null;
    }

    public String getJobId() {
      return this.jobId;
    }

    public KillJob_args setJobId(String jobId) {
      this.jobId = jobId;
      return this;
    }

    public void unsetJobId() {
      this.jobId = null;
    }

    /** Returns true if field jobId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobId() {
      return this.jobId != null;
    }

    public void setJobIdIsSet(boolean value) {
      if (!value) {
        this.jobId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_ID:
        if (value == null) {
          unsetJobId();
        } else {
          setJobId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_ID:
        return getJobId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_ID:
        return isSetJobId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof KillJob_args)
        return this.equals((KillJob_args)that);
      return false;
    }

    public boolean equals(KillJob_args that) {
      if (that == null)
        return false;

      boolean this_present_jobId = true && this.isSetJobId();
      boolean that_present_jobId = true && that.isSetJobId();
      if (this_present_jobId || that_present_jobId) {
        if (!(this_present_jobId && that_present_jobId))
          return false;
        if (!this.jobId.equals(that.jobId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobId = true && (isSetJobId());
      list.add(present_jobId);
      if (present_jobId)
        list.add(jobId);

      return list.hashCode();
    }

    @Override
    public int compareTo(KillJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobId()).compareTo(other.isSetJobId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobId, other.jobId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("KillJob_args(");
      boolean first = true;

      sb.append("jobId:");
      if (this.jobId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class KillJob_argsStandardSchemeFactory implements SchemeFactory {
      public KillJob_argsStandardScheme getScheme() {
        return new KillJob_argsStandardScheme();
      }
    }

    private static class KillJob_argsStandardScheme extends StandardScheme<KillJob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, KillJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobId = iprot.readString();
                struct.setJobIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, KillJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobId != null) {
          oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
          oprot.writeString(struct.jobId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class KillJob_argsTupleSchemeFactory implements SchemeFactory {
      public KillJob_argsTupleScheme getScheme() {
        return new KillJob_argsTupleScheme();
      }
    }

    private static class KillJob_argsTupleScheme extends TupleScheme<KillJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, KillJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJobId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetJobId()) {
          oprot.writeString(struct.jobId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, KillJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.jobId = iprot.readString();
          struct.setJobIdIsSet(true);
        }
      }
    }

  }

  public static class KillJob_result implements org.apache.thrift.TBase<KillJob_result, KillJob_result._Fields>, java.io.Serializable, Cloneable, Comparable<KillJob_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KillJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IR_FIELD_DESC = new org.apache.thrift.protocol.TField("ir", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new KillJob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new KillJob_resultTupleSchemeFactory());
    }

    public JobStatus success; // required
    public InvalidRequest ir; // required
    public ScootServerError err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IR((short)1, "ir"),
      ERR((short)2, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IR
            return IR;
          case 2: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobStatus.class)));
      tmpMap.put(_Fields.IR, new org.apache.thrift.meta_data.FieldMetaData("ir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KillJob_result.class, metaDataMap);
    }

    public KillJob_result() {
    }

    public KillJob_result(
      JobStatus success,
      InvalidRequest ir,
      ScootServerError err)
    {
      this();
      this.success = success;
      this.ir = ir;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public KillJob_result(KillJob_result other) {
      if (other.isSetSuccess()) {
        this.success = new JobStatus(other.success);
      }
      if (other.isSetIr()) {
        this.ir = new InvalidRequest(other.ir);
      }
      if (other.isSetErr()) {
        this.err = new ScootServerError(other.err);
      }
    }

    public KillJob_result deepCopy() {
      return new KillJob_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ir = null;
      this.err = null;
    }

    public JobStatus getSuccess() {
      return this.success;
    }

    public KillJob_result setSuccess(JobStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidRequest getIr() {
      return this.ir;
    }

    public KillJob_result setIr(InvalidRequest ir) {
      this.ir = ir;
      return this;
    }

    public void unsetIr() {
      this.ir = null;
    }

    /** Returns true if field ir is set (has been assigned a value) and false otherwise */
    public boolean isSetIr() {
      return this.ir != null;
    }

    public void setIrIsSet(boolean value) {
      if (!value) {
        this.ir = null;
      }
    }

    public ScootServerError getErr() {
      return this.err;
    }

    public KillJob_result setErr(ScootServerError err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JobStatus)value);
        }
        break;

      case IR:
        if (value == null) {
          unsetIr();
        } else {
          setIr((InvalidRequest)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((ScootServerError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IR:
        return getIr();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IR:
        return isSetIr();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof KillJob_result)
        return this.equals((KillJob_result)that);
      return false;
    }

    public boolean equals(KillJob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ir = true && this.isSetIr();
      boolean that_present_ir = true && that.isSetIr();
      if (this_present_ir || that_present_ir) {
        if (!(this_present_ir && that_present_ir))
          return false;
        if (!this.ir.equals(that.ir))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ir = true && (isSetIr());
      list.add(present_ir);
      if (present_ir)
        list.add(ir);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(KillJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIr()).compareTo(other.isSetIr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ir, other.ir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("KillJob_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ir:");
      if (this.ir == null) {
        sb.append("null");
      } else {
        sb.append(this.ir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class KillJob_resultStandardSchemeFactory implements SchemeFactory {
      public KillJob_resultStandardScheme getScheme() {
        return new KillJob_resultStandardScheme();
      }
    }

    private static class KillJob_resultStandardScheme extends StandardScheme<KillJob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, KillJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JobStatus();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ir = new InvalidRequest();
                struct.ir.read(iprot);
                struct.setIrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new ScootServerError();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, KillJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ir != null) {
          oprot.writeFieldBegin(IR_FIELD_DESC);
          struct.ir.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class KillJob_resultTupleSchemeFactory implements SchemeFactory {
      public KillJob_resultTupleScheme getScheme() {
        return new KillJob_resultTupleScheme();
      }
    }

    private static class KillJob_resultTupleScheme extends TupleScheme<KillJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, KillJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIr()) {
          optionals.set(1);
        }
        if (struct.isSetErr()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIr()) {
          struct.ir.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, KillJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new JobStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ir = new InvalidRequest();
          struct.ir.read(iprot);
          struct.setIrIsSet(true);
        }
        if (incoming.get(2)) {
          struct.err = new ScootServerError();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

}
