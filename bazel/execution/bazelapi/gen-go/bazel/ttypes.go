// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package bazel

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

// Attributes:
//  - Hash
//  - SizeBytes
type Digest struct {
	Hash      *string `thrift:"hash,1" json:"hash,omitempty"`
	SizeBytes *int64  `thrift:"sizeBytes,2" json:"sizeBytes,omitempty"`
}

func NewDigest() *Digest {
	return &Digest{}
}

var Digest_Hash_DEFAULT string

func (p *Digest) GetHash() string {
	if !p.IsSetHash() {
		return Digest_Hash_DEFAULT
	}
	return *p.Hash
}

var Digest_SizeBytes_DEFAULT int64

func (p *Digest) GetSizeBytes() int64 {
	if !p.IsSetSizeBytes() {
		return Digest_SizeBytes_DEFAULT
	}
	return *p.SizeBytes
}
func (p *Digest) IsSetHash() bool {
	return p.Hash != nil
}

func (p *Digest) IsSetSizeBytes() bool {
	return p.SizeBytes != nil
}

func (p *Digest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Digest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Hash = &v
	}
	return nil
}

func (p *Digest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SizeBytes = &v
	}
	return nil
}

func (p *Digest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Digest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Digest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHash() {
		if err := oprot.WriteFieldBegin("hash", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hash: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Hash)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hash (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hash: ", p), err)
		}
	}
	return err
}

func (p *Digest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSizeBytes() {
		if err := oprot.WriteFieldBegin("sizeBytes", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sizeBytes: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SizeBytes)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sizeBytes (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sizeBytes: ", p), err)
		}
	}
	return err
}

func (p *Digest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Digest(%+v)", *p)
}

// Attributes:
//  - Seconds
//  - Nanos
type Timestamp struct {
	Seconds *int64 `thrift:"seconds,1" json:"seconds,omitempty"`
	Nanos   *int32 `thrift:"nanos,2" json:"nanos,omitempty"`
}

func NewTimestamp() *Timestamp {
	return &Timestamp{}
}

var Timestamp_Seconds_DEFAULT int64

func (p *Timestamp) GetSeconds() int64 {
	if !p.IsSetSeconds() {
		return Timestamp_Seconds_DEFAULT
	}
	return *p.Seconds
}

var Timestamp_Nanos_DEFAULT int32

func (p *Timestamp) GetNanos() int32 {
	if !p.IsSetNanos() {
		return Timestamp_Nanos_DEFAULT
	}
	return *p.Nanos
}
func (p *Timestamp) IsSetSeconds() bool {
	return p.Seconds != nil
}

func (p *Timestamp) IsSetNanos() bool {
	return p.Nanos != nil
}

func (p *Timestamp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Timestamp) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Seconds = &v
	}
	return nil
}

func (p *Timestamp) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Nanos = &v
	}
	return nil
}

func (p *Timestamp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Timestamp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Timestamp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSeconds() {
		if err := oprot.WriteFieldBegin("seconds", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seconds: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Seconds)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.seconds (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seconds: ", p), err)
		}
	}
	return err
}

func (p *Timestamp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNanos() {
		if err := oprot.WriteFieldBegin("nanos", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nanos: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Nanos)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nanos (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nanos: ", p), err)
		}
	}
	return err
}

func (p *Timestamp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Timestamp(%+v)", *p)
}

// Attributes:
//  - Worker
//  - QueuedTimestamp
//  - WorkerStartTimestamp
//  - WorkerCompletedTimestamp
//  - InputFetchStartTimestamp
//  - InputFetchCompletedTimestamp
//  - ExecutionStartTimestamp
//  - ExecutionCompletedTimestamp
//  - OutputUploadStartTimestamp
//  - OutputUploadCompletedTimestamp
type ExecutedActionMetadata struct {
	Worker                         *string    `thrift:"worker,1" json:"worker,omitempty"`
	QueuedTimestamp                *Timestamp `thrift:"queuedTimestamp,2" json:"queuedTimestamp,omitempty"`
	WorkerStartTimestamp           *Timestamp `thrift:"workerStartTimestamp,3" json:"workerStartTimestamp,omitempty"`
	WorkerCompletedTimestamp       *Timestamp `thrift:"workerCompletedTimestamp,4" json:"workerCompletedTimestamp,omitempty"`
	InputFetchStartTimestamp       *Timestamp `thrift:"inputFetchStartTimestamp,5" json:"inputFetchStartTimestamp,omitempty"`
	InputFetchCompletedTimestamp   *Timestamp `thrift:"inputFetchCompletedTimestamp,6" json:"inputFetchCompletedTimestamp,omitempty"`
	ExecutionStartTimestamp        *Timestamp `thrift:"executionStartTimestamp,7" json:"executionStartTimestamp,omitempty"`
	ExecutionCompletedTimestamp    *Timestamp `thrift:"executionCompletedTimestamp,8" json:"executionCompletedTimestamp,omitempty"`
	OutputUploadStartTimestamp     *Timestamp `thrift:"outputUploadStartTimestamp,9" json:"outputUploadStartTimestamp,omitempty"`
	OutputUploadCompletedTimestamp *Timestamp `thrift:"outputUploadCompletedTimestamp,10" json:"outputUploadCompletedTimestamp,omitempty"`
}

func NewExecutedActionMetadata() *ExecutedActionMetadata {
	return &ExecutedActionMetadata{}
}

var ExecutedActionMetadata_Worker_DEFAULT string

func (p *ExecutedActionMetadata) GetWorker() string {
	if !p.IsSetWorker() {
		return ExecutedActionMetadata_Worker_DEFAULT
	}
	return *p.Worker
}

var ExecutedActionMetadata_QueuedTimestamp_DEFAULT *Timestamp

func (p *ExecutedActionMetadata) GetQueuedTimestamp() *Timestamp {
	if !p.IsSetQueuedTimestamp() {
		return ExecutedActionMetadata_QueuedTimestamp_DEFAULT
	}
	return p.QueuedTimestamp
}

var ExecutedActionMetadata_WorkerStartTimestamp_DEFAULT *Timestamp

func (p *ExecutedActionMetadata) GetWorkerStartTimestamp() *Timestamp {
	if !p.IsSetWorkerStartTimestamp() {
		return ExecutedActionMetadata_WorkerStartTimestamp_DEFAULT
	}
	return p.WorkerStartTimestamp
}

var ExecutedActionMetadata_WorkerCompletedTimestamp_DEFAULT *Timestamp

func (p *ExecutedActionMetadata) GetWorkerCompletedTimestamp() *Timestamp {
	if !p.IsSetWorkerCompletedTimestamp() {
		return ExecutedActionMetadata_WorkerCompletedTimestamp_DEFAULT
	}
	return p.WorkerCompletedTimestamp
}

var ExecutedActionMetadata_InputFetchStartTimestamp_DEFAULT *Timestamp

func (p *ExecutedActionMetadata) GetInputFetchStartTimestamp() *Timestamp {
	if !p.IsSetInputFetchStartTimestamp() {
		return ExecutedActionMetadata_InputFetchStartTimestamp_DEFAULT
	}
	return p.InputFetchStartTimestamp
}

var ExecutedActionMetadata_InputFetchCompletedTimestamp_DEFAULT *Timestamp

func (p *ExecutedActionMetadata) GetInputFetchCompletedTimestamp() *Timestamp {
	if !p.IsSetInputFetchCompletedTimestamp() {
		return ExecutedActionMetadata_InputFetchCompletedTimestamp_DEFAULT
	}
	return p.InputFetchCompletedTimestamp
}

var ExecutedActionMetadata_ExecutionStartTimestamp_DEFAULT *Timestamp

func (p *ExecutedActionMetadata) GetExecutionStartTimestamp() *Timestamp {
	if !p.IsSetExecutionStartTimestamp() {
		return ExecutedActionMetadata_ExecutionStartTimestamp_DEFAULT
	}
	return p.ExecutionStartTimestamp
}

var ExecutedActionMetadata_ExecutionCompletedTimestamp_DEFAULT *Timestamp

func (p *ExecutedActionMetadata) GetExecutionCompletedTimestamp() *Timestamp {
	if !p.IsSetExecutionCompletedTimestamp() {
		return ExecutedActionMetadata_ExecutionCompletedTimestamp_DEFAULT
	}
	return p.ExecutionCompletedTimestamp
}

var ExecutedActionMetadata_OutputUploadStartTimestamp_DEFAULT *Timestamp

func (p *ExecutedActionMetadata) GetOutputUploadStartTimestamp() *Timestamp {
	if !p.IsSetOutputUploadStartTimestamp() {
		return ExecutedActionMetadata_OutputUploadStartTimestamp_DEFAULT
	}
	return p.OutputUploadStartTimestamp
}

var ExecutedActionMetadata_OutputUploadCompletedTimestamp_DEFAULT *Timestamp

func (p *ExecutedActionMetadata) GetOutputUploadCompletedTimestamp() *Timestamp {
	if !p.IsSetOutputUploadCompletedTimestamp() {
		return ExecutedActionMetadata_OutputUploadCompletedTimestamp_DEFAULT
	}
	return p.OutputUploadCompletedTimestamp
}
func (p *ExecutedActionMetadata) IsSetWorker() bool {
	return p.Worker != nil
}

func (p *ExecutedActionMetadata) IsSetQueuedTimestamp() bool {
	return p.QueuedTimestamp != nil
}

func (p *ExecutedActionMetadata) IsSetWorkerStartTimestamp() bool {
	return p.WorkerStartTimestamp != nil
}

func (p *ExecutedActionMetadata) IsSetWorkerCompletedTimestamp() bool {
	return p.WorkerCompletedTimestamp != nil
}

func (p *ExecutedActionMetadata) IsSetInputFetchStartTimestamp() bool {
	return p.InputFetchStartTimestamp != nil
}

func (p *ExecutedActionMetadata) IsSetInputFetchCompletedTimestamp() bool {
	return p.InputFetchCompletedTimestamp != nil
}

func (p *ExecutedActionMetadata) IsSetExecutionStartTimestamp() bool {
	return p.ExecutionStartTimestamp != nil
}

func (p *ExecutedActionMetadata) IsSetExecutionCompletedTimestamp() bool {
	return p.ExecutionCompletedTimestamp != nil
}

func (p *ExecutedActionMetadata) IsSetOutputUploadStartTimestamp() bool {
	return p.OutputUploadStartTimestamp != nil
}

func (p *ExecutedActionMetadata) IsSetOutputUploadCompletedTimestamp() bool {
	return p.OutputUploadCompletedTimestamp != nil
}

func (p *ExecutedActionMetadata) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ExecutedActionMetadata) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Worker = &v
	}
	return nil
}

func (p *ExecutedActionMetadata) readField2(iprot thrift.TProtocol) error {
	p.QueuedTimestamp = &Timestamp{}
	if err := p.QueuedTimestamp.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.QueuedTimestamp), err)
	}
	return nil
}

func (p *ExecutedActionMetadata) readField3(iprot thrift.TProtocol) error {
	p.WorkerStartTimestamp = &Timestamp{}
	if err := p.WorkerStartTimestamp.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WorkerStartTimestamp), err)
	}
	return nil
}

func (p *ExecutedActionMetadata) readField4(iprot thrift.TProtocol) error {
	p.WorkerCompletedTimestamp = &Timestamp{}
	if err := p.WorkerCompletedTimestamp.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WorkerCompletedTimestamp), err)
	}
	return nil
}

func (p *ExecutedActionMetadata) readField5(iprot thrift.TProtocol) error {
	p.InputFetchStartTimestamp = &Timestamp{}
	if err := p.InputFetchStartTimestamp.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InputFetchStartTimestamp), err)
	}
	return nil
}

func (p *ExecutedActionMetadata) readField6(iprot thrift.TProtocol) error {
	p.InputFetchCompletedTimestamp = &Timestamp{}
	if err := p.InputFetchCompletedTimestamp.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InputFetchCompletedTimestamp), err)
	}
	return nil
}

func (p *ExecutedActionMetadata) readField7(iprot thrift.TProtocol) error {
	p.ExecutionStartTimestamp = &Timestamp{}
	if err := p.ExecutionStartTimestamp.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExecutionStartTimestamp), err)
	}
	return nil
}

func (p *ExecutedActionMetadata) readField8(iprot thrift.TProtocol) error {
	p.ExecutionCompletedTimestamp = &Timestamp{}
	if err := p.ExecutionCompletedTimestamp.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExecutionCompletedTimestamp), err)
	}
	return nil
}

func (p *ExecutedActionMetadata) readField9(iprot thrift.TProtocol) error {
	p.OutputUploadStartTimestamp = &Timestamp{}
	if err := p.OutputUploadStartTimestamp.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OutputUploadStartTimestamp), err)
	}
	return nil
}

func (p *ExecutedActionMetadata) readField10(iprot thrift.TProtocol) error {
	p.OutputUploadCompletedTimestamp = &Timestamp{}
	if err := p.OutputUploadCompletedTimestamp.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OutputUploadCompletedTimestamp), err)
	}
	return nil
}

func (p *ExecutedActionMetadata) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExecutedActionMetadata"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExecutedActionMetadata) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorker() {
		if err := oprot.WriteFieldBegin("worker", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:worker: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Worker)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.worker (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:worker: ", p), err)
		}
	}
	return err
}

func (p *ExecutedActionMetadata) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueuedTimestamp() {
		if err := oprot.WriteFieldBegin("queuedTimestamp", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:queuedTimestamp: ", p), err)
		}
		if err := p.QueuedTimestamp.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.QueuedTimestamp), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:queuedTimestamp: ", p), err)
		}
	}
	return err
}

func (p *ExecutedActionMetadata) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkerStartTimestamp() {
		if err := oprot.WriteFieldBegin("workerStartTimestamp", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:workerStartTimestamp: ", p), err)
		}
		if err := p.WorkerStartTimestamp.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WorkerStartTimestamp), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:workerStartTimestamp: ", p), err)
		}
	}
	return err
}

func (p *ExecutedActionMetadata) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkerCompletedTimestamp() {
		if err := oprot.WriteFieldBegin("workerCompletedTimestamp", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:workerCompletedTimestamp: ", p), err)
		}
		if err := p.WorkerCompletedTimestamp.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WorkerCompletedTimestamp), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:workerCompletedTimestamp: ", p), err)
		}
	}
	return err
}

func (p *ExecutedActionMetadata) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputFetchStartTimestamp() {
		if err := oprot.WriteFieldBegin("inputFetchStartTimestamp", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:inputFetchStartTimestamp: ", p), err)
		}
		if err := p.InputFetchStartTimestamp.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InputFetchStartTimestamp), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:inputFetchStartTimestamp: ", p), err)
		}
	}
	return err
}

func (p *ExecutedActionMetadata) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputFetchCompletedTimestamp() {
		if err := oprot.WriteFieldBegin("inputFetchCompletedTimestamp", thrift.STRUCT, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:inputFetchCompletedTimestamp: ", p), err)
		}
		if err := p.InputFetchCompletedTimestamp.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InputFetchCompletedTimestamp), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:inputFetchCompletedTimestamp: ", p), err)
		}
	}
	return err
}

func (p *ExecutedActionMetadata) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetExecutionStartTimestamp() {
		if err := oprot.WriteFieldBegin("executionStartTimestamp", thrift.STRUCT, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:executionStartTimestamp: ", p), err)
		}
		if err := p.ExecutionStartTimestamp.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExecutionStartTimestamp), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:executionStartTimestamp: ", p), err)
		}
	}
	return err
}

func (p *ExecutedActionMetadata) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetExecutionCompletedTimestamp() {
		if err := oprot.WriteFieldBegin("executionCompletedTimestamp", thrift.STRUCT, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:executionCompletedTimestamp: ", p), err)
		}
		if err := p.ExecutionCompletedTimestamp.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExecutionCompletedTimestamp), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:executionCompletedTimestamp: ", p), err)
		}
	}
	return err
}

func (p *ExecutedActionMetadata) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputUploadStartTimestamp() {
		if err := oprot.WriteFieldBegin("outputUploadStartTimestamp", thrift.STRUCT, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:outputUploadStartTimestamp: ", p), err)
		}
		if err := p.OutputUploadStartTimestamp.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OutputUploadStartTimestamp), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:outputUploadStartTimestamp: ", p), err)
		}
	}
	return err
}

func (p *ExecutedActionMetadata) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputUploadCompletedTimestamp() {
		if err := oprot.WriteFieldBegin("outputUploadCompletedTimestamp", thrift.STRUCT, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:outputUploadCompletedTimestamp: ", p), err)
		}
		if err := p.OutputUploadCompletedTimestamp.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OutputUploadCompletedTimestamp), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:outputUploadCompletedTimestamp: ", p), err)
		}
	}
	return err
}

func (p *ExecutedActionMetadata) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecutedActionMetadata(%+v)", *p)
}

// Attributes:
//  - Priority
type ExecutionPolicy struct {
	Priority *int32 `thrift:"priority,1" json:"priority,omitempty"`
}

func NewExecutionPolicy() *ExecutionPolicy {
	return &ExecutionPolicy{}
}

var ExecutionPolicy_Priority_DEFAULT int32

func (p *ExecutionPolicy) GetPriority() int32 {
	if !p.IsSetPriority() {
		return ExecutionPolicy_Priority_DEFAULT
	}
	return *p.Priority
}
func (p *ExecutionPolicy) IsSetPriority() bool {
	return p.Priority != nil
}

func (p *ExecutionPolicy) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ExecutionPolicy) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Priority = &v
	}
	return nil
}

func (p *ExecutionPolicy) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExecutionPolicy"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExecutionPolicy) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPriority() {
		if err := oprot.WriteFieldBegin("priority", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:priority: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Priority)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.priority (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:priority: ", p), err)
		}
	}
	return err
}

func (p *ExecutionPolicy) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecutionPolicy(%+v)", *p)
}

// Attributes:
//  - Priority
type ResultsCachePolicy struct {
	Priority *int32 `thrift:"priority,1" json:"priority,omitempty"`
}

func NewResultsCachePolicy() *ResultsCachePolicy {
	return &ResultsCachePolicy{}
}

var ResultsCachePolicy_Priority_DEFAULT int32

func (p *ResultsCachePolicy) GetPriority() int32 {
	if !p.IsSetPriority() {
		return ResultsCachePolicy_Priority_DEFAULT
	}
	return *p.Priority
}
func (p *ResultsCachePolicy) IsSetPriority() bool {
	return p.Priority != nil
}

func (p *ResultsCachePolicy) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ResultsCachePolicy) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Priority = &v
	}
	return nil
}

func (p *ResultsCachePolicy) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ResultsCachePolicy"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ResultsCachePolicy) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPriority() {
		if err := oprot.WriteFieldBegin("priority", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:priority: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Priority)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.priority (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:priority: ", p), err)
		}
	}
	return err
}

func (p *ResultsCachePolicy) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResultsCachePolicy(%+v)", *p)
}

// Attributes:
//  - InstanceName
//  - SkipCache
//  - ActionDigest
//  - ExecutionPolicy
//  - ResultsCachePolicy
//  - ExecutionMetadata
type ExecuteRequest struct {
	InstanceName       *string                 `thrift:"instanceName,1" json:"instanceName,omitempty"`
	SkipCache          *bool                   `thrift:"skipCache,2" json:"skipCache,omitempty"`
	ActionDigest       *Digest                 `thrift:"actionDigest,3" json:"actionDigest,omitempty"`
	ExecutionPolicy    *ExecutionPolicy        `thrift:"executionPolicy,4" json:"executionPolicy,omitempty"`
	ResultsCachePolicy *ResultsCachePolicy     `thrift:"resultsCachePolicy,5" json:"resultsCachePolicy,omitempty"`
	ExecutionMetadata  *ExecutedActionMetadata `thrift:"executionMetadata,6" json:"executionMetadata,omitempty"`
}

func NewExecuteRequest() *ExecuteRequest {
	return &ExecuteRequest{}
}

var ExecuteRequest_InstanceName_DEFAULT string

func (p *ExecuteRequest) GetInstanceName() string {
	if !p.IsSetInstanceName() {
		return ExecuteRequest_InstanceName_DEFAULT
	}
	return *p.InstanceName
}

var ExecuteRequest_SkipCache_DEFAULT bool

func (p *ExecuteRequest) GetSkipCache() bool {
	if !p.IsSetSkipCache() {
		return ExecuteRequest_SkipCache_DEFAULT
	}
	return *p.SkipCache
}

var ExecuteRequest_ActionDigest_DEFAULT *Digest

func (p *ExecuteRequest) GetActionDigest() *Digest {
	if !p.IsSetActionDigest() {
		return ExecuteRequest_ActionDigest_DEFAULT
	}
	return p.ActionDigest
}

var ExecuteRequest_ExecutionPolicy_DEFAULT *ExecutionPolicy

func (p *ExecuteRequest) GetExecutionPolicy() *ExecutionPolicy {
	if !p.IsSetExecutionPolicy() {
		return ExecuteRequest_ExecutionPolicy_DEFAULT
	}
	return p.ExecutionPolicy
}

var ExecuteRequest_ResultsCachePolicy_DEFAULT *ResultsCachePolicy

func (p *ExecuteRequest) GetResultsCachePolicy() *ResultsCachePolicy {
	if !p.IsSetResultsCachePolicy() {
		return ExecuteRequest_ResultsCachePolicy_DEFAULT
	}
	return p.ResultsCachePolicy
}

var ExecuteRequest_ExecutionMetadata_DEFAULT *ExecutedActionMetadata

func (p *ExecuteRequest) GetExecutionMetadata() *ExecutedActionMetadata {
	if !p.IsSetExecutionMetadata() {
		return ExecuteRequest_ExecutionMetadata_DEFAULT
	}
	return p.ExecutionMetadata
}
func (p *ExecuteRequest) IsSetInstanceName() bool {
	return p.InstanceName != nil
}

func (p *ExecuteRequest) IsSetSkipCache() bool {
	return p.SkipCache != nil
}

func (p *ExecuteRequest) IsSetActionDigest() bool {
	return p.ActionDigest != nil
}

func (p *ExecuteRequest) IsSetExecutionPolicy() bool {
	return p.ExecutionPolicy != nil
}

func (p *ExecuteRequest) IsSetResultsCachePolicy() bool {
	return p.ResultsCachePolicy != nil
}

func (p *ExecuteRequest) IsSetExecutionMetadata() bool {
	return p.ExecutionMetadata != nil
}

func (p *ExecuteRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ExecuteRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.InstanceName = &v
	}
	return nil
}

func (p *ExecuteRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SkipCache = &v
	}
	return nil
}

func (p *ExecuteRequest) readField3(iprot thrift.TProtocol) error {
	p.ActionDigest = &Digest{}
	if err := p.ActionDigest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ActionDigest), err)
	}
	return nil
}

func (p *ExecuteRequest) readField4(iprot thrift.TProtocol) error {
	p.ExecutionPolicy = &ExecutionPolicy{}
	if err := p.ExecutionPolicy.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExecutionPolicy), err)
	}
	return nil
}

func (p *ExecuteRequest) readField5(iprot thrift.TProtocol) error {
	p.ResultsCachePolicy = &ResultsCachePolicy{}
	if err := p.ResultsCachePolicy.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ResultsCachePolicy), err)
	}
	return nil
}

func (p *ExecuteRequest) readField6(iprot thrift.TProtocol) error {
	p.ExecutionMetadata = &ExecutedActionMetadata{}
	if err := p.ExecutionMetadata.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExecutionMetadata), err)
	}
	return nil
}

func (p *ExecuteRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExecuteRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExecuteRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetInstanceName() {
		if err := oprot.WriteFieldBegin("instanceName", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:instanceName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.InstanceName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.instanceName (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:instanceName: ", p), err)
		}
	}
	return err
}

func (p *ExecuteRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSkipCache() {
		if err := oprot.WriteFieldBegin("skipCache", thrift.BOOL, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:skipCache: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.SkipCache)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.skipCache (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:skipCache: ", p), err)
		}
	}
	return err
}

func (p *ExecuteRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetActionDigest() {
		if err := oprot.WriteFieldBegin("actionDigest", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:actionDigest: ", p), err)
		}
		if err := p.ActionDigest.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ActionDigest), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:actionDigest: ", p), err)
		}
	}
	return err
}

func (p *ExecuteRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetExecutionPolicy() {
		if err := oprot.WriteFieldBegin("executionPolicy", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:executionPolicy: ", p), err)
		}
		if err := p.ExecutionPolicy.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExecutionPolicy), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:executionPolicy: ", p), err)
		}
	}
	return err
}

func (p *ExecuteRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetResultsCachePolicy() {
		if err := oprot.WriteFieldBegin("resultsCachePolicy", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:resultsCachePolicy: ", p), err)
		}
		if err := p.ResultsCachePolicy.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ResultsCachePolicy), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:resultsCachePolicy: ", p), err)
		}
	}
	return err
}

func (p *ExecuteRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetExecutionMetadata() {
		if err := oprot.WriteFieldBegin("executionMetadata", thrift.STRUCT, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:executionMetadata: ", p), err)
		}
		if err := p.ExecutionMetadata.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExecutionMetadata), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:executionMetadata: ", p), err)
		}
	}
	return err
}

func (p *ExecuteRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecuteRequest(%+v)", *p)
}

// Attributes:
//  - Path
//  - Digest
//  - IsExecutable
type OutputFile struct {
	Path         *string `thrift:"path,1" json:"path,omitempty"`
	Digest       *Digest `thrift:"digest,2" json:"digest,omitempty"`
	IsExecutable *bool   `thrift:"isExecutable,3" json:"isExecutable,omitempty"`
}

func NewOutputFile() *OutputFile {
	return &OutputFile{}
}

var OutputFile_Path_DEFAULT string

func (p *OutputFile) GetPath() string {
	if !p.IsSetPath() {
		return OutputFile_Path_DEFAULT
	}
	return *p.Path
}

var OutputFile_Digest_DEFAULT *Digest

func (p *OutputFile) GetDigest() *Digest {
	if !p.IsSetDigest() {
		return OutputFile_Digest_DEFAULT
	}
	return p.Digest
}

var OutputFile_IsExecutable_DEFAULT bool

func (p *OutputFile) GetIsExecutable() bool {
	if !p.IsSetIsExecutable() {
		return OutputFile_IsExecutable_DEFAULT
	}
	return *p.IsExecutable
}
func (p *OutputFile) IsSetPath() bool {
	return p.Path != nil
}

func (p *OutputFile) IsSetDigest() bool {
	return p.Digest != nil
}

func (p *OutputFile) IsSetIsExecutable() bool {
	return p.IsExecutable != nil
}

func (p *OutputFile) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OutputFile) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = &v
	}
	return nil
}

func (p *OutputFile) readField2(iprot thrift.TProtocol) error {
	p.Digest = &Digest{}
	if err := p.Digest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Digest), err)
	}
	return nil
}

func (p *OutputFile) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IsExecutable = &v
	}
	return nil
}

func (p *OutputFile) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OutputFile"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OutputFile) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPath() {
		if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Path)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
		}
	}
	return err
}

func (p *OutputFile) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDigest() {
		if err := oprot.WriteFieldBegin("digest", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:digest: ", p), err)
		}
		if err := p.Digest.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Digest), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:digest: ", p), err)
		}
	}
	return err
}

func (p *OutputFile) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsExecutable() {
		if err := oprot.WriteFieldBegin("isExecutable", thrift.BOOL, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:isExecutable: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IsExecutable)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isExecutable (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:isExecutable: ", p), err)
		}
	}
	return err
}

func (p *OutputFile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OutputFile(%+v)", *p)
}

// Attributes:
//  - Path
//  - TreeDigest
type OutputDirectory struct {
	Path       *string `thrift:"path,1" json:"path,omitempty"`
	TreeDigest *Digest `thrift:"treeDigest,2" json:"treeDigest,omitempty"`
}

func NewOutputDirectory() *OutputDirectory {
	return &OutputDirectory{}
}

var OutputDirectory_Path_DEFAULT string

func (p *OutputDirectory) GetPath() string {
	if !p.IsSetPath() {
		return OutputDirectory_Path_DEFAULT
	}
	return *p.Path
}

var OutputDirectory_TreeDigest_DEFAULT *Digest

func (p *OutputDirectory) GetTreeDigest() *Digest {
	if !p.IsSetTreeDigest() {
		return OutputDirectory_TreeDigest_DEFAULT
	}
	return p.TreeDigest
}
func (p *OutputDirectory) IsSetPath() bool {
	return p.Path != nil
}

func (p *OutputDirectory) IsSetTreeDigest() bool {
	return p.TreeDigest != nil
}

func (p *OutputDirectory) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OutputDirectory) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = &v
	}
	return nil
}

func (p *OutputDirectory) readField2(iprot thrift.TProtocol) error {
	p.TreeDigest = &Digest{}
	if err := p.TreeDigest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TreeDigest), err)
	}
	return nil
}

func (p *OutputDirectory) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OutputDirectory"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OutputDirectory) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPath() {
		if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Path)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
		}
	}
	return err
}

func (p *OutputDirectory) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTreeDigest() {
		if err := oprot.WriteFieldBegin("treeDigest", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:treeDigest: ", p), err)
		}
		if err := p.TreeDigest.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TreeDigest), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:treeDigest: ", p), err)
		}
	}
	return err
}

func (p *OutputDirectory) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OutputDirectory(%+v)", *p)
}

// Attributes:
//  - OutputFiles
//  - OutputDirectories
//  - ExitCode
//  - StdoutRaw
//  - StdoutDigest
//  - StderrRaw
//  - StderrDigest
//  - ExecutionMetadata
//  - ActionDigest
//  - GRPCStatus
//  - Cached
type ActionResult_ struct {
	OutputFiles       []*OutputFile           `thrift:"outputFiles,1" json:"outputFiles,omitempty"`
	OutputDirectories []*OutputDirectory      `thrift:"outputDirectories,2" json:"outputDirectories,omitempty"`
	ExitCode          *int32                  `thrift:"exitCode,3" json:"exitCode,omitempty"`
	StdoutRaw         []byte                  `thrift:"stdoutRaw,4" json:"stdoutRaw,omitempty"`
	StdoutDigest      *Digest                 `thrift:"stdoutDigest,5" json:"stdoutDigest,omitempty"`
	StderrRaw         []byte                  `thrift:"stderrRaw,6" json:"stderrRaw,omitempty"`
	StderrDigest      *Digest                 `thrift:"stderrDigest,7" json:"stderrDigest,omitempty"`
	ExecutionMetadata *ExecutedActionMetadata `thrift:"executionMetadata,8" json:"executionMetadata,omitempty"`
	ActionDigest      *Digest                 `thrift:"actionDigest,9" json:"actionDigest,omitempty"`
	GRPCStatus        []byte                  `thrift:"GRPCStatus,10" json:"GRPCStatus,omitempty"`
	Cached            *bool                   `thrift:"cached,11" json:"cached,omitempty"`
}

func NewActionResult_() *ActionResult_ {
	return &ActionResult_{}
}

var ActionResult__OutputFiles_DEFAULT []*OutputFile

func (p *ActionResult_) GetOutputFiles() []*OutputFile {
	return p.OutputFiles
}

var ActionResult__OutputDirectories_DEFAULT []*OutputDirectory

func (p *ActionResult_) GetOutputDirectories() []*OutputDirectory {
	return p.OutputDirectories
}

var ActionResult__ExitCode_DEFAULT int32

func (p *ActionResult_) GetExitCode() int32 {
	if !p.IsSetExitCode() {
		return ActionResult__ExitCode_DEFAULT
	}
	return *p.ExitCode
}

var ActionResult__StdoutRaw_DEFAULT []byte

func (p *ActionResult_) GetStdoutRaw() []byte {
	return p.StdoutRaw
}

var ActionResult__StdoutDigest_DEFAULT *Digest

func (p *ActionResult_) GetStdoutDigest() *Digest {
	if !p.IsSetStdoutDigest() {
		return ActionResult__StdoutDigest_DEFAULT
	}
	return p.StdoutDigest
}

var ActionResult__StderrRaw_DEFAULT []byte

func (p *ActionResult_) GetStderrRaw() []byte {
	return p.StderrRaw
}

var ActionResult__StderrDigest_DEFAULT *Digest

func (p *ActionResult_) GetStderrDigest() *Digest {
	if !p.IsSetStderrDigest() {
		return ActionResult__StderrDigest_DEFAULT
	}
	return p.StderrDigest
}

var ActionResult__ExecutionMetadata_DEFAULT *ExecutedActionMetadata

func (p *ActionResult_) GetExecutionMetadata() *ExecutedActionMetadata {
	if !p.IsSetExecutionMetadata() {
		return ActionResult__ExecutionMetadata_DEFAULT
	}
	return p.ExecutionMetadata
}

var ActionResult__ActionDigest_DEFAULT *Digest

func (p *ActionResult_) GetActionDigest() *Digest {
	if !p.IsSetActionDigest() {
		return ActionResult__ActionDigest_DEFAULT
	}
	return p.ActionDigest
}

var ActionResult__GRPCStatus_DEFAULT []byte

func (p *ActionResult_) GetGRPCStatus() []byte {
	return p.GRPCStatus
}

var ActionResult__Cached_DEFAULT bool

func (p *ActionResult_) GetCached() bool {
	if !p.IsSetCached() {
		return ActionResult__Cached_DEFAULT
	}
	return *p.Cached
}
func (p *ActionResult_) IsSetOutputFiles() bool {
	return p.OutputFiles != nil
}

func (p *ActionResult_) IsSetOutputDirectories() bool {
	return p.OutputDirectories != nil
}

func (p *ActionResult_) IsSetExitCode() bool {
	return p.ExitCode != nil
}

func (p *ActionResult_) IsSetStdoutRaw() bool {
	return p.StdoutRaw != nil
}

func (p *ActionResult_) IsSetStdoutDigest() bool {
	return p.StdoutDigest != nil
}

func (p *ActionResult_) IsSetStderrRaw() bool {
	return p.StderrRaw != nil
}

func (p *ActionResult_) IsSetStderrDigest() bool {
	return p.StderrDigest != nil
}

func (p *ActionResult_) IsSetExecutionMetadata() bool {
	return p.ExecutionMetadata != nil
}

func (p *ActionResult_) IsSetActionDigest() bool {
	return p.ActionDigest != nil
}

func (p *ActionResult_) IsSetGRPCStatus() bool {
	return p.GRPCStatus != nil
}

func (p *ActionResult_) IsSetCached() bool {
	return p.Cached != nil
}

func (p *ActionResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ActionResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*OutputFile, 0, size)
	p.OutputFiles = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &OutputFile{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.OutputFiles = append(p.OutputFiles, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ActionResult_) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*OutputDirectory, 0, size)
	p.OutputDirectories = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &OutputDirectory{}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.OutputDirectories = append(p.OutputDirectories, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ActionResult_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ExitCode = &v
	}
	return nil
}

func (p *ActionResult_) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.StdoutRaw = v
	}
	return nil
}

func (p *ActionResult_) readField5(iprot thrift.TProtocol) error {
	p.StdoutDigest = &Digest{}
	if err := p.StdoutDigest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StdoutDigest), err)
	}
	return nil
}

func (p *ActionResult_) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.StderrRaw = v
	}
	return nil
}

func (p *ActionResult_) readField7(iprot thrift.TProtocol) error {
	p.StderrDigest = &Digest{}
	if err := p.StderrDigest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StderrDigest), err)
	}
	return nil
}

func (p *ActionResult_) readField8(iprot thrift.TProtocol) error {
	p.ExecutionMetadata = &ExecutedActionMetadata{}
	if err := p.ExecutionMetadata.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExecutionMetadata), err)
	}
	return nil
}

func (p *ActionResult_) readField9(iprot thrift.TProtocol) error {
	p.ActionDigest = &Digest{}
	if err := p.ActionDigest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ActionDigest), err)
	}
	return nil
}

func (p *ActionResult_) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.GRPCStatus = v
	}
	return nil
}

func (p *ActionResult_) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Cached = &v
	}
	return nil
}

func (p *ActionResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ActionResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ActionResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputFiles() {
		if err := oprot.WriteFieldBegin("outputFiles", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:outputFiles: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OutputFiles)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.OutputFiles {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:outputFiles: ", p), err)
		}
	}
	return err
}

func (p *ActionResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputDirectories() {
		if err := oprot.WriteFieldBegin("outputDirectories", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:outputDirectories: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OutputDirectories)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.OutputDirectories {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:outputDirectories: ", p), err)
		}
	}
	return err
}

func (p *ActionResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetExitCode() {
		if err := oprot.WriteFieldBegin("exitCode", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:exitCode: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ExitCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.exitCode (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:exitCode: ", p), err)
		}
	}
	return err
}

func (p *ActionResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStdoutRaw() {
		if err := oprot.WriteFieldBegin("stdoutRaw", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stdoutRaw: ", p), err)
		}
		if err := oprot.WriteBinary(p.StdoutRaw); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.stdoutRaw (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stdoutRaw: ", p), err)
		}
	}
	return err
}

func (p *ActionResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStdoutDigest() {
		if err := oprot.WriteFieldBegin("stdoutDigest", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:stdoutDigest: ", p), err)
		}
		if err := p.StdoutDigest.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StdoutDigest), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:stdoutDigest: ", p), err)
		}
	}
	return err
}

func (p *ActionResult_) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStderrRaw() {
		if err := oprot.WriteFieldBegin("stderrRaw", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:stderrRaw: ", p), err)
		}
		if err := oprot.WriteBinary(p.StderrRaw); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.stderrRaw (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:stderrRaw: ", p), err)
		}
	}
	return err
}

func (p *ActionResult_) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetStderrDigest() {
		if err := oprot.WriteFieldBegin("stderrDigest", thrift.STRUCT, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:stderrDigest: ", p), err)
		}
		if err := p.StderrDigest.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StderrDigest), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:stderrDigest: ", p), err)
		}
	}
	return err
}

func (p *ActionResult_) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetExecutionMetadata() {
		if err := oprot.WriteFieldBegin("executionMetadata", thrift.STRUCT, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:executionMetadata: ", p), err)
		}
		if err := p.ExecutionMetadata.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExecutionMetadata), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:executionMetadata: ", p), err)
		}
	}
	return err
}

func (p *ActionResult_) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetActionDigest() {
		if err := oprot.WriteFieldBegin("actionDigest", thrift.STRUCT, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:actionDigest: ", p), err)
		}
		if err := p.ActionDigest.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ActionDigest), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:actionDigest: ", p), err)
		}
	}
	return err
}

func (p *ActionResult_) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetGRPCStatus() {
		if err := oprot.WriteFieldBegin("GRPCStatus", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:GRPCStatus: ", p), err)
		}
		if err := oprot.WriteBinary(p.GRPCStatus); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.GRPCStatus (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:GRPCStatus: ", p), err)
		}
	}
	return err
}

func (p *ActionResult_) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetCached() {
		if err := oprot.WriteFieldBegin("cached", thrift.BOOL, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:cached: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Cached)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cached (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:cached: ", p), err)
		}
	}
	return err
}

func (p *ActionResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ActionResult_(%+v)", *p)
}
