// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/dgassaway/workspace/src/google.golang.org/genproto/googleapis/devtools/remoteexecution/v1test/remote_execution.pb.go

// Package mock_remoteexecution is a generated GoMock package.
package mock_remoteexecution

import (
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	. "google.golang.org/genproto/googleapis/devtools/remoteexecution/v1test"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockExecutionClient is a mock of ExecutionClient interface
type MockExecutionClient struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionClientMockRecorder
}

// MockExecutionClientMockRecorder is the mock recorder for MockExecutionClient
type MockExecutionClientMockRecorder struct {
	mock *MockExecutionClient
}

// NewMockExecutionClient creates a new mock instance
func NewMockExecutionClient(ctrl *gomock.Controller) *MockExecutionClient {
	mock := &MockExecutionClient{ctrl: ctrl}
	mock.recorder = &MockExecutionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecutionClient) EXPECT() *MockExecutionClientMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockExecutionClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Execute", varargs...)
	ret0, _ := ret[0].(*longrunning.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockExecutionClientMockRecorder) Execute(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockExecutionClient)(nil).Execute), varargs...)
}

// MockExecutionServer is a mock of ExecutionServer interface
type MockExecutionServer struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionServerMockRecorder
}

// MockExecutionServerMockRecorder is the mock recorder for MockExecutionServer
type MockExecutionServerMockRecorder struct {
	mock *MockExecutionServer
}

// NewMockExecutionServer creates a new mock instance
func NewMockExecutionServer(ctrl *gomock.Controller) *MockExecutionServer {
	mock := &MockExecutionServer{ctrl: ctrl}
	mock.recorder = &MockExecutionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecutionServer) EXPECT() *MockExecutionServerMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockExecutionServer) Execute(arg0 context.Context, arg1 *ExecuteRequest) (*longrunning.Operation, error) {
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(*longrunning.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockExecutionServerMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockExecutionServer)(nil).Execute), arg0, arg1)
}

// MockActionCacheClient is a mock of ActionCacheClient interface
type MockActionCacheClient struct {
	ctrl     *gomock.Controller
	recorder *MockActionCacheClientMockRecorder
}

// MockActionCacheClientMockRecorder is the mock recorder for MockActionCacheClient
type MockActionCacheClientMockRecorder struct {
	mock *MockActionCacheClient
}

// NewMockActionCacheClient creates a new mock instance
func NewMockActionCacheClient(ctrl *gomock.Controller) *MockActionCacheClient {
	mock := &MockActionCacheClient{ctrl: ctrl}
	mock.recorder = &MockActionCacheClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockActionCacheClient) EXPECT() *MockActionCacheClientMockRecorder {
	return m.recorder
}

// GetActionResult mocks base method
func (m *MockActionCacheClient) GetActionResult(ctx context.Context, in *GetActionResultRequest, opts ...grpc.CallOption) (*ActionResult, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetActionResult", varargs...)
	ret0, _ := ret[0].(*ActionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionResult indicates an expected call of GetActionResult
func (mr *MockActionCacheClientMockRecorder) GetActionResult(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionResult", reflect.TypeOf((*MockActionCacheClient)(nil).GetActionResult), varargs...)
}

// UpdateActionResult mocks base method
func (m *MockActionCacheClient) UpdateActionResult(ctx context.Context, in *UpdateActionResultRequest, opts ...grpc.CallOption) (*ActionResult, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateActionResult", varargs...)
	ret0, _ := ret[0].(*ActionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateActionResult indicates an expected call of UpdateActionResult
func (mr *MockActionCacheClientMockRecorder) UpdateActionResult(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActionResult", reflect.TypeOf((*MockActionCacheClient)(nil).UpdateActionResult), varargs...)
}

// MockActionCacheServer is a mock of ActionCacheServer interface
type MockActionCacheServer struct {
	ctrl     *gomock.Controller
	recorder *MockActionCacheServerMockRecorder
}

// MockActionCacheServerMockRecorder is the mock recorder for MockActionCacheServer
type MockActionCacheServerMockRecorder struct {
	mock *MockActionCacheServer
}

// NewMockActionCacheServer creates a new mock instance
func NewMockActionCacheServer(ctrl *gomock.Controller) *MockActionCacheServer {
	mock := &MockActionCacheServer{ctrl: ctrl}
	mock.recorder = &MockActionCacheServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockActionCacheServer) EXPECT() *MockActionCacheServerMockRecorder {
	return m.recorder
}

// GetActionResult mocks base method
func (m *MockActionCacheServer) GetActionResult(arg0 context.Context, arg1 *GetActionResultRequest) (*ActionResult, error) {
	ret := m.ctrl.Call(m, "GetActionResult", arg0, arg1)
	ret0, _ := ret[0].(*ActionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionResult indicates an expected call of GetActionResult
func (mr *MockActionCacheServerMockRecorder) GetActionResult(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionResult", reflect.TypeOf((*MockActionCacheServer)(nil).GetActionResult), arg0, arg1)
}

// UpdateActionResult mocks base method
func (m *MockActionCacheServer) UpdateActionResult(arg0 context.Context, arg1 *UpdateActionResultRequest) (*ActionResult, error) {
	ret := m.ctrl.Call(m, "UpdateActionResult", arg0, arg1)
	ret0, _ := ret[0].(*ActionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateActionResult indicates an expected call of UpdateActionResult
func (mr *MockActionCacheServerMockRecorder) UpdateActionResult(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActionResult", reflect.TypeOf((*MockActionCacheServer)(nil).UpdateActionResult), arg0, arg1)
}

// MockContentAddressableStorageClient is a mock of ContentAddressableStorageClient interface
type MockContentAddressableStorageClient struct {
	ctrl     *gomock.Controller
	recorder *MockContentAddressableStorageClientMockRecorder
}

// MockContentAddressableStorageClientMockRecorder is the mock recorder for MockContentAddressableStorageClient
type MockContentAddressableStorageClientMockRecorder struct {
	mock *MockContentAddressableStorageClient
}

// NewMockContentAddressableStorageClient creates a new mock instance
func NewMockContentAddressableStorageClient(ctrl *gomock.Controller) *MockContentAddressableStorageClient {
	mock := &MockContentAddressableStorageClient{ctrl: ctrl}
	mock.recorder = &MockContentAddressableStorageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContentAddressableStorageClient) EXPECT() *MockContentAddressableStorageClientMockRecorder {
	return m.recorder
}

// FindMissingBlobs mocks base method
func (m *MockContentAddressableStorageClient) FindMissingBlobs(ctx context.Context, in *FindMissingBlobsRequest, opts ...grpc.CallOption) (*FindMissingBlobsResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMissingBlobs", varargs...)
	ret0, _ := ret[0].(*FindMissingBlobsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMissingBlobs indicates an expected call of FindMissingBlobs
func (mr *MockContentAddressableStorageClientMockRecorder) FindMissingBlobs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMissingBlobs", reflect.TypeOf((*MockContentAddressableStorageClient)(nil).FindMissingBlobs), varargs...)
}

// BatchUpdateBlobs mocks base method
func (m *MockContentAddressableStorageClient) BatchUpdateBlobs(ctx context.Context, in *BatchUpdateBlobsRequest, opts ...grpc.CallOption) (*BatchUpdateBlobsResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchUpdateBlobs", varargs...)
	ret0, _ := ret[0].(*BatchUpdateBlobsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateBlobs indicates an expected call of BatchUpdateBlobs
func (mr *MockContentAddressableStorageClientMockRecorder) BatchUpdateBlobs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateBlobs", reflect.TypeOf((*MockContentAddressableStorageClient)(nil).BatchUpdateBlobs), varargs...)
}

// GetTree mocks base method
func (m *MockContentAddressableStorageClient) GetTree(ctx context.Context, in *GetTreeRequest, opts ...grpc.CallOption) (*GetTreeResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTree", varargs...)
	ret0, _ := ret[0].(*GetTreeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTree indicates an expected call of GetTree
func (mr *MockContentAddressableStorageClientMockRecorder) GetTree(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTree", reflect.TypeOf((*MockContentAddressableStorageClient)(nil).GetTree), varargs...)
}

// MockContentAddressableStorageServer is a mock of ContentAddressableStorageServer interface
type MockContentAddressableStorageServer struct {
	ctrl     *gomock.Controller
	recorder *MockContentAddressableStorageServerMockRecorder
}

// MockContentAddressableStorageServerMockRecorder is the mock recorder for MockContentAddressableStorageServer
type MockContentAddressableStorageServerMockRecorder struct {
	mock *MockContentAddressableStorageServer
}

// NewMockContentAddressableStorageServer creates a new mock instance
func NewMockContentAddressableStorageServer(ctrl *gomock.Controller) *MockContentAddressableStorageServer {
	mock := &MockContentAddressableStorageServer{ctrl: ctrl}
	mock.recorder = &MockContentAddressableStorageServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContentAddressableStorageServer) EXPECT() *MockContentAddressableStorageServerMockRecorder {
	return m.recorder
}

// FindMissingBlobs mocks base method
func (m *MockContentAddressableStorageServer) FindMissingBlobs(arg0 context.Context, arg1 *FindMissingBlobsRequest) (*FindMissingBlobsResponse, error) {
	ret := m.ctrl.Call(m, "FindMissingBlobs", arg0, arg1)
	ret0, _ := ret[0].(*FindMissingBlobsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMissingBlobs indicates an expected call of FindMissingBlobs
func (mr *MockContentAddressableStorageServerMockRecorder) FindMissingBlobs(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMissingBlobs", reflect.TypeOf((*MockContentAddressableStorageServer)(nil).FindMissingBlobs), arg0, arg1)
}

// BatchUpdateBlobs mocks base method
func (m *MockContentAddressableStorageServer) BatchUpdateBlobs(arg0 context.Context, arg1 *BatchUpdateBlobsRequest) (*BatchUpdateBlobsResponse, error) {
	ret := m.ctrl.Call(m, "BatchUpdateBlobs", arg0, arg1)
	ret0, _ := ret[0].(*BatchUpdateBlobsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateBlobs indicates an expected call of BatchUpdateBlobs
func (mr *MockContentAddressableStorageServerMockRecorder) BatchUpdateBlobs(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateBlobs", reflect.TypeOf((*MockContentAddressableStorageServer)(nil).BatchUpdateBlobs), arg0, arg1)
}

// GetTree mocks base method
func (m *MockContentAddressableStorageServer) GetTree(arg0 context.Context, arg1 *GetTreeRequest) (*GetTreeResponse, error) {
	ret := m.ctrl.Call(m, "GetTree", arg0, arg1)
	ret0, _ := ret[0].(*GetTreeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTree indicates an expected call of GetTree
func (mr *MockContentAddressableStorageServerMockRecorder) GetTree(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTree", reflect.TypeOf((*MockContentAddressableStorageServer)(nil).GetTree), arg0, arg1)
}
